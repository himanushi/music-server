{"version":3,"sources":["graphql/types.d.tsx","hooks/userContext.tsx","layouts/app/Bar.tsx","layouts/app/client.ts","components/pagination/paginationComponent.tsx","components/image/ImageComponent.tsx","components/imageCard/ImageCardComponent.tsx","hooks/useParameters.ts","hooks/playerContext.tsx","components/favorite/FavoriteComponent.tsx","layouts/artist/item/ArtistItemLayout.tsx","components/search/OrderComponent.tsx","components/chip/ChipsComponent.tsx","components/search/SearchKeywordComponent.tsx","layouts/artist/list/ArtistsLayout.tsx","layouts/album/item/AlbumItemLayout.tsx","layouts/album/list/AlbumsLayout.tsx","layouts/artist/info/ArtistInfoLayout.tsx","components/player/PreviewPlayer.ts","components/player/AppleMusicPlayer.ts","lib/SecureCookies.ts","components/player/SpotifyPlayer.ts","components/player/Player.ts","components/player/MusicServiceButtonComponent.tsx","components/player/PreviewPlayerItemComponent.tsx","components/player/ShareButtonComponent.tsx","hooks/useMusicKit/useMusicKitReady.ts","hooks/useMusicKit/useMusicKitAuthentication.ts","hooks/informationContext.tsx","hooks/useSpotify/useSpotifyAuthentication.ts","components/player/PreviewPlayerComponent.tsx","layouts/album/info/AlbumInfoLayout.tsx","layouts/track/list/TracksLayout.tsx","layouts/user/login/UserLoginLayout.tsx","layouts/user/logout/UserLogoutLayout.tsx","layouts/user/me/UserMeLayout.tsx","layouts/user/meEdit/UserMeEditLayout.tsx","layouts/player/PreviewPlayerLayout.tsx","layouts/app/PlayerBar.tsx","layouts/information/InformationLayout.tsx","layouts/information/AboutLayout.tsx","layouts/information/TermsLayout.tsx","layouts/information/PrivacyLayout.tsx","layouts/information/CookiePolicyLayout.tsx","layouts/app/InitializeUser.tsx","layouts/user/signup/UserSignupLayout.tsx","components/infomation/SnackbarComponent.tsx","layouts/app/CookieInformation.tsx","hooks/useMusicKit/initMusicKit.ts","layouts/appleMusic/InitAppleMusic.tsx","layouts/spotify/InitSpotify.tsx","layouts/app/Root.tsx","layouts/app/RootStyle.tsx","layouts/app/serviceWorker.ts","layouts/app/App.tsx","index.tsx"],"names":["AlbumsQueryOrderEnum","ArtistsQueryOrderEnum","SortEnum","StatusEnum","TracksQueryOrderEnum","UserContext","createContext","initialState","user","reducer","state","action","type","UserProvider","children","useReducer","dispatch","Provider","value","HideOnScroll","props","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","Bar","resetTitle","title","document","querySelector","setAttribute","useContext","React","useState","searchEl","setSearchEl","userEl","setUserEl","infoEl","setInfoEl","AppBar","Toolbar","Grid","container","justify","alignItems","spacing","item","Typography","color","style","textDecoration","component","Link","onClick","to","variant","IconButton","event","currentTarget","edge","size","aria-label","Menu","anchorEl","keepMounted","open","Boolean","onClose","MenuItem","role","allowedActions","includes","registered","key","httpLink","HttpLink","uri","process","credentials","headersLink","ApolloLink","operation","forward","errorLink","onError","graphQLErrors","networkError","map","message","locations","path","console","log","link","from","ApolloClient","cache","InMemoryCache","dataIdFromObject","object","id","ChangeFavoritesDocument","gql","SpotifyTokenDocument","AlbumDocument","AlbumsDocument","AppleMusicTokenDocument","ArtistDocument","ArtistsDocument","TracksDocument","LoginDocument","LogoutDocument","MeDocument","UpdateMeDocument","SignupDocument","PaginationComponent","no","offset","limit","fetchMore","prevComponent","setPrevComponent","alreadyFetch","setAlreadyFetch","isFetch","onEnter","variables","cursor","updateQuery","prev","fetchMoreResult","items","ImageComponent","className","src","width","CardMedia","image","height","ImageCardComponent","linkUrl","createElement","Card","position","CardActionArea","left","bottom","bottomComponent","topComponent","CardContent","padding","overflow","textOverflow","whiteSpace","ParameterPrefixKeys","artist","album","track","ParameterKeys","useParameters","prefix","location","useLocation","params","URLSearchParams","search","prefixKey","getUniqueValues","get","values","split","uniqueValues","Set","forEach","add","Array","customizer","objValue","srcValue","_","isArray","concat","parameters","conditions","merge","name","test","artists","albums","tracks","status","mergeWith","length","favorite","usernames","sort","order","PlaybackStatus","LoadingStatus","FavoriteComponent","contentWidth","favorable_type","favorable_id","setFavorite","useEffect","ids","albumIds","artistIds","input","input_id","baseOptions","update","response","data","changeFavorites","currentUser","ApolloReactHooks","changeFavorite","favoriteIcon","theme","createMuiTheme","palette","primary","red","stroke","strokeWidth","top","e","preventDefault","ArtistItemLayout","history","useHistory","set","delete","borderRadius","fontSize","lineHeight","textAlign","background","serviceIcons","Pending","push","backgroundColor","Ignore","artworkM","url","toString","OrderComponent","label","minWidth","selectItems","onChange","FormControl","InputLabel","Select","i","ChipsComponent","labels","onDelete","colorCode","main","index","Chip","SearchKeywordComponent","canSearch","setCanSearch","keyword","setKeyword","onlyFavorite","setOnlyFavorite","setUsernames","join","pathname","match","_keyword","startsWith","indexOf","slice","replace","trim","usernamesContent","filter","searchType","favoriteContent","_event","htmlFor","OutlinedInput","onKeyDown","keyCode","startAdornment","endAdornment","InputAdornment","ArtistsLayout","setOrder","fetchPolicy","error","_order","content","_child","sortType","AlbumItemLayout","appleMusicAlbum","itunesAlbum","spotifyAlbum","AlbumsLayout","ArtistInfoLayout","useParams","useQuery","titles","description","ReactGA","pageview","artworkL","PreviewPlayer","player","currentPlaybackNo","this","navigator","mediaSession","metadata","MediaMetadata","artwork","sizes","setActionHandler","play","setPlayer","stop","previewUrl","Howl","html5","preload","autoplay","onend","onplay","setMediaMetadata","volume","fade","setTimeout","duration","seek","onstop","playing","pause","AppleMusicPlayer","MusicKit","getInstance","setQueue","_registry","playbackStateDidChange","addEventListener","PlaybackStates","music","appleMusicTrack","appleMusicTracks","find","a","Error","queue","songs","appleMusicId","playbackState","SecureCookies","secureObject","protocol","secure","sameSite","options","Cookies","remove","SpotifyPlayer","cookie","accessToken","SpotifyWebApi","spotifyTrack","spotifyTracks","getMe","catch","reload","me","body","product","device_id","setVolume","uris","spotifyId","Player","canFullPlayAppleMusic","canFullPlaySpotify","currentPlyer","players","_players","reverse","playbackNo","currentTrack","nextNo","nextPlay","PlayerContext","currentNo","playbackStatus","None","loadingStatus","Done","Stop","Play","Pause","Loading","PlayerProvider","MusicServiceButtonComponent","contents","Button","href","blue","green","useStyles","makeStyles","transform","playingIcon","animationName","animationDuration","animationIterationCount","animationTimingFunction","PreviewPlayerItemComponent","playAction","averagePopularity","classes","playable","currentTrackIcon","svgProps","stopColor","cloneElement","fill","starable","popularity","TableRow","TableCell","align","disabled","ShareButtonComponent","twitterUrl","facebookUrl","encodeURIComponent","useMusicKitReady","initialReady","isReady","setIsReady","eventContent","removeEventListener","useMusicKitAuthentication","isAuthorized","setIsAuthorized","authentication","login","authorize","logout","unauthorize","callback","result","authorizationStatus","Events","authorizationStatusDidChange","InformationContext","severity","text","buttonText","closeHandler","InformationProvider","useSpotifyAuthentication","useLazyQuery","getToken","infoContext","scopes","_uuid","uuid","expires","spotifyApi","clientId","redirectUri","createAuthorizeURL","code","setAccessToken","spotifyToken","refreshToken","isRefresh","PreviewPlayerComponent","openInfo","setOpenInfo","timeConversion","ms","seconds","parseInt","toFixed","minutes","hours","days","durationMs","reduce","accumulator","currentValue","releaseDate","Date","toLocaleDateString","year","month","day","totalTracks","apple","spotify","hasAppleMusicAlbum","hasSpotifyAlbum","initPlayer","useRef","current","_player","previewOrPlayLabel","ClickAwayListener","onClickAway","Tooltip","PopperProps","disablePortal","disableFocusListener","disableHoverListener","disableTouchListener","placement","meanBy","t","TableContainer","Paper","maxWidth","Table","TableHead","colSpan","border","copyright","TableBody","AlbumInfoLayout","loading","album_content","TracksLayout","openPreviewInfo","setOpenPreviewInfo","openTitleInfo","setOpenTitleInfo","UserLoginLayout","username","setUsername","password","setPassword","userContext","token","setToken","recaptchaRef","reset","required","Input","ref","sitekey","_token","UserLogoutLayout","playerContext","UserMeLayout","openInfoPublicInformation","setOpenInfoPublicInformation","openInfoMusicServiceLogin","setOpenInfoMusicServiceLogin","publicTypes","publicInformations","p","publicType","publicArtist","publicAlbum","canLoginToApple","appleLoginButton","canLoginToSpotify","spotifyLoginButton","UserMeEditLayout","setup","setSetup","setName","isPublicArtist","setIsPublicArtist","isPublicAlbum","setIsPublicAlbum","oldPassword","setOldPassword","newPassword","setNewPassword","passwordConfirmation","setPasswordConfirmation","setInput","updateMe","_theme","loadingIcon","PreviewPlayerLayout","playbackButton","skipButton","artwork_content","title_content","xs","PlayerBar","InformationLayout","markdown","source","escapeHtml","AboutLayout","TermsLayout","PrivacyLayout","CookiePolicyLayout","InitializeUser","cookieEnabled","v","version","UserSignupLayout","agreedTerms","setAgreedTerms","agreedPrivacy","setAgreedPrivacy","signup","buttonDisabled","FormHelperText","FormControlLabel","control","Checkbox","checked","SnackbarComponent","defaultCloseHandler","onCloseEvent","Snackbar","autoHideDuration","Alert","CookieInformation","initMusicKit","config","configure","initConfig","countryCode","api","storefrontId","InitAppleMusic","developerToken","appleMusicToken","app","build","InitSpotify","onSpotifyWebPlaybackSDKReady","Spotify","getOAuthToken","cb","addListener","paused","track_window","previous_tracks","connect","RootLayout","client","Container","flexGrow","exact","secondary","typography","fontFamily","RootStyleLayout","ThemeProvider","CssBaseline","rel","Root","hostname","App","initialize","RootStyle","serviceWorker","ready","then","registration","unregister","ReactDOM","render"],"mappings":"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","file":"static/js/main.306db1bb.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** 正の整数 */\n  PositiveNumber: any;\n  /** Table id, hex Timestamp, ID */\n  TTID: any;\n};\n\n/** アルバム */\nexport type Album = {\n   __typename?: 'Album';\n  /** Apple Music アルバム */\n  appleMusicAlbum?: Maybe<AppleMusicAlbum>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** コピーライト */\n  copyright: Scalars['String'];\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** iTunes アルバム */\n  itunesAlbum?: Maybe<AppleMusicAlbum>;\n  /** タイトル */\n  name: Scalars['String'];\n  /** レーベル */\n  recordLabel: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アルバム */\n  spotifyAlbum?: Maybe<SpotifyAlbum>;\n  /** ステータス */\n  status: StatusEnum;\n  /** トラック数 */\n  totalTracks: Scalars['PositiveNumber'];\n  /** トラック */\n  tracks: Array<Track>;\n};\n\nexport type AlbumsConditionsInputObject = {\n  /** ユーザー名 */\n  usernames?: Maybe<Array<Scalars['String']>>;\n  /** アーティストID */\n  artists?: Maybe<IdInputObject>;\n  /** アルバム名(あいまい検索) */\n  name?: Maybe<Scalars['String']>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n  /** お気に入り */\n  favorite?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum AlbumsQueryOrderEnum {\n  /** 追加順 */\n  New = 'NEW',\n  /** 発売日順 */\n  Release = 'RELEASE',\n  /** 人気順 */\n  Popularity = 'POPULARITY'\n}\n\nexport type AlbumsSortInputObject = {\n  /** 並び順対象 */\n  order?: Maybe<AlbumsQueryOrderEnum>;\n  /** 並び順 */\n  type?: Maybe<SortEnum>;\n};\n\n/** Apple Music アルバム */\nexport type AppleMusicAlbum = {\n   __typename?: 'AppleMusicAlbum';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n};\n\n/** Apple Music アーティスト */\nexport type AppleMusicArtist = {\n   __typename?: 'AppleMusicArtist';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** Apple Music トラック */\nexport type AppleMusicTrack = {\n   __typename?: 'AppleMusicTrack';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n};\n\n/** アーティスト */\nexport type Artist = {\n   __typename?: 'Artist';\n  /** 関連アルバム */\n  albums?: Maybe<Array<Album>>;\n  /** Apple Music アーティスト */\n  appleMusicArtists?: Maybe<Array<AppleMusicArtist>>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アーティスト */\n  spotifyArtists?: Maybe<Array<SpotifyArtist>>;\n  /** ステータス */\n  status: StatusEnum;\n  /** 関連曲 */\n  tracks?: Maybe<Array<Track>>;\n};\n\nexport type ArtistsConditionsInputObject = {\n  /** ユーザー名 */\n  usernames?: Maybe<Array<Scalars['String']>>;\n  /** アルバムID */\n  albums?: Maybe<IdInputObject>;\n  /** アーティスト名(あいまい検索) */\n  name?: Maybe<Scalars['String']>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n  /** お気に入り */\n  favorite?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum ArtistsQueryOrderEnum {\n  /** 名前順 */\n  Name = 'NAME',\n  /** 追加順 */\n  New = 'NEW',\n  /** 人気順 */\n  Popularity = 'POPULARITY'\n}\n\nexport type ArtistsSortInputObject = {\n  /** ソート対象 */\n  order?: Maybe<ArtistsQueryOrderEnum>;\n  /** 並び順 */\n  type?: Maybe<SortEnum>;\n};\n\n/** アートワーク */\nexport type Artwork = {\n   __typename?: 'Artwork';\n  /** 高さ */\n  height?: Maybe<Scalars['PositiveNumber']>;\n  /** URL */\n  url?: Maybe<Scalars['String']>;\n  /** 幅 */\n  width?: Maybe<Scalars['PositiveNumber']>;\n};\n\n/** Autogenerated input type of ChangeFavorites */\nexport type ChangeFavoritesInput = {\n  /** お気に入り変更したいアーティストID */\n  artistIds?: Maybe<Array<Scalars['TTID']>>;\n  /** お気に入り変更したいアルバムID */\n  albumIds?: Maybe<Array<Scalars['TTID']>>;\n  /** true の場合は一括でお気に入り登録をする。false 場合は一括で解除する。 */\n  favorite: Scalars['Boolean'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ChangeFavorites */\nexport type ChangeFavoritesPayload = {\n   __typename?: 'ChangeFavoritesPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** 更新されたカレントユーザー */\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of ChangeStatus */\nexport type ChangeStatusInput = {\n  /** 変更したいアーティストID */\n  artistId?: Maybe<Scalars['TTID']>;\n  /** 変更したいアルバムID */\n  albumId?: Maybe<Scalars['TTID']>;\n  /** 変更したいトラックID */\n  trackId?: Maybe<Scalars['TTID']>;\n  /** 変更したいステータス */\n  status: StatusEnum;\n  /** true の場合は関連のステータスは変更しない。デフォルトは false。アーティスト限定 */\n  only?: Maybe<Scalars['Boolean']>;\n  /** true の場合は Twitter に投稿する。デフォルトは true */\n  tweet?: Maybe<Scalars['Boolean']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ChangeStatus */\nexport type ChangeStatusPayload = {\n   __typename?: 'ChangeStatusPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  /** 変更されたステータスを持ったモデル */\n  model?: Maybe<ModelHasStatusUnion>;\n};\n\n/** Autogenerated input type of ClearCache */\nexport type ClearCacheInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ClearCache */\nexport type ClearCachePayload = {\n   __typename?: 'ClearCachePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  results?: Maybe<Array<Scalars['String']>>;\n};\n\n/** Autogenerated input type of CompactAlbum */\nexport type CompactAlbumInput = {\n  /** 統合後のアルバム名。 */\n  name: Scalars['String'];\n  /** 統合したいアルバムID。Apple Music アルバムのみ統合される。指定した順番通りに統合する。 */\n  albumIdsForAppleMusic?: Maybe<Array<Scalars['TTID']>>;\n  /** 統合したいアルバムID。Spotify アルバムのみ統合される。指定した順番通りに統合する。 */\n  albumIdsForSpotify?: Maybe<Array<Scalars['TTID']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CompactAlbum */\nexport type CompactAlbumPayload = {\n   __typename?: 'CompactAlbumPayload';\n  /** 統合されたアルバム */\n  album?: Maybe<Album>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** カレントユーザー */\nexport type CurrentUser = {\n   __typename?: 'CurrentUser';\n  /** お気に入り */\n  favorite: Favorite;\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** 公開情報 */\n  publicInformations: Array<PublicInformation>;\n  /** 登録済み */\n  registered: Scalars['Boolean'];\n  /** ロール */\n  role: Role;\n  /** ユーザー名 */\n  username: Scalars['String'];\n  /** バージョンファイル */\n  version: Scalars['String'];\n};\n\nexport type CursorInputObject = {\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n};\n\n/** お気に入り */\nexport type Favorite = {\n   __typename?: 'Favorite';\n  /** アルバムID */\n  albumIds: Array<Scalars['String']>;\n  /** アーティストID */\n  artistIds: Array<Scalars['String']>;\n};\n\n/** Autogenerated input type of ForceIgnoreAlbum */\nexport type ForceIgnoreAlbumInput = {\n  /** 除外コンテンツに登録したいアルバムID */\n  albumId: Scalars['TTID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ForceIgnoreAlbum */\nexport type ForceIgnoreAlbumPayload = {\n   __typename?: 'ForceIgnoreAlbumPayload';\n  /** 除外コンテンツに登録されたアルバム */\n  album?: Maybe<Album>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of GenerateSitemaps */\nexport type GenerateSitemapsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of GenerateSitemaps */\nexport type GenerateSitemapsPayload = {\n   __typename?: 'GenerateSitemapsPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  results?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type IdInputObject = {\n  /** ID */\n  id?: Maybe<Array<Scalars['TTID']>>;\n};\n\n/** Autogenerated input type of IgnoreAlbums */\nexport type IgnoreAlbumsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of IgnoreAlbums */\nexport type IgnoreAlbumsPayload = {\n   __typename?: 'IgnoreAlbumsPayload';\n  /** IGNOREされたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of IgnoreArtists */\nexport type IgnoreArtistsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of IgnoreArtists */\nexport type IgnoreArtistsPayload = {\n   __typename?: 'IgnoreArtistsPayload';\n  /** IGNOREされたアーティスト */\n  artists?: Maybe<Array<Artist>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of Login */\nexport type LoginInput = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of Login */\nexport type LoginPayload = {\n   __typename?: 'LoginPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of Logout */\nexport type LogoutInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of Logout */\nexport type LogoutPayload = {\n   __typename?: 'LogoutPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of MixAlbum */\nexport type MixAlbumInput = {\n  /** 混合したいアルバムID */\n  albumIds: Array<Scalars['TTID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of MixAlbum */\nexport type MixAlbumPayload = {\n   __typename?: 'MixAlbumPayload';\n  /** 混合されたアルバム */\n  album?: Maybe<Album>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of MixArtist */\nexport type MixArtistInput = {\n  /** メインアーティストID */\n  mainArtistId: Scalars['TTID'];\n  /** サブアーティストID */\n  subArtistId: Scalars['TTID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of MixArtist */\nexport type MixArtistPayload = {\n   __typename?: 'MixArtistPayload';\n  /** 混合されたアーティスト */\n  artist?: Maybe<Artist>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** ステータスをもつモデルのいずれか */\nexport type ModelHasStatusUnion = Album | Artist | Track;\n\nexport type Mutation = {\n   __typename?: 'Mutation';\n  /** お気に入り一括変更 */\n  changeFavorites?: Maybe<ChangeFavoritesPayload>;\n  /** ステータス変更。関連するアルバム, トラック, 各音楽サービスアルバム、各音楽サービストラックも同じステータスで更新される。 */\n  changeStatus?: Maybe<ChangeStatusPayload>;\n  /** 検索結果キャッシュをリセットする */\n  clearCache?: Maybe<ClearCachePayload>;\n  /** 複数アルバムを単一アルバムに統合する。統合前の複数アルバムは全て IGNORE される。 */\n  compactAlbum?: Maybe<CompactAlbumPayload>;\n  /** 対象アルバムを除外コンテンツに登録する */\n  forceIgnoreAlbum?: Maybe<ForceIgnoreAlbumPayload>;\n  /** サイトマップを更新する */\n  generateSitemaps?: Maybe<GenerateSitemapsPayload>;\n  /** PENDING状態のアルバム全てをIGNOREにする。よく考えてから実行すること。 */\n  ignoreAlbums?: Maybe<IgnoreAlbumsPayload>;\n  /** PENDING状態のアーティスト全てをIGNOREにする。よく考えてから実行すること。 */\n  ignoreArtists?: Maybe<IgnoreArtistsPayload>;\n  /** ログイン */\n  login?: Maybe<LoginPayload>;\n  /** ログアウト */\n  logout?: Maybe<LogoutPayload>;\n  /**\n   * アルバムを混合する。\n   * 同じアルバムのはずが各音楽サービスで別のアルバムと認識される場合がある。\n   * その場合に使用する。曲数が多いアルバムを正とする。\n   */\n  mixAlbum?: Maybe<MixAlbumPayload>;\n  /**\n   * アーティストを混合する。\n   * 混合後は修正不可のため注意して使用すること。\n   */\n  mixArtist?: Maybe<MixArtistPayload>;\n  /** サインアップ */\n  signup?: Maybe<SignupPayload>;\n  /** 統合したアルバムを元に戻す。統合された単一アルバムは削除される。 */\n  uncompactAlbum?: Maybe<UncompactAlbumPayload>;\n  /** アルバムの混合を解除する。アルバムと曲数に相違がある音楽サービスアルバムを分離する。 */\n  unmixAlbum?: Maybe<UnmixAlbumPayload>;\n  /** カレントユーザー情報更新 */\n  updateMe?: Maybe<UpdateMePayload>;\n  /** アルバムを最新の状態にする */\n  upsertAlbum?: Maybe<UpsertAlbumPayload>;\n  /** アーティストを最新の状態にする */\n  upsertArtist?: Maybe<UpsertArtistPayload>;\n  /** ロールを追加更新する */\n  upsertRole?: Maybe<UpsertRolePayload>;\n};\n\n\nexport type MutationChangeFavoritesArgs = {\n  input: ChangeFavoritesInput;\n};\n\n\nexport type MutationChangeStatusArgs = {\n  input: ChangeStatusInput;\n};\n\n\nexport type MutationClearCacheArgs = {\n  input: ClearCacheInput;\n};\n\n\nexport type MutationCompactAlbumArgs = {\n  input: CompactAlbumInput;\n};\n\n\nexport type MutationForceIgnoreAlbumArgs = {\n  input: ForceIgnoreAlbumInput;\n};\n\n\nexport type MutationGenerateSitemapsArgs = {\n  input: GenerateSitemapsInput;\n};\n\n\nexport type MutationIgnoreAlbumsArgs = {\n  input: IgnoreAlbumsInput;\n};\n\n\nexport type MutationIgnoreArtistsArgs = {\n  input: IgnoreArtistsInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationLogoutArgs = {\n  input: LogoutInput;\n};\n\n\nexport type MutationMixAlbumArgs = {\n  input: MixAlbumInput;\n};\n\n\nexport type MutationMixArtistArgs = {\n  input: MixArtistInput;\n};\n\n\nexport type MutationSignupArgs = {\n  input: SignupInput;\n};\n\n\nexport type MutationUncompactAlbumArgs = {\n  input: UncompactAlbumInput;\n};\n\n\nexport type MutationUnmixAlbumArgs = {\n  input: UnmixAlbumInput;\n};\n\n\nexport type MutationUpdateMeArgs = {\n  input: UpdateMeInput;\n};\n\n\nexport type MutationUpsertAlbumArgs = {\n  input: UpsertAlbumInput;\n};\n\n\nexport type MutationUpsertArtistArgs = {\n  input: UpsertArtistInput;\n};\n\n\nexport type MutationUpsertRoleArgs = {\n  input: UpsertRoleInput;\n};\n\n\n/** 公開情報 */\nexport type PublicInformation = {\n   __typename?: 'PublicInformation';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 公開タイプ */\n  publicType: Scalars['String'];\n};\n\nexport type Query = {\n   __typename?: 'Query';\n  /** アルバム情報取得 */\n  album?: Maybe<Album>;\n  /** アルバム一覧取得 */\n  albums: Array<Album>;\n  /** Apple Music Token */\n  appleMusicToken: Scalars['String'];\n  /** アーティスト取得 */\n  artist?: Maybe<Artist>;\n  /** アーティスト一覧取得 */\n  artists: Array<Artist>;\n  /** カレントユーザー情報取得 */\n  me: CurrentUser;\n  /** ロール一覧取得 */\n  roles: Array<Role>;\n  /** Spotify Token */\n  spotifyToken: SpotifyToken;\n  /** トラック一覧取得 */\n  tracks: Array<Track>;\n};\n\n\nexport type QueryAlbumArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryAlbumsArgs = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<AlbumsSortInputObject>;\n  conditions?: Maybe<AlbumsConditionsInputObject>;\n};\n\n\nexport type QueryArtistArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryArtistsArgs = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<ArtistsSortInputObject>;\n  conditions?: Maybe<ArtistsConditionsInputObject>;\n};\n\n\nexport type QuerySpotifyTokenArgs = {\n  code?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryTracksArgs = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<TracksSortInputObject>;\n  conditions?: Maybe<TracksConditionsInputObject>;\n};\n\n/** ロール */\nexport type Role = {\n   __typename?: 'Role';\n  /** 出来ること一覧 */\n  allowedActions: Array<Scalars['String']>;\n  /** 説明 */\n  description: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** Autogenerated input type of Signup */\nexport type SignupInput = {\n  name: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of Signup */\nexport type SignupPayload = {\n   __typename?: 'SignupPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\nexport enum SortEnum {\n  /** 昇順 */\n  Asc = 'ASC',\n  /** 降順 */\n  Desc = 'DESC'\n}\n\n/** Spotify アルバム */\nexport type SpotifyAlbum = {\n   __typename?: 'SpotifyAlbum';\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\n/** Spotify アーティスト */\nexport type SpotifyArtist = {\n   __typename?: 'SpotifyArtist';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\n/** Spotify Token */\nexport type SpotifyToken = {\n   __typename?: 'SpotifyToken';\n  accessToken: Scalars['String'];\n  expiresIn: Scalars['Int'];\n  refreshToken?: Maybe<Scalars['String']>;\n  scope: Scalars['String'];\n  tokenType: Scalars['String'];\n};\n\n/** Spotify トラック */\nexport type SpotifyTrack = {\n   __typename?: 'SpotifyTrack';\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\nexport enum StatusEnum {\n  /** 保留 : デフォルトの検索結果に表示されない */\n  Pending = 'PENDING',\n  /** 有効 : 通常検索結果に表示される */\n  Active = 'ACTIVE',\n  /** 除外 : 検索結果から除外される。最新情報などを取得する際などでも除外される */\n  Ignore = 'IGNORE'\n}\n\n\n/** トラック */\nexport type Track = {\n   __typename?: 'Track';\n  /** Apple Music トラック */\n  appleMusicTracks?: Maybe<Array<AppleMusicTrack>>;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** ディスク番号 */\n  discNumber: Scalars['PositiveNumber'];\n  /** 再生時間 */\n  durationMs: Scalars['PositiveNumber'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 国際標準レコーディングコード */\n  isrc: Scalars['String'];\n  /** iTunes トラック */\n  itunesTracks?: Maybe<Array<AppleMusicTrack>>;\n  /** タイトル */\n  name: Scalars['String'];\n  /** 人気度 */\n  popularity: Scalars['Int'];\n  /** プレビューURL */\n  previewUrl?: Maybe<Scalars['String']>;\n  /** Spotify トラック */\n  spotifyTracks?: Maybe<Array<SpotifyTrack>>;\n  /** ステータス */\n  status: StatusEnum;\n  /** トラック番号 */\n  trackNumber: Scalars['PositiveNumber'];\n};\n\nexport type TracksConditionsInputObject = {\n  /** トラック名(あいまい検索) */\n  name?: Maybe<Scalars['String']>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n};\n\nexport enum TracksQueryOrderEnum {\n  /** 名前順 */\n  Name = 'NAME',\n  /** 追加順 */\n  New = 'NEW',\n  /** 人気順 */\n  Popularity = 'POPULARITY'\n}\n\nexport type TracksSortInputObject = {\n  /** 並び順対象 */\n  order?: Maybe<TracksQueryOrderEnum>;\n  /** 並び順 */\n  type?: Maybe<SortEnum>;\n};\n\n/** Autogenerated input type of UncompactAlbum */\nexport type UncompactAlbumInput = {\n  /** 統合解除したいアルバムID。Apple Music アルバムのみ解除される。 */\n  albumIdForAppleMusic?: Maybe<Scalars['TTID']>;\n  /** 統合解除したいアルバムID。Spotify アルバムのみ解除される。 */\n  albumIdForSpotify?: Maybe<Scalars['TTID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UncompactAlbum */\nexport type UncompactAlbumPayload = {\n   __typename?: 'UncompactAlbumPayload';\n  /** 統合解除されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UnmixAlbum */\nexport type UnmixAlbumInput = {\n  /** 混合解除したいアルバムID */\n  albumId: Scalars['TTID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UnmixAlbum */\nexport type UnmixAlbumPayload = {\n   __typename?: 'UnmixAlbumPayload';\n  /** 混合されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateMe */\nexport type UpdateMeInput = {\n  name?: Maybe<Scalars['String']>;\n  isPublicArtist: Scalars['Boolean'];\n  isPublicAlbum: Scalars['Boolean'];\n  newPassword?: Maybe<Scalars['String']>;\n  passwordConfirmation?: Maybe<Scalars['String']>;\n  oldPassword?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateMe */\nexport type UpdateMePayload = {\n   __typename?: 'UpdateMePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertAlbum */\nexport type UpsertAlbumInput = {\n  /** 指定したアルバムのトラック(ISRC)を含んでいる別音楽サービスのアルバムを一括登録 */\n  albumId?: Maybe<Scalars['TTID']>;\n  /** Apple Music か iTunes のアルバムを登録 */\n  appleMusicId?: Maybe<Scalars['String']>;\n  /** Spotify のアルバムを登録 */\n  spotifyId?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertAlbum */\nexport type UpsertAlbumPayload = {\n   __typename?: 'UpsertAlbumPayload';\n  /** 追加されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertArtist */\nexport type UpsertArtistInput = {\n  /**\n   * アーティスト名から全ての音楽サービスのアーティストを登録。登録後、関連アルバム、トラックを全て保存する。\n   * (ありきたりなアーティスト名の場合は関係のないアーティストが登録される可能性があるため注意)\n   */\n  artistName?: Maybe<Scalars['String']>;\n  /** アーティストに関連する音楽サービスアーティストを更新。関連アルバム、トラックを全て更新する。 */\n  artistId?: Maybe<Scalars['String']>;\n  /** Apple Music のアーティストを登録。登録後、関連アルバム、トラックを全て保存する。 */\n  appleMusicId?: Maybe<Scalars['String']>;\n  /** Spotify のアーティストを登録。登録後、関連アルバム、トラックを全て保存する。 */\n  spotifyId?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertArtist */\nexport type UpsertArtistPayload = {\n   __typename?: 'UpsertArtistPayload';\n  /** 追加されたアーティスト */\n  artists?: Maybe<Array<Artist>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertRole */\nexport type UpsertRoleInput = {\n  /** 変更したいロール。IDを指定しない場合は追加される */\n  id?: Maybe<Scalars['TTID']>;\n  /** ロール名。IDを指定しない場合は必須。 */\n  name?: Maybe<Scalars['String']>;\n  /** ロールの説明。IDを指定しない場合は必須。 */\n  description?: Maybe<Scalars['String']>;\n  /** 変更したいアクション。全て上書きされる。IDを指定しない場合は必須。 */\n  allowedActions?: Maybe<Array<Scalars['String']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertRole */\nexport type UpsertRolePayload = {\n   __typename?: 'UpsertRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  /** 追加更新されたロール */\n  role?: Maybe<Role>;\n};\n\nexport type ChangeFavoritesMutationVariables = {\n  input: ChangeFavoritesInput;\n};\n\n\nexport type ChangeFavoritesMutation = (\n  { __typename?: 'Mutation' }\n  & { changeFavorites?: Maybe<(\n    { __typename?: 'ChangeFavoritesPayload' }\n    & { currentUser?: Maybe<(\n      { __typename?: 'CurrentUser' }\n      & Pick<CurrentUser, 'id' | 'name' | 'username'>\n      & { role: (\n        { __typename?: 'Role' }\n        & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n      ), favorite: (\n        { __typename?: 'Favorite' }\n        & Pick<Favorite, 'albumIds' | 'artistIds'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type SpotifyTokenQueryVariables = {\n  code?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\n\nexport type SpotifyTokenQuery = (\n  { __typename?: 'Query' }\n  & { spotifyToken: (\n    { __typename?: 'SpotifyToken' }\n    & Pick<SpotifyToken, 'accessToken' | 'expiresIn' | 'refreshToken' | 'scope' | 'tokenType'>\n  ) }\n);\n\nexport type AlbumQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type AlbumQuery = (\n  { __typename?: 'Query' }\n  & { album?: Maybe<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id' | 'totalTracks' | 'name' | 'releaseDate' | 'recordLabel' | 'copyright'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id' | 'spotifyId'>\n    )>, tracks: Array<(\n      { __typename?: 'Track' }\n      & Pick<Track, 'id' | 'isrc' | 'name' | 'discNumber' | 'trackNumber' | 'durationMs' | 'previewUrl' | 'popularity'>\n      & { artworkM: (\n        { __typename?: 'Artwork' }\n        & Pick<Artwork, 'url' | 'width' | 'height'>\n      ), appleMusicTracks?: Maybe<Array<(\n        { __typename?: 'AppleMusicTrack' }\n        & Pick<AppleMusicTrack, 'id' | 'name' | 'appleMusicId'>\n      )>>, spotifyTracks?: Maybe<Array<(\n        { __typename?: 'SpotifyTrack' }\n        & Pick<SpotifyTrack, 'id' | 'name' | 'spotifyId'>\n      )>> }\n    )> }\n  )> }\n);\n\nexport type AlbumsQueryVariables = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<AlbumsSortInputObject>;\n  conditions?: Maybe<AlbumsConditionsInputObject>;\n};\n\n\nexport type AlbumsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id' | 'name' | 'status'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id'>\n    )> }\n  )> }\n);\n\nexport type AppleMusicTokenQueryVariables = {};\n\n\nexport type AppleMusicTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'appleMusicToken'>\n);\n\nexport type ArtistQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type ArtistQuery = (\n  { __typename?: 'Query' }\n  & { artist?: Maybe<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type ArtistsQueryVariables = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<ArtistsSortInputObject>;\n  conditions?: Maybe<ArtistsConditionsInputObject>;\n};\n\n\nexport type ArtistsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name' | 'status'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type TracksQueryVariables = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<TracksSortInputObject>;\n  conditions?: Maybe<TracksConditionsInputObject>;\n};\n\n\nexport type TracksQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Track' }\n    & Pick<Track, 'id' | 'isrc' | 'name' | 'discNumber' | 'trackNumber' | 'durationMs' | 'previewUrl' | 'popularity'>\n    & { appleMusicTracks?: Maybe<Array<(\n      { __typename?: 'AppleMusicTrack' }\n      & Pick<AppleMusicTrack, 'id'>\n    )>>, itunesTracks?: Maybe<Array<(\n      { __typename?: 'AppleMusicTrack' }\n      & Pick<AppleMusicTrack, 'id'>\n    )>>, spotifyTracks?: Maybe<Array<(\n      { __typename?: 'SpotifyTrack' }\n      & Pick<SpotifyTrack, 'id'>\n    )>>, artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type LoginMutationVariables = {\n  input: LoginInput;\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login?: Maybe<(\n    { __typename?: 'LoginPayload' }\n    & Pick<LoginPayload, 'error'>\n    & { currentUser?: Maybe<(\n      { __typename?: 'CurrentUser' }\n      & Pick<CurrentUser, 'id' | 'name' | 'username' | 'registered'>\n      & { publicInformations: Array<(\n        { __typename?: 'PublicInformation' }\n        & Pick<PublicInformation, 'id' | 'publicType'>\n      )>, role: (\n        { __typename?: 'Role' }\n        & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n      ), favorite: (\n        { __typename?: 'Favorite' }\n        & Pick<Favorite, 'albumIds' | 'artistIds'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type LogoutMutationVariables = {\n  input: LogoutInput;\n};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & { logout?: Maybe<(\n    { __typename?: 'LogoutPayload' }\n    & Pick<LogoutPayload, 'error'>\n    & { currentUser?: Maybe<(\n      { __typename?: 'CurrentUser' }\n      & Pick<CurrentUser, 'id' | 'name' | 'username' | 'registered'>\n      & { publicInformations: Array<(\n        { __typename?: 'PublicInformation' }\n        & Pick<PublicInformation, 'id' | 'publicType'>\n      )>, role: (\n        { __typename?: 'Role' }\n        & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n      ), favorite: (\n        { __typename?: 'Favorite' }\n        & Pick<Favorite, 'albumIds' | 'artistIds'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'CurrentUser' }\n    & Pick<CurrentUser, 'id' | 'name' | 'username' | 'registered' | 'version'>\n    & { publicInformations: Array<(\n      { __typename?: 'PublicInformation' }\n      & Pick<PublicInformation, 'id' | 'publicType'>\n    )>, role: (\n      { __typename?: 'Role' }\n      & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n    ), favorite: (\n      { __typename?: 'Favorite' }\n      & Pick<Favorite, 'albumIds' | 'artistIds'>\n    ) }\n  ) }\n);\n\nexport type UpdateMeMutationVariables = {\n  input: UpdateMeInput;\n};\n\n\nexport type UpdateMeMutation = (\n  { __typename?: 'Mutation' }\n  & { updateMe?: Maybe<(\n    { __typename?: 'UpdateMePayload' }\n    & Pick<UpdateMePayload, 'error'>\n    & { currentUser?: Maybe<(\n      { __typename?: 'CurrentUser' }\n      & Pick<CurrentUser, 'id' | 'name' | 'username' | 'registered'>\n      & { publicInformations: Array<(\n        { __typename?: 'PublicInformation' }\n        & Pick<PublicInformation, 'id' | 'publicType'>\n      )>, role: (\n        { __typename?: 'Role' }\n        & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n      ), favorite: (\n        { __typename?: 'Favorite' }\n        & Pick<Favorite, 'albumIds' | 'artistIds'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type SignupMutationVariables = {\n  input: SignupInput;\n};\n\n\nexport type SignupMutation = (\n  { __typename?: 'Mutation' }\n  & { signup?: Maybe<(\n    { __typename?: 'SignupPayload' }\n    & Pick<SignupPayload, 'error'>\n    & { currentUser?: Maybe<(\n      { __typename?: 'CurrentUser' }\n      & Pick<CurrentUser, 'id' | 'name' | 'username' | 'registered'>\n      & { publicInformations: Array<(\n        { __typename?: 'PublicInformation' }\n        & Pick<PublicInformation, 'id' | 'publicType'>\n      )>, role: (\n        { __typename?: 'Role' }\n        & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n      ), favorite: (\n        { __typename?: 'Favorite' }\n        & Pick<Favorite, 'albumIds' | 'artistIds'>\n      ) }\n    )> }\n  )> }\n);\n\n\nexport const ChangeFavoritesDocument = gql`\n    mutation ChangeFavorites($input: ChangeFavoritesInput!) {\n  changeFavorites(input: $input) {\n    currentUser {\n      id\n      name\n      username\n      role {\n        id\n        name\n        description\n        allowedActions\n      }\n      favorite {\n        albumIds\n        artistIds\n      }\n    }\n  }\n}\n    `;\nexport type ChangeFavoritesMutationFn = ApolloReactCommon.MutationFunction<ChangeFavoritesMutation, ChangeFavoritesMutationVariables>;\n\n/**\n * __useChangeFavoritesMutation__\n *\n * To run a mutation, you first call `useChangeFavoritesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeFavoritesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeFavoritesMutation, { data, loading, error }] = useChangeFavoritesMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useChangeFavoritesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChangeFavoritesMutation, ChangeFavoritesMutationVariables>) {\n        return ApolloReactHooks.useMutation<ChangeFavoritesMutation, ChangeFavoritesMutationVariables>(ChangeFavoritesDocument, baseOptions);\n      }\nexport type ChangeFavoritesMutationHookResult = ReturnType<typeof useChangeFavoritesMutation>;\nexport type ChangeFavoritesMutationResult = ApolloReactCommon.MutationResult<ChangeFavoritesMutation>;\nexport type ChangeFavoritesMutationOptions = ApolloReactCommon.BaseMutationOptions<ChangeFavoritesMutation, ChangeFavoritesMutationVariables>;\nexport const SpotifyTokenDocument = gql`\n    query SpotifyToken($code: String, $refreshToken: String) {\n  spotifyToken(code: $code, refreshToken: $refreshToken) {\n    accessToken\n    expiresIn\n    refreshToken\n    scope\n    tokenType\n  }\n}\n    `;\n\n/**\n * __useSpotifyTokenQuery__\n *\n * To run a query within a React component, call `useSpotifyTokenQuery` and pass it any options that fit your needs.\n * When your component renders, `useSpotifyTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSpotifyTokenQuery({\n *   variables: {\n *      code: // value for 'code'\n *      refreshToken: // value for 'refreshToken'\n *   },\n * });\n */\nexport function useSpotifyTokenQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SpotifyTokenQuery, SpotifyTokenQueryVariables>) {\n        return ApolloReactHooks.useQuery<SpotifyTokenQuery, SpotifyTokenQueryVariables>(SpotifyTokenDocument, baseOptions);\n      }\nexport function useSpotifyTokenLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SpotifyTokenQuery, SpotifyTokenQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SpotifyTokenQuery, SpotifyTokenQueryVariables>(SpotifyTokenDocument, baseOptions);\n        }\nexport type SpotifyTokenQueryHookResult = ReturnType<typeof useSpotifyTokenQuery>;\nexport type SpotifyTokenLazyQueryHookResult = ReturnType<typeof useSpotifyTokenLazyQuery>;\nexport type SpotifyTokenQueryResult = ApolloReactCommon.QueryResult<SpotifyTokenQuery, SpotifyTokenQueryVariables>;\nexport const AlbumDocument = gql`\n    query Album($id: TTID!) {\n  album(id: $id) {\n    id\n    totalTracks\n    name\n    releaseDate\n    recordLabel\n    copyright\n    artworkL {\n      url\n      width\n      height\n    }\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n      appleMusicId\n    }\n    itunesAlbum {\n      id\n      appleMusicId\n    }\n    spotifyAlbum {\n      id\n      spotifyId\n    }\n    tracks {\n      id\n      isrc\n      name\n      discNumber\n      trackNumber\n      durationMs\n      previewUrl\n      popularity\n      artworkM {\n        url\n        width\n        height\n      }\n      appleMusicTracks {\n        id\n        name\n        appleMusicId\n      }\n      spotifyTracks {\n        id\n        name\n        spotifyId\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useAlbumQuery__\n *\n * To run a query within a React component, call `useAlbumQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAlbumQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n      }\nexport function useAlbumLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n        }\nexport type AlbumQueryHookResult = ReturnType<typeof useAlbumQuery>;\nexport type AlbumLazyQueryHookResult = ReturnType<typeof useAlbumLazyQuery>;\nexport type AlbumQueryResult = ApolloReactCommon.QueryResult<AlbumQuery, AlbumQueryVariables>;\nexport const AlbumsDocument = gql`\n    query Albums($cursor: CursorInputObject, $sort: AlbumsSortInputObject, $conditions: AlbumsConditionsInputObject) {\n  items: albums(cursor: $cursor, sort: $sort, conditions: $conditions) {\n    id\n    name\n    status\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n    }\n    itunesAlbum {\n      id\n    }\n    spotifyAlbum {\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useAlbumsQuery__\n *\n * To run a query within a React component, call `useAlbumsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumsQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      sort: // value for 'sort'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useAlbumsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n      }\nexport function useAlbumsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n        }\nexport type AlbumsQueryHookResult = ReturnType<typeof useAlbumsQuery>;\nexport type AlbumsLazyQueryHookResult = ReturnType<typeof useAlbumsLazyQuery>;\nexport type AlbumsQueryResult = ApolloReactCommon.QueryResult<AlbumsQuery, AlbumsQueryVariables>;\nexport const AppleMusicTokenDocument = gql`\n    query AppleMusicToken {\n  appleMusicToken\n}\n    `;\n\n/**\n * __useAppleMusicTokenQuery__\n *\n * To run a query within a React component, call `useAppleMusicTokenQuery` and pass it any options that fit your needs.\n * When your component renders, `useAppleMusicTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAppleMusicTokenQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAppleMusicTokenQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AppleMusicTokenQuery, AppleMusicTokenQueryVariables>) {\n        return ApolloReactHooks.useQuery<AppleMusicTokenQuery, AppleMusicTokenQueryVariables>(AppleMusicTokenDocument, baseOptions);\n      }\nexport function useAppleMusicTokenLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AppleMusicTokenQuery, AppleMusicTokenQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AppleMusicTokenQuery, AppleMusicTokenQueryVariables>(AppleMusicTokenDocument, baseOptions);\n        }\nexport type AppleMusicTokenQueryHookResult = ReturnType<typeof useAppleMusicTokenQuery>;\nexport type AppleMusicTokenLazyQueryHookResult = ReturnType<typeof useAppleMusicTokenLazyQuery>;\nexport type AppleMusicTokenQueryResult = ApolloReactCommon.QueryResult<AppleMusicTokenQuery, AppleMusicTokenQueryVariables>;\nexport const ArtistDocument = gql`\n    query Artist($id: TTID!) {\n  artist(id: $id) {\n    id\n    name\n    artworkL {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useArtistQuery__\n *\n * To run a query within a React component, call `useArtistQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useArtistQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n      }\nexport function useArtistLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n        }\nexport type ArtistQueryHookResult = ReturnType<typeof useArtistQuery>;\nexport type ArtistLazyQueryHookResult = ReturnType<typeof useArtistLazyQuery>;\nexport type ArtistQueryResult = ApolloReactCommon.QueryResult<ArtistQuery, ArtistQueryVariables>;\nexport const ArtistsDocument = gql`\n    query Artists($cursor: CursorInputObject, $sort: ArtistsSortInputObject, $conditions: ArtistsConditionsInputObject) {\n  items: artists(cursor: $cursor, sort: $sort, conditions: $conditions) {\n    id\n    name\n    status\n    artworkM {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useArtistsQuery__\n *\n * To run a query within a React component, call `useArtistsQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistsQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      sort: // value for 'sort'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useArtistsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n      }\nexport function useArtistsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n        }\nexport type ArtistsQueryHookResult = ReturnType<typeof useArtistsQuery>;\nexport type ArtistsLazyQueryHookResult = ReturnType<typeof useArtistsLazyQuery>;\nexport type ArtistsQueryResult = ApolloReactCommon.QueryResult<ArtistsQuery, ArtistsQueryVariables>;\nexport const TracksDocument = gql`\n    query Tracks($cursor: CursorInputObject, $sort: TracksSortInputObject, $conditions: TracksConditionsInputObject) {\n  items: tracks(cursor: $cursor, sort: $sort, conditions: $conditions) {\n    id\n    isrc\n    name\n    discNumber\n    trackNumber\n    durationMs\n    previewUrl\n    popularity\n    appleMusicTracks {\n      id\n    }\n    itunesTracks {\n      id\n    }\n    spotifyTracks {\n      id\n    }\n    artworkM {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useTracksQuery__\n *\n * To run a query within a React component, call `useTracksQuery` and pass it any options that fit your needs.\n * When your component renders, `useTracksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTracksQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      sort: // value for 'sort'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useTracksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TracksQuery, TracksQueryVariables>) {\n        return ApolloReactHooks.useQuery<TracksQuery, TracksQueryVariables>(TracksDocument, baseOptions);\n      }\nexport function useTracksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TracksQuery, TracksQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TracksQuery, TracksQueryVariables>(TracksDocument, baseOptions);\n        }\nexport type TracksQueryHookResult = ReturnType<typeof useTracksQuery>;\nexport type TracksLazyQueryHookResult = ReturnType<typeof useTracksLazyQuery>;\nexport type TracksQueryResult = ApolloReactCommon.QueryResult<TracksQuery, TracksQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($input: LoginInput!) {\n  login(input: $input) {\n    currentUser {\n      id\n      name\n      username\n      registered\n      publicInformations {\n        id\n        publicType\n      }\n      role {\n        id\n        name\n        description\n        allowedActions\n      }\n      favorite {\n        albumIds\n        artistIds\n      }\n    }\n    error\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout($input: LogoutInput!) {\n  logout(input: $input) {\n    currentUser {\n      id\n      name\n      username\n      registered\n      publicInformations {\n        id\n        publicType\n      }\n      role {\n        id\n        name\n        description\n        allowedActions\n      }\n      favorite {\n        albumIds\n        artistIds\n      }\n    }\n    error\n  }\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    name\n    username\n    registered\n    version\n    publicInformations {\n      id\n      publicType\n    }\n    role {\n      id\n      name\n      description\n      allowedActions\n    }\n    favorite {\n      albumIds\n      artistIds\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const UpdateMeDocument = gql`\n    mutation UpdateMe($input: UpdateMeInput!) {\n  updateMe(input: $input) {\n    currentUser {\n      id\n      name\n      username\n      registered\n      publicInformations {\n        id\n        publicType\n      }\n      role {\n        id\n        name\n        description\n        allowedActions\n      }\n      favorite {\n        albumIds\n        artistIds\n      }\n    }\n    error\n  }\n}\n    `;\nexport type UpdateMeMutationFn = ApolloReactCommon.MutationFunction<UpdateMeMutation, UpdateMeMutationVariables>;\n\n/**\n * __useUpdateMeMutation__\n *\n * To run a mutation, you first call `useUpdateMeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMeMutation, { data, loading, error }] = useUpdateMeMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateMeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateMeMutation, UpdateMeMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateMeMutation, UpdateMeMutationVariables>(UpdateMeDocument, baseOptions);\n      }\nexport type UpdateMeMutationHookResult = ReturnType<typeof useUpdateMeMutation>;\nexport type UpdateMeMutationResult = ApolloReactCommon.MutationResult<UpdateMeMutation>;\nexport type UpdateMeMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateMeMutation, UpdateMeMutationVariables>;\nexport const SignupDocument = gql`\n    mutation Signup($input: SignupInput!) {\n  signup(input: $input) {\n    currentUser {\n      id\n      name\n      username\n      registered\n      publicInformations {\n        id\n        publicType\n      }\n      role {\n        id\n        name\n        description\n        allowedActions\n      }\n      favorite {\n        albumIds\n        artistIds\n      }\n    }\n    error\n  }\n}\n    `;\nexport type SignupMutationFn = ApolloReactCommon.MutationFunction<SignupMutation, SignupMutationVariables>;\n\n/**\n * __useSignupMutation__\n *\n * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signupMutation, { data, loading, error }] = useSignupMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSignupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignupMutation, SignupMutationVariables>) {\n        return ApolloReactHooks.useMutation<SignupMutation, SignupMutationVariables>(SignupDocument, baseOptions);\n      }\nexport type SignupMutationHookResult = ReturnType<typeof useSignupMutation>;\nexport type SignupMutationResult = ApolloReactCommon.MutationResult<SignupMutation>;\nexport type SignupMutationOptions = ApolloReactCommon.BaseMutationOptions<SignupMutation, SignupMutationVariables>;","import React, { useReducer, createContext, Dispatch } from 'react'\nimport { CurrentUser } from '../graphql/types.d'\n\ntype ContextValue = {\n  state: StateType\n  dispatch: Dispatch<ActionType>\n}\n\nconst UserContext = createContext({} as ContextValue)\n\nconst initialState:{ user: null | CurrentUser } = {\n  user: null\n}\n\nexport type StateType = typeof initialState\nexport type ActionType =\n  | { type: 'SET_USER', user: CurrentUser }\n\nconst reducer = (state:StateType, action:ActionType):StateType => {\n  switch(action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.user }\n    default:\n      return state\n  }\n}\n\nconst UserProvider = ({ children }:{ children:JSX.Element|JSX.Element[] }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return <UserContext.Provider value={{ state, dispatch }}>{children}</UserContext.Provider>\n}\n\nexport default UserContext\nexport { UserProvider }\n","import React, { useContext } from 'react';\nimport { useScrollTrigger, AppBar, Toolbar, Typography, Slide, IconButton, Grid, Menu, MenuItem } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { Link } from 'react-router-dom';\nimport UserContext from '../../hooks/userContext';\n\n// ref: https://material-ui.com/components/app-bar/#hide-app-bar\ninterface Props {\n  window?: () => Window;\n  children: React.ReactElement;\n}\n\nconst HideOnScroll = (props: Props) => {\n  const { children, window } = props;\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nconst Bar = () => {\n  // SEO対策\n  const resetTitle = (title:string) => () => {\n    document.title = `${title} - ゲーム音楽`\n    document.querySelector('meta[name=\"description\"]')?.setAttribute(\"content\", \"音楽サブスクリプション配信中のゲーム音楽のポータルサイト\")\n  }\n\n  const { state } = useContext(UserContext)\n\n  const [searchEl, setSearchEl] = React.useState<Element|null>(null)\n  const [userEl,   setUserEl]   = React.useState<Element|null>(null)\n  const [infoEl,   setInfoEl]   = React.useState<Element|null>(null)\n\n  return <>\n    <HideOnScroll>\n      <AppBar>\n        <Toolbar>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n            spacing={3}\n          >\n            <Grid item>\n              <Typography color=\"inherit\" style={{ textDecoration: 'none' }} component={Link} onClick={()=>{resetTitle(\"アルバム一覧\");setSearchEl(null)}} to={`/albums`} variant=\"h6\">ゲーム音楽</Typography>\n            </Grid>\n            <Grid item>\n              <IconButton onClick={(event) => setSearchEl(event.currentTarget)} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <SearchIcon />\n              </IconButton>\n              <Menu\n                anchorEl={searchEl}\n                keepMounted\n                open={Boolean(searchEl)}\n                onClose={() => setSearchEl(null)}\n              >\n                <MenuItem component={Link} onClick={()=>{resetTitle(\"アーティスト一覧\");setSearchEl(null)}} to={`/artists`}>アーティスト一覧</MenuItem>\n                <MenuItem component={Link} onClick={()=>{resetTitle(\"アルバム一覧\");setSearchEl(null)}} to={`/albums`}>アルバム一覧</MenuItem>\n                { state.user?.role.allowedActions.includes(\"tracks\") ? <MenuItem component={Link} onClick={()=>{resetTitle(\"曲一覧\");setSearchEl(null)}} to={`/tracks`}>曲一覧(β版)</MenuItem> : \"\"}\n              </Menu>\n            </Grid>\n            <Grid item>\n              <IconButton onClick={(event) => setUserEl(event.currentTarget)} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <AccountCircleIcon />\n              </IconButton>\n              <Menu\n                anchorEl={userEl}\n                keepMounted\n                open={Boolean(userEl)}\n                onClose={() => setUserEl(null)}\n              >\n                {\n                  state.user?.registered ?\n                  [\n                    state.user?.role.allowedActions.includes(\"me\") ? <MenuItem key={1} component={Link} onClick={()=>{resetTitle(\"ユーザー情報\");setUserEl(null)}} to={`/me`}>ユーザー情報</MenuItem> : \"\",\n                    state.user?.role.allowedActions.includes(\"logout\") ? <MenuItem key={2} component={Link} onClick={()=>{resetTitle(\"ログアウト\");setUserEl(null)}} to={`/logout`}>ログアウト</MenuItem> : \"\"\n                  ]\n                  :\n                  [\n                    state.user?.role.allowedActions.includes(\"signup\") ? <MenuItem key={11} component={Link} onClick={()=>{resetTitle(\"登録する\");setUserEl(null)}} to={`/signup`}>登録する</MenuItem> : \"\",\n                    state.user?.role.allowedActions.includes(\"login\") ? <MenuItem key={12} component={Link} onClick={()=>{resetTitle(\"ログイン\");setUserEl(null)}} to={`/login`}>ログイン</MenuItem> : \"\"\n                  ]\n                }\n              </Menu>\n            </Grid>\n            <Grid item>\n              <IconButton onClick={(event) => setInfoEl(event.currentTarget)} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <InfoIcon />\n              </IconButton>\n              <Menu\n                anchorEl={infoEl}\n                keepMounted\n                open={Boolean(infoEl)}\n                onClose={() => setInfoEl(null)}\n              >\n                <MenuItem component={Link} onClick={()=>{resetTitle(\"このサイトについて\");setInfoEl(null)}} to={`/about`}>このサイトについて</MenuItem>\n                <MenuItem component={Link} onClick={()=>{resetTitle(\"利用規約\");setInfoEl(null)}} to={`/terms`}>利用規約</MenuItem>\n                <MenuItem component={Link} onClick={()=>{resetTitle(\"プライバシーポリシー\");setInfoEl(null)}} to={`/privacy`}>プライバシーポリシー</MenuItem>\n                <MenuItem component={Link} onClick={()=>{resetTitle(\"クッキーポリシー\");setInfoEl(null)}} to={`/cookie_policy`}>クッキーポリシー</MenuItem>\n              </Menu>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </HideOnScroll>\n  </>\n}\n\nexport default Bar\n","import { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { onError } from \"apollo-link-error\"\n\nconst httpLink = new HttpLink({ uri: process.env.REACT_APP_GRAPHQL_URI, credentials: 'include' })\nconst headersLink = new ApolloLink((operation, forward) => forward(operation))\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst link = ApolloLink.from([headersLink, errorLink, httpLink])\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache({ dataIdFromObject: object => object.id })\n})\n","import React, { useState } from 'react';\nimport { Waypoint } from 'react-waypoint';\n\n// TODO: hasNext とかないのでページ遷移によって再度取得してしまう？\nconst PaginationComponent = (\n  { component, no, offset, limit, fetchMore }:\n  { component:JSX.Element, no:number, offset:number, limit:number, fetchMore:any }\n) => {\n  // 並び替えなどによる内部の component の変更を検知し再度ページネーションする\n  const [prevComponent, setPrevComponent] = useState(component)\n  const [alreadyFetch, setAlreadyFetch] = useState(false)\n  const fetchNo = offset - limit\n  const isFetch = no === fetchNo\n\n  const exeFetchMore = () => fetchMore({\n    variables: {\n      cursor: {\n        offset: offset\n      }\n    },\n    updateQuery: (\n      prev:{ items: any[] },\n      { fetchMoreResult }:{ fetchMoreResult:{ items: any[] } }\n    ) => {\n      if (!fetchMoreResult) return prev;\n      return { ...prev, ...{ items: [...prev.items, ...fetchMoreResult.items] } }\n    }\n  })\n\n  const enterFunction = () => {\n    if(alreadyFetch && prevComponent === component) return\n    setAlreadyFetch(true)\n    setPrevComponent(component)\n    return exeFetchMore()\n  }\n\n  return (\n    <>\n      { component }\n      { isFetch ? <Waypoint onEnter={enterFunction}/> : <></> }\n    </>\n  )\n}\n\nexport default PaginationComponent\n","import React from 'react';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst ImageComponent = ({\n  className = \"\", src = \"\", title = \"\", width\n}:{\n  className?:string, src?:string, title?:string, width:string|number\n}) => {\n  if(src === \"\") src = `${process.env.PUBLIC_URL}/no_image.png`\n\n  return (\n    <CardMedia\n      className={className}\n      image={src}\n      title={title}\n      style={{ width: width, height: width }}\n    />\n  )\n}\n\nexport default ImageComponent;\n","import React, { createElement } from 'react';\nimport Card from '@material-ui/core/Card';\nimport ImageComponent from '../image/ImageComponent'\nimport { Grid, CardActionArea, CardContent, Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\ninterface Image {\n  title: string\n  src?: string | null\n  width: number\n  linkUrl?: string\n  bottomComponent?: JSX.Element\n  topComponent?: JSX.Element\n}\n\nconst ImageCardComponent = (image:Image) => {\n  const link = image.linkUrl ? { component: Link, to: image.linkUrl } : {}\n\n  return (\n    createElement(Grid, {\n      item: true, style: { textDecoration: \"none\" }, ...link,\n      children: (\n        <Card style={{ width: image.width, position: \"relative\" }}>\n          <CardActionArea>\n            <Grid container style={{ position: \"absolute\", left: \"5px\", bottom: \"5px\" }}>\n              { image.bottomComponent ? image.bottomComponent : <></> }\n            </Grid>\n            <ImageComponent src={image.src || \"\"} width={image.width} title={image.title}/>\n          </CardActionArea>\n          { image.topComponent ? image.topComponent : <></> }\n          {\n            image.title === \"\" ? <></> :\n            <CardContent style={{ padding: \"5px 5px\" }}>\n              <Typography style={{\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\"\n              }} variant=\"caption\" color=\"textSecondary\" component=\"p\">\n                {image.title}\n              </Typography>\n            </CardContent>\n          }\n        </Card>\n      )\n    })\n  )\n}\n\nexport default ImageCardComponent\n","import { useLocation } from \"react-router-dom\"\nimport _ from \"lodash\"\n\nexport const ParameterPrefixKeys = {\n  artist: \"a\",\n  album:  \"b\",\n  track:  \"t\",\n}\n\nexport const ParameterKeys = {\n  keyword:  \"q\",\n  ids:      \"i\",\n  status:   \"s\",\n  order:    \"o\",\n  sortType: \"r\",\n  favorite: \"f\",\n  username: \"u\",\n//tag:      \"t\", // いつか実装する\n}\n\nexport type ParameterPrefix = keyof typeof ParameterPrefixKeys;\n\nexport default function useParameters<T>(prefix:ParameterPrefix){\n  const location = useLocation()\n  const params = new URLSearchParams(location.search)\n  const prefixKey = ParameterPrefixKeys[prefix]\n\n  const getUniqueValues = (key:string):string[] => {\n    const value = params.get(key)\n    if(value === null) return []\n\n    // , ではなく - にしている理由は文字化けするからURLセーフな - または _ にする必要あり\n    const values = value.split(\"-\")\n    const uniqueValues = new Set<string>()\n\n    values.forEach((value) => {\n      uniqueValues.add(value)\n    })\n\n    return Array.from(uniqueValues)\n  }\n\n  const customizer = (objValue:any, srcValue:any) => {\n    if (_.isArray(objValue)) {\n      return objValue.concat(srcValue)\n    }\n  }\n\n  let parameters = {}\n  let conditions = {}\n\n  // 並び順対象\n  getUniqueValues(prefixKey + ParameterKeys.keyword).forEach((value) => {\n    conditions = _.merge(conditions, { name: value })\n  })\n  parameters = { ...parameters, conditions: conditions }\n\n  // ID\n  getUniqueValues(prefixKey + ParameterKeys.ids).forEach((value) => {\n    switch( true ){\n      case /^art/.test(value):\n        parameters = _.merge(parameters, { conditions: { artists: { id: [value] } } })\n        break;\n      case /^abm/.test(value):\n        parameters = _.merge(parameters, { conditions: { albums: { id: [value] } } })\n        break;\n      case /^trk/.test(value):\n        parameters = _.merge(parameters, { conditions: { tracks: { id: [value] } } })\n        break;\n    }\n  })\n\n  // ステータス\n  let status = { status: [] }\n  getUniqueValues(prefixKey + ParameterKeys.status).forEach((value) => {\n      status = _.mergeWith(status, { status: [value] }, customizer)\n  })\n  if(status.status.length !== 0) {\n    parameters = _.mergeWith(parameters, { conditions: { ...status } })\n  }\n\n  // お気に入り\n  getUniqueValues(prefixKey + ParameterKeys.favorite).forEach((value) => {\n    parameters = _.merge(parameters, { conditions: { favorite: (value === \"1\") } })\n  })\n\n  // ユーザーお気に入り\n  let usernames = { usernames: [] }\n  getUniqueValues(prefixKey + ParameterKeys.username).forEach((value) => {\n    usernames = _.mergeWith(usernames, { usernames: [value] }, customizer)\n  })\n  if(usernames.usernames.length !== 0) {\n    parameters = _.mergeWith(parameters, { conditions: { ...usernames } })\n  }\n\n  // 並び順対象\n  getUniqueValues(prefixKey + ParameterKeys.order).forEach((value) => {\n    parameters = _.merge(parameters, { sort: { order: value } })\n  })\n\n  // 並び順\n  getUniqueValues(prefixKey + ParameterKeys.sortType).forEach((value) => {\n    parameters = _.merge(parameters, { sort: { type: value } })\n  })\n\n  return parameters as T\n}\n","import React, { useReducer, createContext, Dispatch } from 'react'\nimport Player from '../components/player/Player'\n\ntype ContextValue = {\n  state: StateType\n  dispatch: Dispatch<ActionType>\n}\n\nconst PlayerContext = createContext({} as ContextValue)\n\nexport enum PlaybackStatus {\n  None,\n  Play,\n  Pause,\n  Stop,\n}\n\nexport enum LoadingStatus {\n  None,\n  Loading,\n  Done,\n}\n\nconst initialState = {\n  player: new Player({ linkUrl: \"\", tracks: [] }),\n  currentNo: 0,\n  playbackStatus: PlaybackStatus.None,\n  loadingStatus: LoadingStatus.Done,\n}\n\nexport type StateType = {\n  player: Player\n  currentNo: number\n  playbackStatus: PlaybackStatus\n  loadingStatus: LoadingStatus\n}\n\nexport type ActionType =\n  | { type: 'SET_PLAYER', player: Player }\n  | { type: 'PLAY', no?: number }\n  | { type: 'NEXT_PLAY' }\n  | { type: 'PAUSE' }\n  | { type: 'STOP' }\n  | { type: 'LOADING_START' }\n  | { type: 'LOADING_DONE' }\n  | { type: 'STATUS_FINISH' }\n\nconst reducer = (state:StateType, action:ActionType):StateType => {\n  switch(action.type) {\n    case 'SET_PLAYER':\n      state.player.stop()\n      return {\n        ...state,\n        player: action.player,\n        playbackStatus: PlaybackStatus.Stop,\n      }\n    case 'PLAY':\n      return {\n        ...state,\n        currentNo: state.player.play(action.no),\n        playbackStatus: PlaybackStatus.Play,\n      }\n    case 'NEXT_PLAY':\n      const currentNo = state.player.nextPlay()\n      // currentNo が 0 ということは再生が終了したということになる\n      const playbackStatus = currentNo === 0 ? PlaybackStatus.Stop : PlaybackStatus.Play\n      return {\n        ...state,\n        currentNo,\n        playbackStatus,\n      }\n    case 'PAUSE':\n      state.player.pause()\n      return {\n        ...state,\n        playbackStatus: PlaybackStatus.Pause,\n      }\n    case 'STOP':\n      state.player.stop()\n      return {\n        ...state,\n        playbackStatus: PlaybackStatus.Play,\n      }\n    case 'LOADING_START':\n      return {\n        ...state,\n        loadingStatus: LoadingStatus.Loading,\n      }\n    case 'LOADING_DONE':\n      return {\n        ...state,\n        loadingStatus: LoadingStatus.Done,\n      }\n    case 'STATUS_FINISH':\n      state.player.stop()\n      return {\n        ...state,\n        currentNo: 0,\n        playbackStatus: PlaybackStatus.Pause,\n        loadingStatus: LoadingStatus.Done,\n      }\n    default:\n      return state\n  }\n}\n\nconst PlayerProvider = ({ children }:{ children:JSX.Element|JSX.Element[] }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return <PlayerContext.Provider value={{ state, dispatch }}>{children}</PlayerContext.Provider>\n}\n\nexport default PlayerContext\nexport { PlayerProvider }\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Grid, IconButton, MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { red } from '@material-ui/core/colors';\nimport UserContext from '../../hooks/userContext';\nimport { useChangeFavoritesMutation, ChangeFavoritesInput, ChangeFavoritesMutationResult, CurrentUser } from '../../graphql/types.d';\n\n// TODO: 全体的にダサいので実装なんとかする\nconst FavoriteComponent = ({\n  contentWidth, favorable_type, favorable_id\n}:{\n  contentWidth:number, favorable_type: \"artist\"|\"album\", favorable_id:string\n}) => {\n  const { state, dispatch } = useContext(UserContext)\n  const [favorite, setFavorite] = useState(false)\n\n  useEffect(() => {\n    if(state.user && state.user.favorite) {\n      const ids = state.user.favorite.albumIds.concat(state.user.favorite.artistIds)\n      setFavorite(ids.includes(favorable_id))\n    }\n  }, [state, favorable_id])\n\n  // お気に入り更新\n  let input: ChangeFavoritesInput = { favorite: !favorite }\n  let input_id:{ artistIds?: String[], albumIds?: String[] } = {}\n  if(favorable_type === \"artist\"){\n    input_id = { artistIds: [favorable_id] }\n  } else if(favorable_type === \"album\"){\n    input_id = { albumIds: [favorable_id] }\n  }\n  input = { favorite: !favorite, ...input_id }\n  const [changeFavorite] = useChangeFavoritesMutation({\n    update: (_, response:ChangeFavoritesMutationResult) => {\n      if(response.data?.changeFavorites?.currentUser){\n        dispatch({ type: 'SET_USER', user: (response.data.changeFavorites.currentUser as unknown as CurrentUser) })\n        setFavorite(!favorite)\n      }\n    },\n    variables: { input },\n  })\n\n  // お気に入り機能制限\n  if(state.user && state.user.role.allowedActions.includes(\"changeFavorites\")){\n    const favoriteIcon =\n    <MuiThemeProvider theme={ createMuiTheme({ palette: { primary: red } })}>\n      <FavoriteIcon color=\"primary\" stroke={\"white\"} strokeWidth={1} />\n    </MuiThemeProvider>\n\n    return (\n      <Grid container style={{ width: 24, position: \"absolute\", left: `${contentWidth - 35}px`, top: \"5px\" }}>\n        <IconButton onClick={(e) => {\n            changeFavorite()\n            // リンク遷移無効\n            // TODO: 別のやり方が良いかも\n            e.preventDefault()\n          }} size=\"small\">\n            {\n              favorite ? favoriteIcon : <FavoriteBorderIcon stroke={\"gray\"} strokeWidth={1}  />\n            }\n        </IconButton>\n      </Grid>\n    )\n  }\n\n  return <></>\n}\n\nexport default FavoriteComponent\n","import React from 'react';\nimport { Artist, StatusEnum } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\nimport { Grid } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport FavoriteComponent from '../../../components/favorite/FavoriteComponent';\n\nconst ArtistItemLayout = (\n  { artist, width }:\n  { artist: Artist, width: number }\n) => {\n  // クエリパラメータ引き継ぎ\n  let history = useHistory()\n  const params = new URLSearchParams(history.location.search)\n  params.set(ParameterPrefixKeys.album + ParameterKeys.ids, artist.id)\n  // キーワード検索はいちいち検索されるので削除\n  params.delete(ParameterPrefixKeys.album + ParameterKeys.keyword)\n  params.delete(ParameterPrefixKeys.artist + ParameterKeys.keyword)\n  const status = params.get(ParameterPrefixKeys.artist + ParameterKeys.status)\n  // すでにアルバムステータスが設定されていた場合はそちらを優先する\n  if(status !== null && !params.get(ParameterPrefixKeys.album + ParameterKeys.status)) {\n    params.set(ParameterPrefixKeys.album + ParameterKeys.status, status)\n  }\n\n  const style = {\n    width: \"15px\",\n    height: \"15px\",\n    borderRadius: \"50%\",\n    fontSize: \"10px\",\n    color: \"#fff\",\n    lineHeight: \"15px\",\n    textAlign: \"center\" as \"center\",\n    background: \"#000\",\n  }\n\n  // ステータスをわかりやすいようにしておく\n  const serviceIcons = []\n  if(artist.status === StatusEnum.Pending){\n    serviceIcons.push(<Grid key={10} item style={{...style, color: \"#000\", backgroundColor: \"#FFFF00\"}}>PN</Grid>)\n  } else if (artist.status === StatusEnum.Ignore){\n    serviceIcons.push(<Grid key={11} item style={{...style, color: \"#000\",backgroundColor: \"#FF0000\"}}>IG</Grid>)\n  }\n  const bottomComponent = <>{serviceIcons}</>\n\n  return (\n    <ImageCardComponent\n      title={artist.name}\n      src={artist.artworkM.url}\n      width={width}\n      linkUrl={`/artists/${artist.id}?${params.toString()}`}\n      topComponent={<FavoriteComponent favorable_type=\"artist\" favorable_id={artist.id} contentWidth={width} />}\n      bottomComponent={bottomComponent}\n    />\n  )\n}\n\nexport default ArtistItemLayout\n","import React from 'react'\nimport { FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\n\ninterface SelectItem {\n  value:string\n  label:string\n}\n\ninterface changeEvent {\n  (event: React.ChangeEvent<{\n    name?: string | undefined;\n    value: unknown;\n  }>, child: React.ReactNode): void\n}\n\nconst OrderComponent = ({\n  label, value, minWidth, selectItems, onChange\n}:{\n  label:string, value:string, minWidth:number, selectItems:SelectItem[], onChange:changeEvent\n}) => {\n\n  return (\n    <FormControl variant=\"outlined\" style={{ minWidth }}>\n      <InputLabel>{label}</InputLabel>\n      <Select\n        value={value}\n        onChange={onChange}\n        label={label}\n      >\n        {selectItems.map((item, i) => <MenuItem key={i} value={item.value}>{item.label}</MenuItem>)}\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default OrderComponent\n","import React from 'react';\nimport { Chip, MuiThemeProvider, createMuiTheme } from '@material-ui/core';\n\nconst ChipsComponent = ({\n  color, labels, onDelete\n}:{\n  color: \"blue\" | \"yellow\", labels:string[], onDelete:((label: string) => void)\n}) => {\n  let colorCode = \"\"\n  switch(color) {\n    case \"blue\":\n      colorCode = \"#4AC6D2\"\n      break\n    case \"yellow\":\n      colorCode = \"#F2D349\"\n      break\n  }\n\n  return (\n    <MuiThemeProvider theme={createMuiTheme({ palette: { primary: { main: colorCode } } })}>\n      { labels.map((label, index) =><Chip color=\"primary\" key={index} label={label} onDelete={() => onDelete(label)} />) }\n    </MuiThemeProvider>\n  )\n}\n\nexport default ChipsComponent\n","import React, { useState, useContext, useEffect } from 'react'\nimport { FormControl, IconButton, InputLabel, OutlinedInput, InputAdornment, MuiThemeProvider, createMuiTheme } from '@material-ui/core'\nimport useParameters, { ParameterPrefix, ParameterKeys, ParameterPrefixKeys } from '../../hooks/useParameters'\nimport { useHistory } from 'react-router-dom'\nimport SearchIcon from '@material-ui/icons/Search'\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { red } from '@material-ui/core/colors'\nimport UserContext from '../../hooks/userContext'\nimport ChipsComponent from '../chip/ChipsComponent'\nimport { ArtistsQueryVariables, AlbumsQueryVariables } from '../../graphql/types.d'\n\nconst SearchKeywordComponent = ({ type }:{ type:ParameterPrefix }) => {\n  let history = useHistory()\n  const { state } = useContext(UserContext)\n  const params = useParameters<ArtistsQueryVariables|AlbumsQueryVariables>(type)\n  const [canSearch, setCanSearch]   = useState<boolean>(false)\n  const [keyword, setKeyword]   = useState<string>(() => {\n    return params.conditions?.name ? params.conditions?.name : \"\"\n  })\n  const [onlyFavorite, setOnlyFavorite] = useState<boolean>(() => {\n    return params.conditions?.favorite ? true : false\n  })\n  const [usernames, setUsernames] = useState<string[]>(() => {\n    return params.conditions?.usernames ? params.conditions?.usernames : []\n  })\n\n  // 検索実行\n  useEffect(() => {\n    if(!canSearch) return\n\n    const params = new URLSearchParams(history.location.search)\n    if(keyword !== \"\") {\n      params.set(ParameterPrefixKeys[type] + ParameterKeys.keyword, keyword)\n    } else {\n      params.delete(ParameterPrefixKeys[type] + ParameterKeys.keyword)\n    }\n\n    // お気に入りのみ表示\n    if(onlyFavorite) {\n      params.set(ParameterPrefixKeys[type] + ParameterKeys.favorite, \"1\")\n    } else {\n      params.delete(ParameterPrefixKeys[type] + ParameterKeys.favorite)\n    }\n\n    // ユーザーお気に入り表示\n    if(usernames.length > 0) {\n      params.set(ParameterPrefixKeys[type] + ParameterKeys.username, usernames.join(\"-\"))\n    } else {\n      params.delete(ParameterPrefixKeys[type] + ParameterKeys.username)\n    }\n\n    history.push(`${history.location.pathname}?${params.toString()}`)\n\n    setCanSearch(false)\n  }, [canSearch, history, keyword, onlyFavorite, type, usernames])\n\n  // キーワードからユーザー名とハッシュタグを作成する\n  useEffect(() => {\n    // 最後の文字がスペース区切りの場合のみ作成\n    if(keyword.match(/\\s$/)) {\n      const keywords = keyword.split(/\\s/)\n      keywords.forEach((_keyword) => {\n        if(_keyword.startsWith(\"@\") && usernames.indexOf(_keyword) === -1) {\n          setUsernames(usernames.concat(_keyword.slice(1, _keyword.length)))\n          setKeyword(keyword.replace(_keyword, \"\").trim())\n          setCanSearch(true)\n        }\n      })\n    }\n  }, [keyword, usernames])\n\n  // ユーザーお気に入り検索\n  const onDelete = (label: string) => {\n    setUsernames(usernames.filter(name => name !== label))\n    setCanSearch(true)\n  }\n  let usernamesContent = <><ChipsComponent color=\"yellow\" labels={usernames} onDelete={onDelete} /></>\n\n  // お気に入りボタンクリック\n  const favoriteClickHandler = (_event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>): void => {\n    setOnlyFavorite(!onlyFavorite)\n    setCanSearch(true)\n  }\n\n  // 検索ボタンクリック\n  const clickHandler = (_event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>): void => {\n    setCanSearch(true)\n  }\n\n  // エンターでも検索可能にする\n  const keyPressHandler = (event: React.KeyboardEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    if(event.keyCode === 13){\n      setCanSearch(true)\n    }\n  }\n\n  let searchType = \"\"\n  switch(type) {\n    case 'artist':\n      searchType = \"アーティスト\"\n      break\n    case 'album':\n      searchType = \"アルバム\"\n      break\n    case 'track':\n      searchType = \"曲\"\n      break\n  }\n\n  let favoriteContent = <></>\n  if(state.user && state.user.role.allowedActions.includes(\"changeFavorites\")){\n    favoriteContent =\n      <IconButton\n        onClick={favoriteClickHandler}\n        edge=\"end\"\n      >\n        { onlyFavorite ?\n            <MuiThemeProvider theme={createMuiTheme({ palette: { primary: red } })}>\n              <FavoriteIcon color=\"primary\" stroke={\"white\"} strokeWidth={2} />\n            </MuiThemeProvider>\n          :\n            <FavoriteBorderIcon /> }\n      </IconButton>\n  }\n\n  return (\n    <FormControl variant=\"outlined\">\n      <InputLabel htmlFor=\"ord\">{ searchType + \"検索\" }</InputLabel>\n      <OutlinedInput\n        onChange={(e)=>{setKeyword(e.target.value as string)}}\n        onKeyDown={keyPressHandler}\n        // ユーザーとハッシュタグ\n        startAdornment={\n          usernamesContent\n        }\n        // お気に入りと検索ボタン\n        endAdornment={\n          <InputAdornment position=\"end\">\n            {favoriteContent}\n            <IconButton\n              onClick={clickHandler}\n              edge=\"end\"\n            >\n              <SearchIcon />\n            </IconButton>\n          </InputAdornment>\n        }\n        label={ searchType + \"検索\" }\n        value={keyword}\n      />\n    </FormControl>\n  )\n}\n\nexport default SearchKeywordComponent\n","import React, { useState } from 'react';\nimport { useArtistsQuery, ArtistsQueryVariables, Artist } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport ArtistItemLayout from '../item/ArtistItemLayout';\nimport useParameters, { ParameterPrefixKeys, ParameterKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\nimport OrderComponent from '../../../components/search/OrderComponent';\nimport SearchKeywordComponent from '../../../components/search/SearchKeywordComponent';\n\nconst ArtistsLayout = () => {\n  const [order, setOrder] = useState<string>(\"NAME.DESC\")\n  const parameters = useParameters<ArtistsQueryVariables>(\"artist\")\n  let history = useHistory()\n  const limit = 30\n  const fetchPolicy = parameters.conditions?.favorite ? \"cache-and-network\" : \"cache-first\"\n  const { error, data, fetchMore } = useArtistsQuery(\n    {\n      variables: {\n        cursor: {\n          offset: 0,\n          limit: limit,\n        },\n        sort: parameters.sort,\n        conditions: parameters.conditions,\n      },\n      fetchPolicy\n    }\n  )\n\n  // 並び順初期化\n  const _order = parameters?.sort ? `${parameters?.sort?.order}.${parameters?.sort?.type}` : null\n  if(_order && order !== _order){\n    setOrder(_order)\n  }\n\n  if (error) return <div>{error.message}</div>\n\n  let content:JSX.Element[] = []\n\n  if (data) {\n    content =\n      data.items.map(\n        (item, i) =>\n          <Grid item key={i}>\n            <PaginationComponent\n              component={<ArtistItemLayout artist={item as Artist} width={150} />}\n              no={i}\n              offset={data.items.length}\n              limit={limit}\n              fetchMore={fetchMore}\n            />\n          </Grid>\n      )\n  }\n\n  const orderChangeHandler = (event: React.ChangeEvent<{\n    name?: string | undefined\n    value: unknown\n  }>, _child: React.ReactNode) => {\n    const sort = event.target.value as string\n    const [order, sortType] = sort.split(\".\")\n    setOrder(sort)\n    const params = new URLSearchParams(history.location.search)\n    params.set(ParameterPrefixKeys.artist + ParameterKeys.order, order)\n    params.set(ParameterPrefixKeys.artist + ParameterKeys.sortType, sortType)\n    history.push(`${history.location.pathname}?${params.toString()}`)\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item >\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <SearchKeywordComponent type={\"artist\"}/>\n          </Grid>\n          <Grid item>\n            <OrderComponent\n              label=\"アーティスト表示順\"\n              value={order}\n              onChange={orderChangeHandler}\n              minWidth={150}\n              selectItems={[\n                { label: \"名前降順\", value: \"NAME.DESC\" },\n                { label: \"名前昇順\", value: \"NAME.ASC\" },\n                { label: \"追加日新しい順\", value: \"NEW.DESC\" },\n                { label: \"追加日古い順\", value: \"NEW.ASC\" },\n                { label: \"人気順\", value: \"POPULARITY.DESC\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-evenly\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          {content}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ArtistsLayout\n","import React from 'react';\nimport { Album, StatusEnum } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport { Grid } from '@material-ui/core';\nimport { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\nimport FavoriteComponent from '../../../components/favorite/FavoriteComponent';\n\nconst AlbumItemLayout = (\n  { album, width }:\n  { album: Album, width: number }\n) => {\n  // クエリパラメータ引き継ぎ\n  let history = useHistory()\n  const params = new URLSearchParams(history.location.search)\n  params.set(ParameterPrefixKeys.artist + ParameterKeys.ids, album.id)\n  // キーワード検索はいちいち検索されるので削除\n  params.delete(ParameterPrefixKeys.album + ParameterKeys.keyword)\n  params.delete(ParameterPrefixKeys.artist + ParameterKeys.keyword)\n  const status = params.get(ParameterPrefixKeys.album + ParameterKeys.status)\n  // すでにアーティストステータスが設定されていた場合はそちらを優先する\n  if(status !== null && !params.get(ParameterPrefixKeys.album + ParameterKeys.status)) {\n    params.set(ParameterPrefixKeys.album + ParameterKeys.status, status)\n  }\n\n  const style = {\n    width: \"15px\",\n    height: \"15px\",\n    borderRadius: \"50%\",\n    fontSize: \"10px\",\n    color: \"#fff\",\n    lineHeight: \"15px\",\n    textAlign: \"center\" as \"center\",\n    background: \"#000\",\n  }\n\n  const serviceIcons = []\n  if(album.appleMusicAlbum){\n    serviceIcons.push(<Grid key={1} item style={{...style, backgroundColor: \"#ff2f56\"}}>A</Grid>)\n  }\n  if(album.itunesAlbum){\n    serviceIcons.push(<Grid key={2} item style={{...style, backgroundColor: \"#0070c9\"}}>iT</Grid>)\n  }\n  if(album.spotifyAlbum){\n    serviceIcons.push(<Grid key={3} item style={{...style, backgroundColor: \"#1DB954\"}}>S</Grid>)\n  }\n\n  // ステータスをわかりやすいようにしておく\n  if(album.status === StatusEnum.Pending){\n    serviceIcons.push(<Grid key={10} item style={{...style, color: \"#000\", backgroundColor: \"#FFFF00\"}}>PN</Grid>)\n  } else if (album.status === StatusEnum.Ignore){\n    serviceIcons.push(<Grid key={11} item style={{...style, color: \"#000\",backgroundColor: \"#FF0000\"}}>IG</Grid>)\n  }\n\n  return (\n    <ImageCardComponent\n      title={album.name}\n      src={album.artworkM.url}\n      width={width}\n      linkUrl={`/albums/${album.id}?${params.toString()}`}\n      topComponent={<FavoriteComponent favorable_type=\"album\" favorable_id={album.id} contentWidth={width} />}\n      bottomComponent={<>{serviceIcons}</>}\n    />\n  )\n}\n\nexport default AlbumItemLayout\n","import React, { useState } from 'react';\nimport { useAlbumsQuery, Album, AlbumsQueryVariables } from '../../../graphql/types.d';\nimport AlbumItemLayout from '../item/AlbumItemLayout';\nimport { Grid } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport useParameters, { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\nimport OrderComponent from '../../../components/search/OrderComponent';\nimport SearchKeywordComponent from '../../../components/search/SearchKeywordComponent';\n\nconst AlbumsLayout = () => {\n  const [order, setOrder] = useState<string>(\"RELEASE.DESC\")\n  const parameters = useParameters<AlbumsQueryVariables>(\"album\")\n  let history = useHistory()\n  const limit = 50\n  const fetchPolicy = parameters.conditions?.favorite ? \"cache-and-network\" : \"cache-first\"\n  const { error, data, fetchMore } = useAlbumsQuery(\n    {\n      variables: {\n        cursor: {\n          offset: 0,\n          limit: limit,\n        },\n        sort: parameters.sort,\n        conditions: parameters.conditions,\n      },\n      fetchPolicy,\n    }\n  )\n\n  // 並び順初期化\n  const _order = parameters?.sort ? `${parameters?.sort?.order}.${parameters?.sort?.type}` : null\n  if(_order && order !== _order){\n    setOrder(_order)\n  }\n\n  if (error) return <div>{error.message}</div>\n\n  let content:JSX.Element[] = []\n\n  if (data) {\n    content =\n      data.items.map(\n        (item, i) =>\n          <Grid item key={i}>\n            <PaginationComponent\n              component={<AlbumItemLayout album={item as Album} width={150} />}\n              no={i}\n              offset={data.items.length}\n              limit={limit}\n              fetchMore={fetchMore}\n            />\n          </Grid>\n      )\n  }\n\n  const handleChange = (event: React.ChangeEvent<{\n      name?: string | undefined\n      value: unknown\n  }>, _child: React.ReactNode) => {\n    const sort = event.target.value as string\n    const [order, sortType] = sort.split(\".\")\n    setOrder(sort)\n    const params = new URLSearchParams(history.location.search)\n    params.set(ParameterPrefixKeys.album + ParameterKeys.order, order)\n    params.set(ParameterPrefixKeys.album + ParameterKeys.sortType, sortType)\n    history.push(`${history.location.pathname}?${params.toString()}`)\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item>\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <SearchKeywordComponent type={\"album\"}/>\n          </Grid>\n          <Grid item>\n            <OrderComponent\n              label=\"アルバム表示順\"\n              value={order}\n              onChange={handleChange}\n              minWidth={150}\n              selectItems={[\n                { label: \"発売日新しい順\", value: \"RELEASE.DESC\" },\n                { label: \"発売日古い順\", value: \"RELEASE.ASC\" },\n                { label: \"追加日新しい順\", value: \"NEW.DESC\" },\n                { label: \"追加日古い順\", value: \"NEW.ASC\" },\n                { label: \"人気順\", value: \"POPULARITY.DESC\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-evenly\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          {content}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AlbumsLayout;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Artist, ArtistDocument } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport AlbumsLayout from '../../album/list/AlbumsLayout';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport ReactGA from 'react-ga';\nimport FavoriteComponent from '../../../components/favorite/FavoriteComponent';\n\nconst ArtistInfoLayout = () => {\n  const { id } = useParams()\n  const { error, data } =\n    useQuery<{ artist: Artist | null }>(ArtistDocument,{ variables: { id: id } })\n\n  // SEO対策\n  useEffect(() => {\n    if (data && data.artist) {\n      const titles = document.title.split(\"-\")\n      document.title = `${data.artist.name} - ${titles[titles.length - 1].trim()}`\n      const description = `${data.artist.name}さんのゲーム音楽アルバム一覧です。`\n      document.querySelector('meta[name=\"description\"]')?.setAttribute(\"content\", description)\n\n      // トラッキング\n      ReactGA.pageview(window.location.pathname + window.location.search)\n      console.log(window.location.pathname + window.location.search)\n    }\n\n    return () => {\n      document.title = \"ゲーム音楽\"\n      document.querySelector('meta[name=\"description\"]')?.setAttribute(\"content\", \"音楽サブスクリプション配信中のゲーム音楽のポータルサイト\")\n    }\n  }, [data])\n\n  if (error) return <div>{error.message}</div>\n\n  let content = <></>\n\n  if (data && data.artist) {\n    content =\n      <ImageCardComponent\n        title={data.artist.name}\n        src={data.artist.artworkL.url}\n        width={270}\n        topComponent={<FavoriteComponent favorable_type=\"artist\" favorable_id={data.artist.id} contentWidth={270} />}\n      />\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {content}\n      <Grid item>\n        <AlbumsLayout />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ArtistInfoLayout\n","import { Howl } from 'howler'\nimport { Track } from '../../graphql/types.d'\nimport { ActionType } from '../../hooks/playerContext'\n\nclass PreviewPlayer {\n  track?: Track\n  player?: Howl\n  currentPlaybackNo?: number\n  dispatch: React.Dispatch<ActionType>\n\n  constructor({ dispatch }:{ dispatch: React.Dispatch<ActionType> }){\n    this.dispatch = dispatch\n  }\n\n  setMediaMetadata() {\n    if(navigator.mediaSession) {\n      const track = this.track\n      if(track) {\n        navigator.mediaSession.metadata = new MediaMetadata({\n          title: track.name,\n          artwork: [{ src: track.artworkM.url || \"\", sizes: \"300x300\", type: 'image/png' }]\n        })\n      }\n      navigator.mediaSession.setActionHandler('play', () => this.dispatch({ type: \"PLAY\" }))\n      navigator.mediaSession.setActionHandler('pause', () => this.dispatch({ type: \"PAUSE\" }))\n      navigator.mediaSession.setActionHandler('nexttrack', () => this.dispatch({ type: \"NEXT_PLAY\" }))\n    }\n  }\n\n  async play(no: number, track: Track) {\n    if(no === this.currentPlaybackNo) {\n      // 再生可否による分岐\n      if(this.player){\n        console.log(\"Play Preview!!\")\n        await this.player.play()\n      } else {\n        // 再生不可の場合は次の曲を再生\n        this.dispatch({ type: \"NEXT_PLAY\" })\n      }\n    } else {\n      this.currentPlaybackNo = no\n      this.track  = track\n      this.player = this.setPlayer(track)\n      this.play(no, track)\n    }\n  }\n\n  setPlayer(track: Track) {\n    if(this.player) this.player.stop()\n    if(!track.previewUrl) return\n\n    const player:Howl = new Howl({\n      src: track.previewUrl,\n      html5: true,\n      preload: false,\n      autoplay: false,\n      onend: () => this.dispatch({ type: \"NEXT_PLAY\" }),\n      onplay: () => {\n        // Media Session API\n        this.setMediaMetadata()\n        // フェードイン\n        if(player.volume() === 0) player.fade(0, 0.5, 2000)\n        // フェードアウト\n        // ref: https://stackoverflow.com/questions/56043259/how-to-make-a-fade-out-at-the-end-of-the-sound-in-howlerjs\n        var fadeouttime = 2000;\n        setTimeout(\n          () => player.fade(0.5, 0, fadeouttime),\n          (player.duration() - (player.seek() as number)) * 1000 - fadeouttime\n        )\n      },\n      onstop: () => player.volume(0),\n      volume: 0,\n    })\n\n    return player\n  }\n\n  async pause(no: number) {\n    // 未再生の場合はセットしない\n    this.currentPlaybackNo = this.currentPlaybackNo === undefined ? undefined : no\n    if(this.player && this.player.playing()) {\n      console.log(\"Pause Preview!!\")\n      this.player && await this.player.pause()\n    }\n  }\n\n  async stop() {\n    this.currentPlaybackNo = undefined\n    if(this.player && this.player.playing()) {\n      console.log(\"Stop Preview!!\")\n      await this.player.stop()\n    }\n  }\n}\n\nexport default PreviewPlayer\n","import { Track } from '../../graphql/types.d'\nimport { ActionType } from '../../hooks/playerContext'\n\n// queue に複数の音楽を入れるべきだが実装都合上一曲のみを扱う\nclass AppleMusicPlayer {\n  track?: Track\n  currentPlaybackNo?: number\n  dispatch: React.Dispatch<ActionType>\n\n  constructor({ dispatch }:{ dispatch: React.Dispatch<ActionType> }){\n    this.dispatch = dispatch\n    // リセット\n    MusicKit.getInstance().setQueue({})\n    // 次再生をリスナーに登録\n    if(MusicKit.getInstance().player._registry.playbackStateDidChange.length === 1) {\n      MusicKit.getInstance().player.addEventListener(\"playbackStateDidChange\", (state) => {\n        switch(MusicKit.PlaybackStates[state.state]){\n          case \"ended\":\n            this.dispatch({ type: \"NEXT_PLAY\" })\n            break\n        }\n      })\n    }\n    MusicKit.getInstance().player.volume = 0.5\n  }\n\n  setMediaMetadata() {\n    if(navigator.mediaSession) {\n      const track = this.track\n      if(track) {\n        navigator.mediaSession.metadata = new MediaMetadata({\n          title: track.name,\n          artwork: [{ src: track.artworkM.url || \"\", sizes: \"300x300\", type: 'image/png' }]\n        })\n      }\n      navigator.mediaSession.setActionHandler('play', () => this.dispatch({ type: \"PLAY\" }))\n      navigator.mediaSession.setActionHandler('pause', () => this.dispatch({ type: \"PAUSE\" }))\n      navigator.mediaSession.setActionHandler('nexttrack', () => this.dispatch({ type: \"NEXT_PLAY\" }))\n    }\n  }\n\n  async play(no: number, track: Track) {\n    const music = MusicKit.getInstance()\n    const appleMusicTrack = track.appleMusicTracks?.find(a => a)\n\n    if(!appleMusicTrack) {\n      throw new Error(\"Not found Apple Music Track\")\n    }\n\n    this.setMediaMetadata()\n\n    if(no === this.currentPlaybackNo) {\n      // 再生可否による分岐\n      if(music.player.queue.items.length === 1){\n        console.log(\"Play Apple Music!!\")\n        await music.play()\n      } else {\n        // 再生不可の場合は次の曲を再生\n        this.dispatch({ type: \"NEXT_PLAY\" })\n      }\n    } else {\n      this.currentPlaybackNo = no\n      this.track  = track\n      await music.setQueue({ songs: [appleMusicTrack.appleMusicId] })\n      await this.play(no, track)\n    }\n  }\n\n  async pause(no: number) {\n    // 未再生の場合はセットしない\n    this.currentPlaybackNo = this.currentPlaybackNo === undefined ? undefined : no\n    console.log(\"Pause Apple Music!!\")\n    await MusicKit.getInstance().pause()\n  }\n\n  async stop() {\n    this.currentPlaybackNo = undefined\n    if(MusicKit.PlaybackStates[MusicKit.getInstance().player.playbackState] === \"playing\") {\n      console.log(\"Stop Apple Music!!\")\n      await MusicKit.getInstance().stop()\n    }\n  }\n}\n\nexport default AppleMusicPlayer\n","import Cookies, { CookieAttributes } from 'js-cookie'\n\n// とにかくセキュアなクッキー\nclass SecureCookies {\n  secureObject: CookieAttributes\n\n  constructor() {\n    if(window.location.protocol === \"https:\") {\n      this.secureObject = { secure: true }\n    } else {\n      this.secureObject = {}\n    }\n    this.secureObject = { ...this.secureObject, sameSite: 'strict' }\n  }\n\n  set(name: string, value: string, options?: CookieAttributes) {\n    return Cookies.set(name, value, { ...this.secureObject, ...options })\n  }\n\n  get(name: string) {\n    return Cookies.get(name)\n  }\n\n  remove(name: string, options?: CookieAttributes) {\n    return Cookies.remove(name, options)\n  }\n}\n\nexport default SecureCookies\n","import { Track } from '../../graphql/types.d'\nimport { ActionType } from '../../hooks/playerContext'\nimport SpotifyWebApi from 'spotify-web-api-node'\nimport SecureCookies from '../../lib/SecureCookies'\n\n// queue に複数の音楽を入れるべきだが実装都合上一曲のみを扱う\nclass SpotifyPlayer {\n  player: SpotifyWebApi\n  track?: Track\n  currentPlaybackNo?: number\n  dispatch: React.Dispatch<ActionType>\n  cookie: SecureCookies\n  state: \"playing\" | \"pause\" | \"stop\"\n\n  constructor({ dispatch }:{ dispatch: React.Dispatch<ActionType> }){\n    this.cookie = new SecureCookies()\n    const accessToken = this.cookie.get('spotifyAccessToken')\n    this.player = new SpotifyWebApi({ accessToken })\n    this.dispatch = dispatch\n    this.state = \"stop\"\n  }\n\n  setMediaMetadata() {\n    if(navigator.mediaSession) {\n      const track = this.track\n      if(track) {\n        navigator.mediaSession.metadata = new MediaMetadata({\n          title: track.name,\n          artwork: [{ src: track.artworkM.url || \"\", sizes: \"300x300\", type: 'image/png' }]\n        })\n      }\n      navigator.mediaSession.setActionHandler('play', () => this.dispatch({ type: \"PLAY\" }))\n      navigator.mediaSession.setActionHandler('pause', () => this.dispatch({ type: \"PAUSE\" }))\n      navigator.mediaSession.setActionHandler('nexttrack', () => this.dispatch({ type: \"NEXT_PLAY\" }))\n    }\n  }\n\n  async play(no: number, track: Track) {\n    const spotifyTrack = track.spotifyTracks?.find(a => a)\n    if(!spotifyTrack) {\n      throw new Error(\"Not found Spotify Track\")\n    }\n\n    // TODO: アクセストークン切れの場合にこのハンドリングであっているのか検証すること\n    const me = await this.player.getMe().catch(e => {\n      console.log(e)\n      window.location.reload()\n    })\n    if(me && me.body.product !== \"premium\") {\n      throw new Error('Premium user only!!')\n    }\n\n    const device_id = this.cookie.get(\"spotifyDeviceId\")\n    if(!device_id) {\n      throw new Error(\"Not found Spotify Device ID\")\n    }\n\n    this.track = track\n    this.setMediaMetadata()\n    this.player.setVolume(50, { device_id })\n\n    if(no === this.currentPlaybackNo) {\n      if(this.state === \"pause\") {\n        this.state = \"playing\"\n        console.log(\"Play Spotify!!\")\n        await this.player.play({ device_id })\n      } else {\n        this.state = \"playing\"\n        console.log(\"Play Spotify!!\")\n        await this.player.play({\n          device_id,\n          uris: [`spotify:track:${spotifyTrack.spotifyId}`]\n        })\n      }\n    } else {\n      this.state = \"playing\"\n      console.log(\"Play Spotify!!\")\n      await this.player.play({\n        device_id,\n        uris: [`spotify:track:${spotifyTrack.spotifyId}`]\n      })\n    }\n\n    this.currentPlaybackNo = no\n  }\n\n  async pause(no: number) {\n    if(!this.track) return\n    // 未再生の場合はセットしない\n    this.currentPlaybackNo = this.currentPlaybackNo === undefined ? undefined : no\n    this.state = \"pause\"\n    console.log(\"Pause Spotify!!\")\n    await this.player.pause()\n  }\n\n  async stop() {\n    if(!this.track) return\n    this.currentPlaybackNo = undefined\n    this.state = \"stop\"\n    console.log(\"Stop Spotify!!\")\n    await this.player.pause()\n  }\n}\n\nexport default SpotifyPlayer\n","import { Track } from '../../graphql/types.d'\nimport { ActionType } from '../../hooks/playerContext'\nimport PreviewPlayer from './PreviewPlayer'\nimport AppleMusicPlayer from './AppleMusicPlayer'\nimport SpotifyPlayer from './SpotifyPlayer'\n\n// 複数のプレイヤーをまとめる\nclass Player {\n  currentPlyer?: PreviewPlayer | AppleMusicPlayer | SpotifyPlayer\n  players: [AppleMusicPlayer?, SpotifyPlayer?, PreviewPlayer?]\n  tracks: Track[]\n  currentPlaybackNo: number\n  dispatch?: React.Dispatch<ActionType>\n  linkUrl: string\n\n  constructor(\n    { linkUrl, tracks, dispatch, canFullPlayAppleMusic, canFullPlaySpotify }:\n    {\n      linkUrl: string,\n      tracks: Track[],\n      dispatch?: React.Dispatch<ActionType>,\n      canFullPlayAppleMusic?: boolean,\n      canFullPlaySpotify?: boolean\n    }\n  ){\n    let _players:[PreviewPlayer?, SpotifyPlayer?, AppleMusicPlayer?] = []\n    if(dispatch) {\n      _players.push(new PreviewPlayer({ dispatch }))\n\n      if(canFullPlaySpotify) {\n        _players.push(new SpotifyPlayer({ dispatch }))\n      }\n      if(canFullPlayAppleMusic) {\n        _players.push(new AppleMusicPlayer({ dispatch }))\n      }\n    }\n    this.players = _players.reverse() as [AppleMusicPlayer?, SpotifyPlayer?, PreviewPlayer?]\n    this.currentPlaybackNo = 0\n    this.tracks = tracks\n    this.dispatch = dispatch\n    this.linkUrl = linkUrl\n  }\n\n  currentTrack() {\n    return this.tracks[this.currentPlaybackNo]\n  }\n\n  play(no?:number) {\n    const playbackNo = no ?? this.currentPlaybackNo;\n\n    // 再生した場合にエラーになる可能性もあるため優先順位順に実行してく\n    (async () => {\n      for (const player of this.players) {\n        try {\n\n          // 別の曲を再生した場合は停止する\n          if(typeof no === \"number\") await this.stop()\n\n          // エラーが出ない場合は正常に再生できていると判断する\n          player && await player.play(playbackNo, this.currentTrack())\n          break;\n        } catch {}\n      }\n    })()\n\n    this.currentPlaybackNo = playbackNo\n    return this.currentPlaybackNo\n  }\n\n  nextPlay() {\n    const nextNo = this.currentPlaybackNo + 1\n    if((this.tracks.length - 1) < nextNo) {\n      // プレイリスト最後の曲\n      this.currentPlaybackNo = 0\n      this.stop()\n    } else {\n      this.currentPlaybackNo = nextNo\n      // プレビュープレイヤーが存在しない曲は一旦再生しない\n      if(!this.currentTrack().previewUrl) {\n        this.nextPlay()\n      } else {\n        this.play(this.currentPlaybackNo)\n      }\n    }\n    return this.currentPlaybackNo\n  }\n\n  async pause() {\n    for (const player of this.players) {\n      player && await player.pause(this.currentPlaybackNo)\n    }\n  }\n\n  async stop() {\n    for (const player of this.players) {\n      player && await player.stop()\n    }\n  }\n}\n\nexport default Player\n","import React, { useContext } from 'react';\nimport { Grid, Button, MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport { red, green, blue } from '@material-ui/core/colors';\nimport { Album } from '../../graphql/types.d'\nimport PlayerContext from '../../hooks/playerContext';\n\nconst MusicServiceButtonComponent = ({ album }:{ album:Album|null }) => {\n  const { dispatch } = useContext(PlayerContext)\n  let contents:JSX.Element[] = []\n\n  if(album?.appleMusicAlbum){\n    contents.push(\n      <Grid item key={0}>\n        <MuiThemeProvider theme={createMuiTheme({ palette: { primary: red } })}>\n          <Button\n            href={`https://music.apple.com/jp/album/${album.appleMusicAlbum.appleMusicId}`}\n            target=\"_blank\"\n            variant=\"contained\" color=\"primary\"\n            onClick={() => dispatch({ type: \"PAUSE\" })}\n          >\n            Apple Music で聴く\n          </Button>\n        </MuiThemeProvider>\n      </Grid>\n    )\n  }\n\n  if(album?.itunesAlbum){\n    contents.push(\n      <Grid item key={1}>\n        <MuiThemeProvider theme={createMuiTheme({ palette: { primary: blue } })}>\n          <Button\n            href={`itmss://music.apple.com/jp/album/${album.itunesAlbum.appleMusicId}?app=itunes`}\n            target=\"_blank\"\n            variant=\"contained\" color=\"primary\"\n            onClick={() => dispatch({ type: \"PAUSE\" })}\n          >\n            iTunes で聴く\n          </Button>\n        </MuiThemeProvider>\n      </Grid>\n    )\n  }\n\n  if(album?.spotifyAlbum){\n    contents.push(\n      <Grid item key={2}>\n        <MuiThemeProvider theme={createMuiTheme({ palette: { primary: green } })}>\n          <Button\n            href={`https://open.spotify.com/album/${album.spotifyAlbum.spotifyId}`}\n            target=\"_blank\"\n            variant=\"contained\" color=\"primary\"\n            onClick={() => dispatch({ type: \"PAUSE\" })}\n          >\n            Spotify で聴く\n          </Button>\n        </MuiThemeProvider>\n      </Grid>\n    )\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {contents}\n    </Grid>\n  )\n}\n\nexport default MusicServiceButtonComponent\n","import React, { useContext } from 'react';\nimport { TableRow, TableCell, IconButton, makeStyles, Theme, SvgIconProps } from '@material-ui/core';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StarRateIcon from '@material-ui/icons/StarRate'\nimport AlbumIcon from '@material-ui/icons/Album'\nimport { Track } from '../../graphql/types.d'\nimport PlayerContext, { PlaybackStatus } from '../../hooks/playerContext';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  '@keyframes playing-icon-spin': {\n    from: { transform: 'rotate(0deg)' },\n    to: { transform: 'rotate(360deg)' },\n  },\n  playingIcon: {\n    height: 24,\n    width: 24,\n    animationName: '$playing-icon-spin',\n    animationDuration: '2000ms',\n    animationIterationCount: 'infinite',\n    animationTimingFunction: 'linear',\n  },\n}));\n\nconst PreviewPlayerItemComponent = (\n  { track, index, playAction, averagePopularity }:\n  { track:Track, index:number, playAction:(no:number) => void, averagePopularity:number }\n) => {\n  const classes = useStyles()\n  const { state } = useContext(PlayerContext)\n\n  const playable = track.previewUrl !== null\n  const playing = (state.playbackStatus === PlaybackStatus.Play)\n  const currentTrack =\n    (index === state.currentNo) &&\n    (track.id === state.player.currentTrack()?.id)\n\n  let currentTrackIcon = <AlbumIcon\n    color=\"primary\"\n    className={classes.playingIcon}\n    component={(svgProps: SvgIconProps) => {\n      return (\n        <svg {...svgProps}>\n          <defs>\n            <linearGradient id=\"gradient1\">\n              {\n                playing ?\n                <>\n                  <stop offset=\"20%\" stopColor={\"#4AC6D2\"} />\n                  <stop offset=\"80%\" stopColor={\"#F2D349\"} />\n                </>\n                :\n                <stop offset=\"100%\" stopColor={\"#4AC6D2\"} />\n              }\n            </linearGradient>\n          </defs>\n          {React.cloneElement(\n            (svgProps.children as React.ReactNodeArray)[0] as React.ReactElement,\n            {\n              fill: 'url(#gradient1)',\n            },\n          )}\n        </svg>\n      );\n    }}\n  />\n\n  // 人気度が平均以上のものは星にする\n  let starable = false\n  if(averagePopularity < track.popularity) starable = true\n\n  return (\n    <TableRow>\n      <TableCell align=\"center\">\n        {\n          currentTrack ?\n            <IconButton component=\"span\">\n              {currentTrackIcon}\n            </IconButton>\n          :\n            <IconButton onClick={() => playAction(index)} disabled={!playable} component=\"span\">\n              {starable ? <StarRateIcon /> : <PlayArrowIcon />}\n            </IconButton>\n        }\n      </TableCell>\n      <TableCell>{track.name}</TableCell>\n    </TableRow>\n  )\n}\n\nexport default PreviewPlayerItemComponent\n","import React from 'react';\nimport { Grid, IconButton } from '@material-ui/core';\nimport { Album } from '../../graphql/types.d'\nimport ShareIcon from '@material-ui/icons/Share';\nimport TwitterIcon from '@material-ui/icons/Twitter'\nimport FacebookIcon from '@material-ui/icons/Facebook'\n\nconst ShareButtonComponent = ({ album }:{ album:Album }) => {\n  const url = `https://video-game-music.net/albums/${album.id}?ai=${album.id}`\n  // TODO: 他のSNSでも汎用的に使えるようにリファクタしろよな\n  let twitterUrl = `https://twitter.com/intent/tweet`\n  twitterUrl += `?text=${album.name} - ゲーム音楽`\n  twitterUrl += `&url=${url}`\n\n  let facebookUrl = `https://www.facebook.com/sharer/sharer.php`\n  facebookUrl += `?u=${encodeURIComponent(url)}`\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2}>\n      <Grid item>\n        {/* サイズ統一するため無駄だけど無効ボタンにしておく */}\n        <IconButton size=\"small\" disabled>\n          <ShareIcon/>\n        </IconButton>\n      </Grid>\n      <Grid item>\n        {/* ref: https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/overview */}\n        <IconButton\n          size=\"small\"\n          href={twitterUrl}\n          target=\"_blank\"\n        >\n          <TwitterIcon  />\n        </IconButton>\n      </Grid>\n      <Grid item>\n        {/* ref: https://developers.facebook.com/docs/plugins/share-button?locale=ja_JP#configurator */}\n        <IconButton\n          size=\"small\"\n          href={facebookUrl}\n          target=\"_blank\"\n        >\n          <FacebookIcon  />\n        </IconButton>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ShareButtonComponent\n","/// <reference path=\"MusicKitV1.d.ts\" />\n\nimport { useState, useEffect } from \"react\"\n\n// MusicKit をインスタンス化可能な場合は true を返す\nconst useMusicKitReady = () => {\n  const [isReady, setIsReady] = useState(() => {\n    let initialReady\n\n    if(\"undefined\" !== typeof MusicKit) {\n      try {\n        MusicKit.getInstance()\n        initialReady = true\n      } catch (e) {\n        initialReady = false\n      }\n    } else {\n      initialReady = false\n    }\n\n    return initialReady\n  })\n\n  useEffect(() => {\n    if (isReady) return\n\n    const eventContent = () => {\n      // 一度存在確認が出来たらリスナーは無駄なので削除する\n      document.removeEventListener(\"musickitconfigured\", eventContent)\n      setIsReady(true)\n    }\n\n    document.addEventListener(\"musickitconfigured\", eventContent)\n\n    return () => document.removeEventListener(\"musickitconfigured\", eventContent)\n  }, [isReady])\n\n  return isReady\n}\n\nexport default useMusicKitReady\n","/// <reference path=\"MusicKitV1.d.ts\" />\n\nimport { useState, useEffect } from \"react\"\nimport useMusicKitReady from \"./useMusicKitReady\"\n\nconst useMusicKitAuthentication = () => {\n  const isReady = useMusicKitReady()\n\n  const [isAuthorized, setIsAuthorized] = useState(() => {\n    return isReady ? MusicKit.getInstance().isAuthorized : false\n  })\n\n  const authentication = {\n    login:  async () => await MusicKit.getInstance().authorize(),\n    logout: async () => await MusicKit.getInstance().unauthorize(),\n  }\n\n  useEffect(() => {\n    if (!isReady) return\n\n    const callback = (result: { authorizationStatus: number }) => {\n      // 0 がログアウト状態\n      setIsAuthorized(0 !== result.authorizationStatus)\n    }\n\n    MusicKit.getInstance().addEventListener(MusicKit.Events.authorizationStatusDidChange, callback)\n    setIsAuthorized(MusicKit.getInstance().isAuthorized)\n\n    return () => MusicKit.getInstance().removeEventListener(MusicKit.Events.authorizationStatusDidChange, callback)\n  }, [isReady])\n\n  return { authentication, isAuthorized }\n}\n\nexport default useMusicKitAuthentication\n","import React, { useReducer, createContext, Dispatch } from 'react'\n\ntype ContextValue = {\n  state: StateType\n  dispatch: Dispatch<ActionType>\n}\n\nconst InformationContext = createContext({} as ContextValue)\n\nconst initialState: {\n  severity: \"info\" | \"success\" | \"warning\" | \"error\" | null\n  duration: number | null\n  text: string | JSX.Element\n  buttonText: string\n  open: boolean\n  closeHandler?: (event: any) => void\n} = {\n  severity: null,\n  duration: null,\n  text: \"\",\n  buttonText: \"\",\n  open: false,\n}\n\nexport type StateType = typeof initialState\nexport type ActionType =\n  | { type: 'ADD_ALERT', severity: \"info\" | \"success\" | \"warning\" | \"error\" | null, duration: number | null, text: string | JSX.Element, buttonText: string, closeHandler?: (event: any) => void }\n  | { type: 'CLOSE_ALERT' }\n\nconst reducer = (state:StateType, action:ActionType):StateType => {\n  switch(action.type) {\n    case 'ADD_ALERT':\n      return {\n        ...state,\n        severity: action.severity,\n        duration: action.duration,\n        text: action.text,\n        buttonText: action.buttonText,\n        open: true,\n        closeHandler: action.closeHandler\n      }\n    case 'CLOSE_ALERT':\n      return {\n        ...state,\n        open: false\n      }\n    default:\n      return state\n  }\n}\n\nconst InformationProvider = ({ children }:{ children:JSX.Element|JSX.Element[] }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return <InformationContext.Provider value={{ state, dispatch }}>{children}</InformationContext.Provider>\n}\n\nexport default InformationContext\nexport { InformationProvider }\n","import { useState, useEffect, useContext } from \"react\"\nimport SpotifyWebApi from 'spotify-web-api-node'\nimport { useLocation, useHistory } from \"react-router-dom\"\nimport { v4 as uuid } from 'uuid'\nimport { useLazyQuery } from \"@apollo/react-hooks\"\nimport { SpotifyTokenDocument, SpotifyTokenQuery, SpotifyTokenQueryVariables } from \"../../graphql/types.d\"\nimport InformationContext from \"../informationContext\"\nimport SecureCookies from \"../../lib/SecureCookies\"\n\nconst spotifyAccessToken = \"spotifyAccessToken\"\nconst spotifyRefreshToken = \"spotifyRefreshToken\"\nconst spotifyDeviceId = \"spotifyDeviceId\"\n\nconst useSpotifyAuthentication = () => {\n  const cookie = new SecureCookies()\n  const [isAuthorized, setIsAuthorized] = useState<boolean>(() =>\n    !!cookie.get(spotifyAccessToken) || !!cookie.get(spotifyRefreshToken)\n  )\n  const location = useLocation()\n  const history = useHistory()\n  const [getToken, { data, error }] = useLazyQuery<SpotifyTokenQuery, SpotifyTokenQueryVariables>(SpotifyTokenDocument);\n  const infoContext = useContext(InformationContext)\n  const scopes = [\"streaming\", \"user-read-email\", \"user-read-private\"]\n\n  const authentication = {\n    login: async () => {\n      const _uuid = uuid()\n      cookie.set(\"spotifyState\", _uuid, { expires: 300 })\n      const clientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID || \"\"\n      const redirectUri = process.env.REACT_APP_SPOTIFY_REDIRECT_URI || \"\"\n      const spotifyApi = new SpotifyWebApi({ clientId, redirectUri })\n      const url = spotifyApi.createAuthorizeURL(scopes, _uuid)\n      window.open(url, \"_self\")\n    },\n    logout: async () => {\n      cookie.remove(spotifyAccessToken)\n      cookie.remove(spotifyRefreshToken)\n      cookie.remove(spotifyDeviceId)\n      setIsAuthorized(false)\n    },\n  }\n\n  // 1. ログイン後のリダイレクトでサーバーに問い合わせ\n  useEffect(() => {\n    if(isAuthorized) return\n\n    const params = new URLSearchParams(location.search)\n    const code = params.get(\"code\")\n\n    if(!!code && params.get(\"state\") === cookie.get(\"spotifyState\")) {\n      cookie.remove(\"spotifyState\", { expires: 300 })\n      history.push(history.location.pathname)\n      console.log(\"Get spotify token.\")\n      getToken({ variables: { code } })\n    }\n  }, [isAuthorized, setIsAuthorized, cookie, getToken, history, location.search])\n\n  // 2. サーバーにトークン問い合わせ後\n  useEffect(() => {\n    if(isAuthorized) return\n\n    if(data) {\n\n      // 会員プランチェック\n      (async () => {\n        const clientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID || \"\"\n        const redirectUri = process.env.REACT_APP_SPOTIFY_REDIRECT_URI || \"\"\n        const spotifyApi = new SpotifyWebApi({ clientId, redirectUri })\n\n        spotifyApi.setAccessToken(data.spotifyToken.accessToken)\n        const me = await spotifyApi.getMe()\n        if(me.body.product !== \"premium\") {\n          infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"info\", duration: 20000, text: \"現在のプランではフル再生ができません。 Spotify Premium プランでのみフル再生ができます。\", buttonText: \"OK\" })\n        }\n      })()\n\n      console.log(\"Set spotify token.\")\n      cookie.set(spotifyAccessToken, data.spotifyToken.accessToken, { expires: 1/24 })\n\n      // リフレッシュトークンは1週間にしておく\n      if(data.spotifyToken.refreshToken) {\n        cookie.set(spotifyRefreshToken, data.spotifyToken.refreshToken, { expires: 7 })\n      }\n      setIsAuthorized(true)\n      window.location.reload()\n    } else if(error) {\n      infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"error\", duration: 5000, text: \"Spotify : \" + error.graphQLErrors[0][\"message\"], buttonText: \"OK\" })\n    }\n  }, [data, error, isAuthorized, setIsAuthorized, cookie, infoContext])\n\n  // 3. トークンリフレッシュ\n  useEffect(() => {\n\n    // リフレッシュトークンのみある状態は更新する\n    const isRefresh = isAuthorized && !cookie.get(spotifyAccessToken) && cookie.get(spotifyRefreshToken)\n    if(!data && isRefresh) {\n\n      // サーバー問い合わせ前\n      const refreshToken = cookie.get(spotifyRefreshToken)\n      console.log(\"Refresh spotify token.\")\n      getToken({ variables: { refreshToken } })\n    } else if(data && isRefresh) {\n\n      // サーバー問い合わせ後\n      cookie.set(spotifyAccessToken, data.spotifyToken.accessToken, { expires: 1/24 })\n    }\n  }, [data, error, isAuthorized, cookie, getToken])\n\n  return { authentication, isAuthorized }\n}\n\nexport default useSpotifyAuthentication\n","import React, { useContext, useRef, useEffect, useState } from 'react';\nimport { TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody, Grid, Tooltip, ClickAwayListener, IconButton, Typography } from '@material-ui/core';\nimport ImageCardComponent from '../imageCard/ImageCardComponent';\nimport MusicServiceButtonComponent from './MusicServiceButtonComponent';\nimport { Album } from '../../graphql/types.d'\nimport PlayerContext from '../../hooks/playerContext';\nimport { useLocation } from 'react-router-dom';\nimport PreviewPlayerItemComponent from './PreviewPlayerItemComponent';\nimport InfoIcon from '@material-ui/icons/Info';\nimport _ from 'lodash';\nimport ShareButtonComponent from './ShareButtonComponent';\nimport FavoriteComponent from '../favorite/FavoriteComponent';\nimport useMusicKitAuthentication from '../../hooks/useMusicKit/useMusicKitAuthentication';\nimport Player from './Player';\nimport useSpotifyAuthentication from '../../hooks/useSpotify/useSpotifyAuthentication';\n\nconst PreviewPlayerComponent = ({ album }:{ album:Album }) => {\n  const { dispatch } = useContext(PlayerContext)\n  const location = useLocation()\n  const [openInfo, setOpenInfo] = useState(false)\n\n  const timeConversion = (ms:number) => {\n    const seconds = parseInt((ms / 1000).toFixed(0))\n    const minutes = parseInt((ms / (1000 * 60)).toFixed(0))\n    const hours = parseInt((ms / (1000 * 60 * 60)).toFixed(0))\n    const days = parseInt((ms / (1000 * 60 * 60 * 24)).toFixed(0))\n\n    if (seconds < 60) {\n        return seconds + \"秒\";\n    } else if (minutes < 60) {\n        return minutes + \"分\";\n    } else if (hours < 24) {\n        return hours + \"時間\";\n    } else {\n        return days + \"日\"\n    }\n  }\n\n  // アルバム情報\n  const reducer = (accumulator:number, currentValue:number) => accumulator + currentValue\n  const ms = album.tracks.map(track => track.durationMs).reduce(reducer)\n  const releaseDate = (new Date(album.releaseDate)).toLocaleDateString(\"jp\", { year: 'numeric', month: 'long', day: 'numeric' })\n\n  // SEO対策\n  useEffect(() => {\n    let description = `「${album.name}」の発売日は${releaseDate}です。収録曲数は${album.totalTracks}曲あり、全曲再生時間は約${timeConversion(ms)}です。`\n    description += `収録曲は、${album.tracks.map((track)=>track.name).join(', ')}です。`\n    document.querySelector('meta[name=\"description\"]')?.setAttribute(\"content\", description)\n\n    return () => document.querySelector('meta[name=\"description\"]')?.setAttribute(\"content\", \"音楽サブスクリプション配信中のゲーム音楽のポータルサイト\")\n  }, [album, ms, releaseDate])\n\n  // 音楽サービスログイン\n  const apple = useMusicKitAuthentication()\n  const spotify = useSpotifyAuthentication()\n  const hasAppleMusicAlbum = !!album.appleMusicAlbum\n  const hasSpotifyAlbum    = !!album.spotifyAlbum\n\n  // プレビュー画面表示時に初期化される\n  const initPlayer = useRef<boolean>(true);\n  const playAction = (no:number) => {\n    if(initPlayer.current) {\n      const _player = new Player({\n        linkUrl: `${location.pathname}${location.search}`,\n        tracks: album.tracks,\n        dispatch,\n        canFullPlayAppleMusic: hasAppleMusicAlbum && apple.isAuthorized,\n        canFullPlaySpotify: hasSpotifyAlbum && spotify.isAuthorized,\n      })\n\n      dispatch({ type: \"SET_PLAYER\", player: _player })\n      initPlayer.current = false\n    }\n    dispatch({ type: \"PLAY\", no })\n  }\n\n  const previewOrPlayLabel =\n    <ClickAwayListener onClickAway={()=>setOpenInfo(false)}>\n      <Tooltip\n        PopperProps={{\n          disablePortal: true,\n        }}\n        onClose={()=>setOpenInfo(false)}\n        open={openInfo}\n        disableFocusListener\n        disableHoverListener\n        disableTouchListener\n        placement=\"top-end\"\n        title=\"Apple Music または Spotify によるストリーミング再生またはストリーミング視聴\"\n      >\n        <IconButton size=\"small\" onClick={()=>setOpenInfo(true)}>\n          <InfoIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n    </ClickAwayListener>\n\n  // 人気度平均\n  const averagePopularity = _.meanBy(album.tracks, (t) => t.popularity)\n\n  return (\n    <TableContainer component={Paper} style={{ maxWidth: \"600px\" }}>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              <Grid\n                container\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <ImageCardComponent title={\"\"} src={album.artworkL.url} width={250}\n                  topComponent={<FavoriteComponent favorable_type=\"album\" favorable_id={album.id} contentWidth={250} />}\n                />\n              </Grid>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              { album.name }\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n             <Typography color=\"textSecondary\" variant=\"caption\">\n               { album.copyright }\n             </Typography>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              { `${releaseDate}発売、${album.totalTracks}曲、${timeConversion(ms)}` }\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              <ShareButtonComponent album={album} />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2}>\n              <MusicServiceButtonComponent album={album} />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell style={{ width: 100 }} align=\"center\">\n              {previewOrPlayLabel}\n            </TableCell>\n            <TableCell>タイトル</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {album.tracks.map((track, i) => {\n            return <PreviewPlayerItemComponent\n              key={i}\n              track={track}\n              index={i}\n              playAction={playAction}\n              averagePopularity={averagePopularity}\n            />\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default PreviewPlayerComponent\n","import React, { useEffect } from 'react';\nimport { useAlbumQuery, Album } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport ArtistsLayout from '../../artist/list/ArtistsLayout';\nimport PreviewPlayerComponent from '../../../components/player/PreviewPlayerComponent';\nimport ReactGA from 'react-ga';\n\n// TODO: このファイル汚すぎるのでリファクタすること\nconst AlbumInfoLayout = () => {\n  const { id } = useParams()\n  const { loading, error, data } = useAlbumQuery({ variables: { id: id } })\n\n  // SEO対策\n  // 説明は PreviewPlayerComponent で追記している\n  useEffect(() => {\n    if (data && data.album) {\n      const titles = document.title.split(\"-\")\n      document.title = `${data.album.name} - ${titles[titles.length - 1].trim()}`\n\n      // トラッキング\n      ReactGA.pageview(window.location.pathname + window.location.search);\n      console.log(window.location.pathname + window.location.search)\n    }\n\n    return () => { document.title = \"ゲーム音楽\" }\n  }, [data])\n\n  if (error) return <div>{error.message}</div>\n\n  let content = <></>\n\n  if(!loading && data && data.album) {\n    const album_content = <PreviewPlayerComponent album={data.album as Album} />\n\n    content =\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n        >\n          <Grid item>\n            {album_content}\n          </Grid>\n          <Grid item>\n            <ArtistsLayout />\n          </Grid>\n      </Grid>\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item>\n        {content}\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AlbumInfoLayout\n","import React, { useContext, useRef, useState } from 'react';\nimport { TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody, Grid, ClickAwayListener, Tooltip, IconButton } from '@material-ui/core';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport PreviewPlayerItemComponent from '../../../components/player/PreviewPlayerItemComponent';\nimport { useTracksQuery, TracksQueryVariables, Track } from '../../../graphql/types.d';\nimport useParameters, { ParameterPrefixKeys, ParameterKeys } from '../../../hooks/useParameters';\nimport PlayerContext from '../../../hooks/playerContext';\nimport SearchKeywordComponent from '../../../components/search/SearchKeywordComponent';\nimport OrderComponent from '../../../components/search/OrderComponent';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Player from '../../../components/player/Player';\n\nconst TracksLayout = () => {\n  const [order, setOrder] = useState<string>(\"NAME.DESC\")\n  const parameters = useParameters<TracksQueryVariables>(\"track\")\n  const [openPreviewInfo, setOpenPreviewInfo] = useState(false)\n  const [openTitleInfo, setOpenTitleInfo] = useState(false)\n  const { dispatch } = useContext(PlayerContext)\n\n  const location = useLocation()\n  let history = useHistory()\n\n  const limit = 50\n  const { error, data, loading } = useTracksQuery(\n    {\n      variables: {\n        cursor: {\n          offset: 0,\n          limit: limit,\n        },\n        sort: parameters.sort,\n        conditions: parameters.conditions,\n      },\n      // 戻るボタンで戻っても最初から読み込みが発生しない\n      fetchPolicy: \"cache-first\"\n    }\n  )\n\n  // 並び順初期化\n  const _order = parameters?.sort ? `${parameters?.sort?.order}.${parameters?.sort?.type}` : null\n  if(_order && order !== _order){\n    setOrder(_order)\n  }\n\n  // プレビュー画面表示時に初期化される\n  const initPlayer = useRef<boolean>(true);\n  const playAction = (no:number) => {\n    if (!data?.items) return\n\n    if(initPlayer.current) {\n      const _player = new Player({\n        linkUrl: `${location.pathname}${location.search}`,\n        tracks: data.items as Track[],\n        dispatch,\n        canFullPlayAppleMusic: false\n      })\n\n      dispatch({ type: \"SET_PLAYER\", player: _player })\n      initPlayer.current = false\n    }\n    dispatch({ type: \"PLAY\", no })\n  }\n\n  if (error) return <div>{error.message}</div>\n\n  if (loading) {\n    // 読み込みが発生するたびにプレイヤーをリセットする\n    initPlayer.current = true\n  }\n\n  if (!data?.items) return <></>\n\n  const handleChange = (event: React.ChangeEvent<{\n    name?: string | undefined\n    value: unknown\n  }>, _child: React.ReactNode) => {\n    const sort = event.target.value as string\n    const [order, sortType] = sort.split(\".\")\n    setOrder(sort)\n    const params = new URLSearchParams(history.location.search)\n    params.set(ParameterPrefixKeys.track + ParameterKeys.order, order)\n    params.set(ParameterPrefixKeys.track + ParameterKeys.sortType, sortType)\n    history.push(`${history.location.pathname}?${params.toString()}`)\n  }\n\n  return (\n    <Grid\n    container\n    spacing={2}\n    direction=\"column\"\n    justify=\"center\"\n    alignItems=\"center\"\n  >\n    <Grid item>\n      <Grid\n        container\n        spacing={2}\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item>\n          <SearchKeywordComponent type={\"track\"}/>\n        </Grid>\n        <Grid item>\n          <OrderComponent\n            label=\"アルバム表示順\"\n            value={order}\n            onChange={handleChange}\n            minWidth={150}\n            selectItems={[\n              { label: \"名前降順\", value: \"NAME.DESC\" },\n              { label: \"名前昇順\", value: \"NAME.ASC\" },\n              { label: \"追加日新しい順\", value: \"NEW.DESC\" },\n              { label: \"追加日古い順\", value: \"NEW.ASC\" },\n              { label: \"人気順\", value: \"POPULARITY.DESC\" },\n            ]}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n    <Grid item>\n      <TableContainer component={Paper} style={{ maxWidth: \"1000px\" }}>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell style={{ width: 100 }} align=\"center\">\n                試聴\n                <ClickAwayListener onClickAway={()=>setOpenPreviewInfo(false)}>\n                  <Tooltip\n                    PopperProps={{\n                      disablePortal: true,\n                    }}\n                    onClose={()=>setOpenPreviewInfo(false)}\n                    open={openPreviewInfo}\n                    disableFocusListener\n                    disableHoverListener\n                    disableTouchListener\n                    placement=\"top-start\"\n                    title={ \"Apple Music または Spotify のプレビューURLによるストリーミング試聴\" }\n                  >\n                    <IconButton size=\"small\" onClick={()=>setOpenPreviewInfo(true)}>\n                      <InfoIcon fontSize=\"small\" />\n                    </IconButton>\n                  </Tooltip>\n                </ClickAwayListener>\n              </TableCell>\n              <TableCell>\n                タイトル\n                <ClickAwayListener onClickAway={()=>setOpenTitleInfo(false)}>\n                  <Tooltip\n                    PopperProps={{\n                      disablePortal: true,\n                    }}\n                    onClose={()=>setOpenTitleInfo(false)}\n                    open={openTitleInfo}\n                    disableFocusListener\n                    disableHoverListener\n                    disableTouchListener\n                    placement=\"top-start\"\n                    title={ \"50件までの検索結果が表示されます\" }\n                  >\n                    <IconButton size=\"small\" onClick={()=>setOpenTitleInfo(true)}>\n                      <InfoIcon fontSize=\"small\" />\n                    </IconButton>\n                  </Tooltip>\n                </ClickAwayListener>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(data.items as Track[]).map((track, i) => {\n              return <PreviewPlayerItemComponent\n                        key={i}\n                        track={track}\n                        index={i}\n                        playAction={playAction}\n                        averagePopularity={100}\n                      />\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Grid>\n  </Grid>\n  )\n}\n\nexport default TracksLayout\n","import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { FormControl, InputLabel, Input, Button, TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\nimport { useLoginMutation, LoginPayload, CurrentUser } from '../../../graphql/types.d';\nimport UserContext from '../../../hooks/userContext';\nimport InformationContext from '../../../hooks/informationContext';\nimport { useHistory } from 'react-router-dom';\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nconst UserLoginLayout = () => {\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const userContext = useContext(UserContext)\n  const infoContext = useContext(InformationContext)\n  let history = useHistory()\n\n  const [token, setToken] = useState(\"\")\n  const recaptchaRef = useRef<ReCAPTCHA>() as React.RefObject<ReCAPTCHA>\n\n  useEffect(() => {\n    if(token) document.cookie = `reCAPTCHAv2Token=${token}; max-age=300; path=/;`\n    return () => { document.cookie = `reCAPTCHAv2Token=; max-age=300; path=/;` }\n  }, [token])\n\n  // ログイン済みの場合はリターン\n  useEffect(() => {\n    if(userContext.state.user?.registered) {\n      history.push(\"/albums\")\n      infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"info\", duration: 5000, text: \"ログイン済みです\", buttonText: \"OK\" })\n    }\n  }, [userContext, infoContext, history])\n\n  interface LoginResponse {\n    data: { login: LoginPayload }\n  }\n  const [login] = useLoginMutation({\n    update: (_, response:LoginResponse) => {\n      if (response.data.login.error) {\n        recaptchaRef?.current?.reset()\n        infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"error\", duration: 5000, text: response.data.login.error, buttonText: \"OK\" })\n      } else {\n        history.push(\"/albums\")\n        userContext.dispatch({ type: \"SET_USER\", user: response.data.login.currentUser as CurrentUser })\n        infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"success\", duration: 5000, text: \"ログインしました。\", buttonText: \"OK\" })\n      }\n    },\n    variables: { input: { username, password } },\n  })\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" style={{ border: 'none' }}>ログイン</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow >\n            <TableCell align=\"center\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n                <InputLabel>ユーザーID</InputLabel>\n                <Input value={username} onChange={e => setUsername(e.target.value || \"\")}/>\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow >\n             <TableCell align=\"center\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n                <InputLabel>パスワード</InputLabel>\n                <Input value={password} onChange={e => setPassword(e.target.value || \"\")} type=\"password\" />\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow >\n            <TableCell align=\"center\" style={{ border: 'none' }}>\n              <ReCAPTCHA\n                ref={recaptchaRef}\n                sitekey={process.env.REACT_APP_RECAPTCHA_KEY || \"\"}\n                onChange={_token => setToken(_token as string)}\n              />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">\n              <Button disabled={!username || !password || !token} variant=\"contained\" onClick={() => {login();setToken(\"\")}}>ログインする</Button>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default UserLoginLayout\n","import React, { useEffect, useContext } from 'react';\nimport { useLogoutMutation, LogoutPayload, CurrentUser } from '../../../graphql/types.d';\nimport UserContext from '../../../hooks/userContext';\nimport InformationContext from '../../../hooks/informationContext';\nimport { useHistory } from 'react-router-dom';\nimport SecureCookies from '../../../lib/SecureCookies';\nimport PlayerContext from '../../../hooks/playerContext';\n\nconst UserLogoutLayout = () => {\n  const userContext = useContext(UserContext)\n  const infoContext = useContext(InformationContext)\n  const playerContext = useContext(PlayerContext)\n  let history = useHistory()\n\n  interface LogoutResponse {\n    data: { logout: LogoutPayload }\n  }\n  const [logout] = useLogoutMutation({\n    update: (_, response:LogoutResponse) => {\n      if (response.data.logout.error) {\n        infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"error\", duration: 5000, text: response.data.logout.error, buttonText: \"OK\" })\n      } else {\n        history.push(\"/\")\n        userContext.dispatch({ type: \"SET_USER\", user: response.data.logout.currentUser as CurrentUser })\n        infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"success\", duration: 5000, text: \"ログアウトしました\", buttonText: \"OK\" })\n        playerContext.dispatch({ type: \"STOP\" })\n\n        // 全音楽サービスログアウト\n        try {\n          if(MusicKit.getInstance().isAuthorized) MusicKit.getInstance().unauthorize()\n        } catch {}\n\n        const cookie = new SecureCookies()\n        cookie.remove(\"spotifyAccessToken\")\n        cookie.remove(\"spotifyRefreshToken\")\n        cookie.remove(\"spotifyDeviceId\")\n      }\n    },\n    variables: { input: {} },\n  })\n\n  useEffect(() => {\n    logout()\n  }, [logout])\n\n  return <></>\n}\n\nexport default UserLogoutLayout\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Button, TableContainer, Paper, Table, TableBody, TableRow, TableCell, TableHead, ClickAwayListener, Tooltip, IconButton } from '@material-ui/core';\nimport UserContext from '../../../hooks/userContext';\nimport { Link, useHistory } from 'react-router-dom';\nimport InfoIcon from '@material-ui/icons/Info';\nimport useMusicKitAuthentication from '../../../hooks/useMusicKit/useMusicKitAuthentication';\nimport InformationContext from '../../../hooks/informationContext';\nimport useSpotifyAuthentication from '../../../hooks/useSpotify/useSpotifyAuthentication';\n\nconst UserMeLayout = () => {\n  const userContext = useContext(UserContext)\n  const infoContext = useContext(InformationContext)\n  let history = useHistory()\n\n  const [openInfoPublicInformation, setOpenInfoPublicInformation] = useState(false)\n  const [openInfoMusicServiceLogin, setOpenInfoMusicServiceLogin] = useState(false)\n\n  const publicTypes = userContext.state.user?.publicInformations?.map(p=>p.publicType) || []\n  const publicArtist = publicTypes.includes(\"artist\") ? \"公開する\" : \"公開しない\"\n  const publicAlbum  = publicTypes.includes(\"album\") ? \"公開する\" : \"公開しない\"\n\n  const apple   = useMusicKitAuthentication()\n  const spotify = useSpotifyAuthentication()\n\n  // 未ログインの場合は登録画面へ\n  useEffect(() => {\n    if(userContext.state.user?.registered === false) {\n      history.push(\"/signup\")\n      infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"info\", duration: 20000, text: \"ユーザー登録後にユーザー情報が変更できます\", buttonText: \"OK\" })\n    }\n  }, [userContext, infoContext, history])\n\n  const canLoginToApple = userContext.state.user?.role.allowedActions.includes(\"appleMusicToken\")\n  const appleLoginButton = apple.isAuthorized ?\n    <Button disabled={!canLoginToApple} onClick={() => { apple.authentication.logout(); window.location.reload() }} variant=\"contained\">ログアウト</Button> :\n    <Button disabled={!canLoginToApple} onClick={() => apple.authentication.login()} variant=\"contained\">ログイン</Button>\n\n  const canLoginToSpotify = userContext.state.user?.role.allowedActions.includes(\"spotifyToken\")\n  const spotifyLoginButton = spotify.isAuthorized ?\n    <Button disabled={!canLoginToSpotify} onClick={() => { spotify.authentication.logout(); window.location.reload() }} variant=\"contained\">ログアウト</Button> :\n    <Button disabled={!canLoginToSpotify} onClick={() => spotify.authentication.login()} variant=\"contained\">ログイン</Button>\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={2} align=\"center\" style={{ border: 'none' }}>ユーザー情報</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow >\n            <TableCell align=\"right\" style={{ border: 'none' }}>ユーザー名</TableCell>\n            <TableCell align=\"left\" style={{ border: 'none' }}>{userContext.state.user?.name}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"right\" style={{ border: 'none' }}>ユーザーID</TableCell>\n            <TableCell align=\"left\" style={{ border: 'none' }}>{userContext.state.user?.username}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"right\">権限</TableCell>\n            <TableCell align=\"left\">{userContext.state.user?.role.description}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={2} align=\"center\" style={{ border: 'none' }}>\n              公開情報\n              <ClickAwayListener onClickAway={()=>setOpenInfoPublicInformation(false)}>\n                <Tooltip\n                  PopperProps={{\n                    disablePortal: true,\n                  }}\n                  onClose={()=>setOpenInfoPublicInformation(false)}\n                  open={openInfoPublicInformation}\n                  disableFocusListener\n                  disableHoverListener\n                  disableTouchListener\n                  placement=\"top\"\n                  title=\"お気に入りが公開できます。\"\n                >\n                  <IconButton size=\"small\" onClick={()=>setOpenInfoPublicInformation(true)}>\n                    <InfoIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              </ClickAwayListener>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <TableCell align=\"right\" style={{ border: 'none' }}>好きなアーティスト</TableCell>\n            <TableCell align=\"left\" style={{ border: 'none' }}>{publicArtist}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"right\">好きなアルバム</TableCell>\n            <TableCell align=\"left\">{publicAlbum}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={2} align=\"center\" style={{ border: 'none' }}>\n              音楽サービス連携\n              <ClickAwayListener onClickAway={()=>setOpenInfoMusicServiceLogin(false)}>\n                <Tooltip\n                  PopperProps={{\n                    disablePortal: true,\n                  }}\n                  onClose={()=>setOpenInfoMusicServiceLogin(false)}\n                  open={openInfoMusicServiceLogin}\n                  disableFocusListener\n                  disableHoverListener\n                  disableTouchListener\n                  placement=\"top\"\n                  title=\"ログインするとフル再生とライブラリ追加ができるようになります。\"\n                >\n                  <IconButton size=\"small\" onClick={()=>setOpenInfoMusicServiceLogin(true)}>\n                    <InfoIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              </ClickAwayListener>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <TableCell align=\"right\" style={{ border: 'none' }}>Apple Music</TableCell>\n            <TableCell align=\"left\" style={{ border: 'none' }}>\n              {appleLoginButton}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"right\">Spotify</TableCell>\n            <TableCell align=\"left\">\n              {spotifyLoginButton}\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={2} align=\"center\">\n              <Button component={Link} to={\"/me/edit\"} variant=\"contained\">更新する</Button>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default UserMeLayout\n","import React, { useState, useContext, useEffect } from 'react';\nimport { FormControl, InputLabel, Input, Button, TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody, Select, MenuItem } from '@material-ui/core';\nimport { useUpdateMeMutation, UpdateMePayload, UpdateMeInput, CurrentUser } from '../../../graphql/types.d';\nimport UserContext from '../../../hooks/userContext';\nimport { useHistory } from 'react-router-dom';\nimport InformationContext from '../../../hooks/informationContext';\n\nconst UserMeEditLayout = () => {\n  const [setup, setSetup] = useState(true)\n  const [name, setName] = useState(\"\")\n  const [isPublicArtist, setIsPublicArtist] = useState(0)\n  const [isPublicAlbum, setIsPublicAlbum] = useState(0)\n  const [oldPassword, setOldPassword] = useState(\"\")\n  const [newPassword, setNewPassword] = useState(\"\")\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\")\n  const [input, setInput] = useState<UpdateMeInput>({ isPublicArtist: false, isPublicAlbum: false })\n  const userContext = useContext(UserContext)\n  const infoContext = useContext(InformationContext)\n  let history = useHistory()\n\n  // カレントユーザーデフォルト値\n  useEffect(() => {\n    if(userContext.state.user && setup){\n      setSetup(false)\n      setName(userContext.state.user.name)\n      const publicTypes = userContext.state.user.publicInformations.map(p=>p.publicType)\n      const publicArtist = publicTypes.includes(\"artist\")\n      setIsPublicArtist(publicArtist ? 1 : 0)\n      const publicAlbum = publicTypes.includes(\"album\")\n      setIsPublicAlbum(publicAlbum ? 1 : 0)\n      setInput({ ...input, isPublicArtist: publicArtist, isPublicAlbum: publicAlbum })\n\n      // 詳細情報はログに出しておく\n      if(userContext.state.user){\n        console.log({ id: userContext.state.user.id })\n        console.log({ role: userContext.state.user.role.allowedActions })\n      }\n    }\n  }, [userContext.state, setup, input])\n\n  // カレントユーザー更新\n  interface UpdateMeResponse {\n    data: { updateMe: UpdateMePayload }\n  }\n  const [updateMe] = useUpdateMeMutation({\n    update: (_, response:UpdateMeResponse) => {\n      if (response.data.updateMe.error) {\n        infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"error\", duration: 20000, text: response.data.updateMe.error, buttonText: \"OK\" })\n      } else {\n        history.push(\"/me\")\n        userContext.dispatch({ type: \"SET_USER\", user: response.data.updateMe.currentUser as CurrentUser })\n        infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"success\", duration: 10000, text: \"更新しました\", buttonText: \"OK\" })\n      }\n    },\n    variables: { input },\n  })\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={2} align=\"center\" style={{ border: 'none' }}>ユーザー情報更新</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow >\n            <TableCell align=\"center\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n                <InputLabel>名前</InputLabel>\n                <Input value={name} onChange={e => {\n                  setName(e.target.value || \"\")\n                  setInput({ ...input, name: (e.target.value || \"\") })\n                }}/>\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell colSpan={2} align=\"center\">\n              <Button onClick={() => updateMe()} variant=\"contained\">更新する</Button>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={2} align=\"center\" style={{ border: 'none' }}>公開情報更新</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow >\n            <TableCell align=\"right\" style={{ border: 'none' }}>\n              お気に入りアーティストを\n            </TableCell>\n            <TableCell align=\"left\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n              <Select\n                value={isPublicArtist}\n                onChange={(e)=>{\n                  const publicArtist = e.target.value as number\n                  setIsPublicArtist(publicArtist)\n                  setInput({ ...input, isPublicArtist: !!publicArtist })\n                }}\n              >\n                <MenuItem value={0}>公開しない</MenuItem>\n                <MenuItem value={1}>公開する</MenuItem>\n              </Select>\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow >\n            <TableCell align=\"right\" style={{ border: 'none' }}>\n              お気に入りアルバムを\n            </TableCell>\n            <TableCell align=\"left\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n              <Select\n                value={isPublicAlbum}\n                onChange={(e)=>{\n                  const publicAlbum = e.target.value as number\n                  setIsPublicAlbum(publicAlbum)\n                  setInput({ ...input, isPublicAlbum: !!publicAlbum })\n                }}\n              >\n                <MenuItem value={0}>公開しない</MenuItem>\n                <MenuItem value={1}>公開する</MenuItem>\n              </Select>\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell colSpan={2} align=\"center\">\n              <Button onClick={() => updateMe()} variant=\"contained\">更新する</Button>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={2} align=\"center\" style={{ border: 'none' }}>パスワード変更</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow >\n            <TableCell align=\"center\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n                <InputLabel>旧パスワード</InputLabel>\n                <Input value={oldPassword} onChange={e => {\n                  setOldPassword(e.target.value || \"\")\n                  setInput({ ...input, oldPassword: (e.target.value || \"\") })\n                }} type=\"password\" />\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow >\n            <TableCell align=\"center\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n                <InputLabel>新パスワード</InputLabel>\n                <Input value={newPassword} onChange={e => {\n                  setNewPassword(e.target.value || \"\")\n                  setInput({ ...input, newPassword: (e.target.value || \"\") })\n                }} type=\"password\" />\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow >\n            <TableCell align=\"center\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n                <InputLabel>新パスワードの再確認</InputLabel>\n                <Input value={passwordConfirmation} onChange={e => {\n                  setPasswordConfirmation(e.target.value || \"\")\n                  setInput({ ...input, passwordConfirmation: (e.target.value || \"\") })\n                }} type=\"password\" />\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell colSpan={2} align=\"center\">\n              <Button onClick={() => updateMe()} variant=\"contained\">変更する</Button>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default UserMeEditLayout\n","import React, { useContext } from 'react';\nimport { Grid, IconButton, makeStyles, Theme, Typography } from '@material-ui/core';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport PauseIcon from '@material-ui/icons/Pause'\nimport AutorenewIcon from '@material-ui/icons/Autorenew'\nimport PlayerContext, { PlaybackStatus, LoadingStatus } from '../../hooks/playerContext';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport ImageCardComponent from '../../components/imageCard/ImageCardComponent';\n\nconst useStyles = makeStyles((_theme: Theme) => ({\n  '@keyframes loading-icon-spin': {\n    from: { transform: 'rotate(0deg)' },\n    to: { transform: 'rotate(360deg)' },\n  },\n  loadingIcon: {\n    height: 35,\n    width: 35,\n    animationName: '$loading-icon-spin',\n    animationDuration: '2000ms',\n    animationIterationCount: 'infinite',\n    animationTimingFunction: 'linear',\n  }\n}))\n\nconst PreviewPlayerLayout = () => {\n  const { state, dispatch } = useContext(PlayerContext)\n  const classes = useStyles()\n\n  let playbackButton = <></>\n  let skipButton =\n    <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"NEXT_PLAY\" })}>\n      <SkipNextIcon fontSize=\"large\" />\n    </IconButton>\n\n  if(state.loadingStatus === LoadingStatus.Loading) {\n    // TODO: 今の所ローディング表示はしていないのでいらないかも、要確認\n    playbackButton =\n      <IconButton aria-label=\"loading\" disabled={true}>\n        <AutorenewIcon className={classes.loadingIcon} />\n      </IconButton>\n    skipButton = playbackButton\n  } else {\n    switch(state.playbackStatus) {\n      case PlaybackStatus.None:\n        playbackButton =\n          <IconButton color=\"inherit\" disabled={true}>\n            <PlayArrowIcon fontSize=\"large\" />\n          </IconButton>\n        skipButton =\n          <IconButton color=\"inherit\" disabled={true}>\n            <SkipNextIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n      case PlaybackStatus.Play:\n        playbackButton =\n          <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"PAUSE\" })}>\n            <PauseIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n      case PlaybackStatus.Pause:\n        playbackButton =\n          <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"PLAY\" })}>\n            <PlayArrowIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n      case PlaybackStatus.Stop:\n        playbackButton =\n          <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"PLAY\", no: 0 })}>\n            <PlayArrowIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n    }\n  }\n\n  let artwork_content = <></>\n  let title_content = <></>\n  if(state.player.tracks[state.currentNo]){\n    const track = state.player.tracks[state.currentNo]\n    if(track.artworkM?.url) {\n      artwork_content =\n        <ImageCardComponent linkUrl={`${state.player.linkUrl}#${track.id}`} title={\"\"} src={track.artworkM.url} width={40} />\n    }\n    title_content =\n      <Typography style={{\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\"\n      }} variant=\"caption\" component=\"p\">{track.name}</Typography>\n  }\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"center\"\n    >\n      <Grid item xs={5}>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={1}></Grid>\n          <Grid item xs={3}>\n            {artwork_content}\n          </Grid>\n          <Grid item xs={1}></Grid>\n          <Grid item xs={7}>\n            {title_content}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={2}>\n        <Grid\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            {playbackButton}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={2}>\n        <Grid\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            {skipButton}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={2}></Grid>\n      <Grid item xs={1}>{/* ダミー */}</Grid>\n    </Grid>\n  )\n}\n\nexport default PreviewPlayerLayout\n","import React from 'react';\nimport { AppBar } from '@material-ui/core';\nimport PreviewPlayerLayout from '../player/PreviewPlayerLayout';\n\n// ref: https://material-ui.com/components/app-bar/#elevate-app-bar\nconst PlayerBar = () =>\n  <AppBar position=\"fixed\" color=\"secondary\" style={{ top: 'auto', bottom: 0 }}>\n    <PreviewPlayerLayout />\n  </AppBar>\n\nexport default PlayerBar\n","import React, { useEffect } from 'react';\nimport { Card, CardContent } from '@material-ui/core';\nimport ReactGA from 'react-ga'\nimport ReactMarkdown from 'react-markdown'\n\nconst InformationLayout = (markdown:string) => {\n\n  // トラッキング\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname + window.location.search);\n    console.log(window.location.pathname + window.location.search)\n  }, [])\n\n  return <Card>\n    <CardContent>\n      <ReactMarkdown\n        source={markdown}\n        escapeHtml={true}\n      />\n    </CardContent>\n  </Card>\n}\n\nexport default InformationLayout\n","import InformationLayout from './InformationLayout'\nimport Cookies from 'js-cookie'\n\nconst AboutLayout = () => InformationLayout(`\n# このサイトについて\n\n## 概要\n音楽サブスクリプション配信中のゲーム音楽を検索できるサイトです。非商用で公開しています。\n\n## 目的\n私が新しいゲーム音楽に出会うために公開しています。今後、お気に入り共有機能やプレイリスト機能などの実装により、ユーザー同士でゲーム音楽を共有できるよう開発を進めています。\n\n## SNS, 開発プロジェクトなど\n* [Twitter](https://twitter.com/vgm_net)\n* [note](https://note.com/himanushi/n/nd598a3d92a15)\n* [Github](https://github.com/users/himanushi/projects/2)\n\n## 問い合わせ\n[Twitter にてダイレクトメッセージをお願いします](https://twitter.com/vgm_net)\n\n###### ファイルバージョン\n###### ${Cookies.get(\"jsFileVersion\")}\n`)\n\nexport default AboutLayout\n","import InformationLayout from './InformationLayout'\n\nconst TermsLayout = () => InformationLayout(`\n# 利用規約\nこの利用規約(以下、「当規約」といいます。)は、ゲーム音楽(https://video-game-music.net/)(以下「当ページ」と言います。)で提供するサービス(以下、「当サービス」といいます。)の利用条件を定めるものです。ユーザーの皆さまには、当規約に従っていただきます。\n\n## 第1条(当規約の適用)\n当規約は、ユーザーと当ページの当サービスの利用に関わる一切の関係に適用されます。\n当ページについて、当規約のほか、ご利用にあたってのルール等、各種の定め(以下、「個別規定」といいます。)が定められる場合これら個別規定はその名称いかんに関わらず、当規約の一部を構成するものとします。\n\n## 第2条(利用登録)\n当サービスにおいては、登録希望者が当規約に同意の上、当ページの定める方法によって利用登録を申請によって、利用登録が完了するものとします。\n但し、当ページは、利用登録の申請者に以下の事由があると判断した場合、当該登録を削除することがあり、その理由については一切の開示義務を負わないものとします。\n* 利用登録の申請に際して虚偽の事項を届け出た場合\n* 当規約に違反したことがある者からの再登録である場合\n* その他、当ページが利用登録を相当でないと判断した場合\n\n## 第3条(ユーザーIDおよびパスワードの管理)\nユーザーは、自己の責任において、当サービスのユーザーIDおよびパスワードを適切に管理するものとします。\nユーザーは、いかなる場合にも、ユーザーIDおよびパスワードを第三者に譲渡または貸与し、もしくは第三者と共用することはできません。当ページは、ユーザーIDとパスワードの組み合わせが登録情報と一致してログインされた場合には、そのユーザーIDを登録しているユーザー自身による利用とみなします。\nユーザーID及びパスワードが第三者によって使用されたことによって生じた損害は、当ページは一切の責任を負わないものとします。\n\n## 第4条(禁止事項)\n当サービスの利用にあたり、以下の行為を禁止します。\n* 当ページを利用し、当ページ外において、ユーザーから第三者に対する登録楽曲の公衆送信や譲渡、その他著作権法の規定に反する行為\n* その他、登録元ページに対する一切の知的財産権を侵害する行為\n* その他、法令または公序良俗に違反する行為\n* 犯罪行為に関連する行為\n* 当ページ、ほかのユーザー、またはその他第三者のサーバーまたはネットワークの機能を破壊したり、妨害したりする行為\n* 当サービスによって得られた情報を商業的に利用する行為\n* 当ページのサービスの運営を妨害するおそれのある行為\n* 不正アクセスをし、またはこれを試みる行為\n* 他のユーザーに関する個人情報等を収集または蓄積する行為\n* その他、不正な目的を持って当サービスを利用する行為\n* 当ページが許諾しない当サービス上での宣伝、広告、勧誘、または営業行為\n* 面識のない異性との出会いを目的とした行為\n* 当ページのサービスに関連して、反社会的勢力に対して直接または間接に利益を供与する行為\n* その他、当ページが不適切と判断する行為\n\n## 第5条(当サービスの提供の停止等)\n当ページは、以下のいずれかの事由があると判断した場合、ユーザーに事前に通知することなく当サービスの全部または一部の提供を停止または中断することができるものとします。\n* 当サービスにかかるコンピュータシステムの保守点検または更新を行う場合\n* 地震、落雷、火災、停電または天災などの不可抗力により、当サービスの提供が困難となった場合\n* コンピュータまたは通信回線等が事故により停止した場合\n* その他、当ページが当サービスの提供が困難と判断した場合\n当ページは、当サービスの提供の停止または中断により、ユーザーまたは第三者が被ったいかなる不利益または損害についても、一切の責任を負わないものとします。\n\n## 第6条(利用制限および登録抹消)\n当ページは、ユーザーが以下のいずれかに該当する場合には、事前の通知なく、ユーザーに対して、当サービスの全部もしくは一部の利用を制限し、またはユーザーとしての登録を抹消することができるものとします。\n* 当規約のいずれかの条項に違反した場合\n* 登録事項に虚偽の事実があることが判明した場合\n* 当ページからの連絡に対し、一定期間返答がない場合\n* 当サービスについて、最終の利用から一定期間利用がない場合\n* その他、当ページが当サービスの利用を適当でないと判断した場合\n当ページは、本条に基づき当ページが行った行為によりユーザーに生じた損害について、一切の責任を負いません。\n\n## 第7条(保証の否認および免責事項)\n当ページは、当サービスに事実上または法律上の瑕疵(安全性、信頼性、正確性、完全性、有効性、特定の目的への適合性、セキュリティなどに関する欠陥、エラーやバグ、権利侵害などを含みます。)がないことを明示的にも黙示的にも保証しておりません。\n当ページは、当サービスに起因してユーザーに生じたあらゆる損害について一切の責任を負いません。\n当ページは、当サービスに関して、ユーザーと他のユーザーまたは第三者との間において生じた取引、連絡または紛争等について一切責任を負いません。\n\n## 第8条(サービス内容の変更等)\n当ページは、ユーザーに通知することなく、当サービスの内容を変更しまたは当サービスの提供を中止することができるものとし、これによってユーザーに生じた損害について一切の責任を負いません。\n\n## 第9条(利用規約の変更)\n当ページは、必要と判断した場合には、ユーザーに通知することなくいつでも当規約を変更することができるものとします。なお、当規約の変更後、当サービスの利用を開始した場合には、当該ユーザーは変更後の規約に同意したものとみなします。\n\n## 第10条(個人情報の取扱い)\n当ページは、当サービスの利用によって取得する個人情報については、当ページ「プライバシーポリシー」に従い適切に取り扱うものとします。\n\n## 第13条(通知または連絡)\nユーザーと当ページとの間の通知または連絡は、当ページの定める方法によって行うものとします。当ページは、ユーザーから、当ページが別途定める方式に従った変更届け出がない限り、現在登録されている連絡先が有効なものとみなして当該連絡先へ通知または連絡を行い、これらは、発信時にユーザーへ到達したものとみなします。\n\n## 第14条(権利義務の譲渡の禁止)\nユーザーは、当ページの書面による事前の承諾なく、利用契約上の地位または当規約に基づく権利もしくは義務を第三者に譲渡し、または担保に供することはできません。\n\n## 第15条(準拠法・裁判管轄)\n当規約の解釈にあたっては、日本法を準拠法とします。\n当サービスに関して紛争が生じた場合には、東京地方裁判所を管轄する裁判所を専属的合意管轄とします。\n\n以上\n\n2020年9月14日制定\n`)\n\nexport default TermsLayout\n","import InformationLayout from './InformationLayout'\n\nconst PrivacyLayout = () => InformationLayout(`\n# プライバシーポリシー\nゲーム音楽(https://video-game-music.net/)(以下「当ページ」と言います。)で提供するサービス(以下、「当サービス」といいます。)における、ユーザーの個人情報の取扱いについて、以下のとおりプライバシーポリシー(以下、「本ポリシー」といいます。)を定めます。\n\n## 第1条(個人情報)\n「個人情報」とは、個人情報保護法にいう「個人情報」を指すものとし、生存する個人に関する情報であって、当該情報に含まれる氏名、生年月日、住所、電話番号、連絡先その他の記述等により特定の個人を識別できる情報及び容貌、指紋、声紋にかかるデータ、及び健康保険証の保険者番号などの当該情報単体から特定の個人を識別できる情報(個人識別情報)を指します。\n\n## 第2条(個人情報の収集方法)\n当ページは、ユーザーが利用登録をする際に氏名、生年月日、住所、電話番号、メールアドレス、運転免許証番号などの個人情報をお尋ねすることがあります。また、ユーザーと提携先などとの間でなされたユーザーの個人情報を含む取引記録や決済に関する情報を、当サービスの提携先(情報提供元、広告主、広告配信先などを含みます。以下、｢提携先｣といいます。)などから収集することがあります。\n\n## 第3条(個人情報を収集・利用する目的)\n当ページが個人情報を収集・利用する目的は、以下のとおりです。\n\n* 当サービスの提供・運営のため\n* ユーザーからのお問い合わせに回答するため(本人確認を行うことを含む)\n* ユーザーが利用中のサービスの新機能、更新情報、キャンペーン等及び当サービスが提供する他のサービスの案内のメールを送付するため\n* メンテナンス、重要なお知らせなど必要に応じたご連絡のため\n* 利用規約に違反したユーザーや、不正・不当な目的で当サービスを利用しようとするユーザーの特定をし、ご利用をお断りするため\n* ユーザーにご自身の登録情報の閲覧や変更、削除、ご利用状況の閲覧を行っていただくため\n* 上記の利用目的に付随する目的\n\n## 第4条(利用目的の変更)\n1. 当ページは、利用目的が変更前と関連性を有すると合理的に認められる場合に限り、個人情報の利用目的を変更するものとします。\n2. 利用目的の変更を行った場合には、変更後の目的について、所定の方法により、ユーザーに通知し、または本ウェブサイト上に公表するものとします。\n\n## 第5条(個人情報の第三者提供)\n1. 当ページは、次に掲げる場合を除いて、あらかじめユーザーの同意を得ることなく、第三者に個人情報を提供することはありません。ただし、個人情報保護法その他の法令で認められる場合を除きます。\n    * 国の機関もしくは地方公共団体またはその委託を受けた者が法令の定める事務を遂行することに対して協力する必要がある場合であって、本人の同意を得ることにより当該事務の遂行に支障を及ぼすおそれがあるとき\n    * 予め次の事項を告知あるいは公表し、かつ当社が個人情報保護委員会に届出をしたとき\n    * 利用目的に第三者への提供を含むこと\n    * 第三者に提供されるデータの項目\n    * 第三者への提供の手段または方法\n    * 本人の求めに応じて個人情報の第三者への提供を停止すること\n    * 本人の求めを受け付ける方法\n\n2. 前項の定めにかかわらず、次に掲げる場合には、当該情報の提供先は第三者に該当しないものとします。\n    * 当社が利用目的の達成に必要な範囲内において個人情報の取扱いの全部または一部を委託する場合\n    * 合併その他の事由による事業の承継に伴って個人情報が提供される場合\n    * 個人情報を特定の者との間で共同して利用する場合であって、その旨並びに共同して利用される個人情報の項目、共同して利用する者の範囲、利用する者の利用目的および当該個人情報の管理について責任を有する者の氏名または名称について、あらかじめ本人に通知し、または本人が容易に知り得る状態に置いた場合\n\n## 第6条(個人情報の開示)\n1. 当サービスは、本人から個人情報の開示を求められたときは、本人に対し、遅滞なくこれを開示します。ただし、開示することにより次のいずれかに該当する場合は、その全部または一部を開示しないこともあり、開示しない決定をした場合には、その旨を遅滞なく通知します。なお、個人情報の開示に際しては、1件あたり1、000円の手数料を申し受けます。\n    * 本人または第三者の生命、身体、財産その他の権利利益を害するおそれがある場合\n    * 当サービスの業務の適正な実施に著しい支障を及ぼすおそれがある場合\n    * その他法令に違反することとなる場合\n\n2. 前項の定めにかかわらず、履歴情報および特性情報などの個人情報以外の情報については、原則として開示いたしません。\n\n## 第7条(個人情報の訂正および削除)\n1. ユーザーは、当社の保有する自己の個人情報が誤った情報である場合には、当ページが定める手続きにより、当社に対して個人情報の訂正、追加または削除(以下、「訂正等」といいます。)を請求することができます。\n2. 当ページは、ユーザーから前項の請求を受けてその請求に応じる必要があると判断した場合には、遅滞なく、当該個人情報の訂正等を行うものとします。\n3. 当ページは、前項の規定に基づき訂正等を行った場合、または訂正等を行わない旨の決定をしたときは遅滞なく、これをユーザーに通知します。\n\n## 第8条(個人情報の利用停止等)\n1. 当ページは、本人から、個人情報が、利用目的の範囲を超えて取り扱われているという理由、または不正の手段により取得されたものであるという理由により、その利用の停止または消去(以下、「利用停止等」といいます。)を求められた場合には、遅滞なく必要な調査を行います。\n2. 前項の調査結果に基づき、その請求に応じる必要があると判断した場合には、遅滞なく、当該個人情報の利用停止等を行います。\n3. 当ページは、前項の規定に基づき利用停止等を行った場合、または利用停止等を行わない旨の決定をしたときは、遅滞なく、これをユーザーに通知します。\n4. 前2項にかかわらず、利用停止等に多額の費用を有する場合その他利用停止等を行うことが困難な場合であって、ユーザーの権利利益を保護するために必要なこれに代わるべき措置をとれる場合は、この代替策を講じるものとします。\n\n## 第9条(プライバシーポリシーの変更)\n1. 本ポリシーの内容は、法令その他本ポリシーに別段の定めのある事項を除いて、ユーザーに通知することなく、変更することができるものとします。\n2. 当ページが別途定める場合を除いて、変更後のプライバシーポリシーは、本ウェブサイトに掲載したときから効力を生じるものとします。\n\n## 第10条(お問い合わせ窓口)\n本ポリシーに関するお問い合わせは、下記の窓口までダイレクトメッセージをお願いいたします。\n\nTwitter アカウント : https://twitter.com/vgm_net\n\n以上\n\n2020年9月14日制定\n`)\n\nexport default PrivacyLayout\n","import InformationLayout from './InformationLayout'\n\nconst CookiePolicyLayout = () => InformationLayout(`\n# クッキーポリシー\nゲーム音楽(https://video-game-music.net/)(以下「当ページ」と言います。)で提供するサービス(以下、「当サービス」といいます。)のクッキーポリシー(以下、「当クッキーポリシー」といいます。)を定めます。\n\n## はじめに\n当ページをご利用する場合は、まず当クッキーポリシーをご一読ください。ユーザーが当ページの閲覧を継続する場合は、当クッキーポリシーに同意したものといたします。当クッキーポリシーにご同意いただけない場合は、ブラウザの設定等により、クッキーを無効にしていただきますようお願いいたします。なお、クッキーを無効にされた場合は、当ページの一部の機能をご利用いただけない可能性があります。\n\n## クッキー(Cookie)とは\nクッキーとは、ユーザーのコンピューターやタブレット、スマートフォンなどのインターネット接続可能な機器内に保存される情報のことをいいます。\n当ページでは、セッションクッキー及びパーシステントクッキーと呼ばれるクッキーを利用しています。セッションクッキーは、当ページを閲覧している期間において一時的に保存されるもので、パーシステントクッキーは、当ページを閲覧後もユーザーのコンピューターやタブレット、スマートフォン等に保存され、指定した有効期限又はユーザーが手動で削除するまで期間、保存されるものです。\n\n## 当ページでのクッキーの利用について\n当ページでは、ユーザーの利便性の向上及びサービスの品質維持・向上を目的として、主に以下の用途でクッキーを使用しています。なお、ユーザーの個人情報を取得する目的では使用していません。\n* 最適なウェブサイトの表示、サービス向上のため(文字サイズの変更等)\n* ユーザーが入力された情報を管理するため(マイ・ポートフォリオの銘柄登録等)\n* ウェブサイトのアクセス状況の統計的な調査・分析のため(Google Analytics)\n\n## Google Analytics の利用について\n当ページでは、当ページの利用状況を把握するために Google 社の提供するサービスである Google Analytics を利用しています。Google Analytics は、当サービスが発行するクッキーを利用して当ページの利用状況を分析します。当サービスは、 Google 社からその分析結果(ユーザー属性とインタレストカテゴリに関する Google Analytics レポートなど)を受け取り、当ページの利用状況を把握しております。\nGoogle Analytics により収集、記録、分析された情報には、特定の個人を識別する情報は一切含まれておりません。また、それらの情報は、 Google 社により同社のプライバシーポリシーに基づいて管理されます。\n\n## クッキーの管理、削除方法について\nユーザーがご利用になっているコンピューターやタブレット、スマートフォンのブラウザの設定を変更することにより、クッキーを無効することができます。また、保存されているクッキーを削除することができます。\nクッキーを無効にしても当ページをご利用いただけますが、一部の機能をご利用いただけない場合があります。\nブラウザの設定変更の方法につきましては、各ブラウザ提供元のサイトをご参照ください。\n\n以上\n\n2020年9月14日制定\n`)\n\nexport default CookiePolicyLayout\n","import React, { useContext, useEffect } from 'react';\nimport { useMeQuery, CurrentUser } from '../../graphql/types.d';\nimport UserContext from '../../hooks/userContext';\nimport Cookies from 'js-cookie'\n\nconst version = \"jsFileVersion\"\n\n// ユーザーを初期化するだけの component\nconst InitializeUser = () => {\n  const { data } = useMeQuery()\n  const { state, dispatch } = useContext(UserContext)\n\n  useEffect(() => {\n    if(state.user === null && data && data.me) {\n\n      // バージョン違いの場合は強制スーパーリロード\n      if(window.navigator.cookieEnabled) {\n        const v = Cookies.get(version)\n\n        if(!v) {\n          // 初回表示\n          Cookies.set(version, data.me.version)\n        } else if(data.me.version !== v) {\n          // 二回以降\n          Cookies.set(version, data.me.version)\n          window.location.reload(true)\n        }\n      } else {\n        console.log(\"cookie が有効ではありません\")\n      }\n\n      dispatch({ type: \"SET_USER\", user: data.me as CurrentUser })\n    }\n  }, [data, state.user, dispatch])\n\n  return <></>\n}\n\nexport default InitializeUser\n","import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { FormControl, InputLabel, Input, Button, FormControlLabel, Checkbox, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Paper, FormHelperText } from '@material-ui/core';\nimport { CurrentUser, useSignupMutation, SignupPayload, SignupInput } from '../../../graphql/types.d';\nimport UserContext from '../../../hooks/userContext';\nimport { Link, useHistory } from 'react-router-dom';\nimport InformationContext from '../../../hooks/informationContext';\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nconst UserSignupLayout = () => {\n  const [name, setName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\")\n  const [agreedTerms, setAgreedTerms] = useState(false)\n  const [agreedPrivacy, setAgreedPrivacy] = useState(false)\n  const [input, setInput] = useState<SignupInput>({ name, username, password, passwordConfirmation })\n  const userContext = useContext(UserContext)\n  const infoContext = useContext(InformationContext)\n  let history = useHistory()\n\n  const [token, setToken] = useState(\"\")\n  const recaptchaRef = useRef<ReCAPTCHA>() as React.RefObject<ReCAPTCHA>\n\n  useEffect(() => {\n    if(token) document.cookie = `reCAPTCHAv2Token=${token}; max-age=300; path=/;`\n    return () => { document.cookie = `reCAPTCHAv2Token=; max-age=300; path=/;` }\n  }, [token])\n\n  // 登録済みの場合はトップページへ\n  useEffect(() => {\n    if(userContext.state.user?.registered) {\n      history.push(\"/albums\")\n      infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"info\", duration: 5000, text: \"登録済みです\", buttonText: \"OK\" })\n    }\n  }, [userContext, infoContext, history])\n\n  // カレントユーザー登録\n  interface SignupResponse {\n    data: { signup: SignupPayload }\n  }\n  const [signup] = useSignupMutation({\n    update: (_, response:SignupResponse) => {\n      if (response.data.signup.error) {\n        recaptchaRef?.current?.reset()\n        infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"error\", duration: 20000, text: response.data.signup.error, buttonText: \"OK\" })\n      } else {\n        history.push(\"/albums\")\n        userContext.dispatch({ type: \"SET_USER\", user: response.data.signup.currentUser as CurrentUser })\n        infoContext.dispatch({ type: \"ADD_ALERT\", severity: \"success\", duration: 10000, text: <>登録しました。<br/>音楽を楽しみましょう！</>, buttonText: \"OK\" })\n      }\n    },\n    variables: { input },\n  })\n\n  const buttonDisabled =\n    !name || !username || !password || !passwordConfirmation || !agreedTerms || !agreedPrivacy || !token\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" style={{ border: 'none' }}>ユーザー登録</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow >\n            <TableCell align=\"center\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n                <InputLabel>名前</InputLabel>\n                <Input value={name} onChange={e => {\n                  setName(e.target.value || \"\")\n                  setInput({ ...input, name: (e.target.value || \"\") })\n                }}/>\n                <FormHelperText>あとで変更可能</FormHelperText>\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow >\n            <TableCell align=\"center\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n                <InputLabel>ユーザーID</InputLabel>\n                <Input value={username} onChange={e => {\n                  setUsername(e.target.value || \"\")\n                  setInput({ ...input, username: (e.target.value || \"\") })\n                }}/>\n                <FormHelperText>半角英数と_のみ, あとで変更不可</FormHelperText>\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow >\n            <TableCell align=\"center\" style={{ border: 'none' }}>\n              <FormControl required={true}>\n                <InputLabel>パスワード設定</InputLabel>\n                <Input value={password} onChange={e => {\n                  setPassword(e.target.value || \"\")\n                  setInput({ ...input, password: (e.target.value || \"\") })\n                }} type=\"password\" />\n                <FormHelperText>8文字以上、英・数が使えます</FormHelperText>\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow >\n            <TableCell align=\"center\">\n              <FormControl required={true}>\n                <InputLabel>再確認パスワード</InputLabel>\n                <Input value={passwordConfirmation} onChange={e => {\n                  setPasswordConfirmation(e.target.value || \"\")\n                  setInput({ ...input, passwordConfirmation: (e.target.value || \"\") })\n                }} type=\"password\" />\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"left\" style={{ border: 'none' }}>\n              <FormControlLabel\n                control={<Checkbox\n                  checked={agreedTerms}\n                  color=\"secondary\"\n                  onChange={() => setAgreedTerms(!agreedTerms)}\n                  name=\"terms\"\n                />}\n                label={<><Link to=\"/terms\" target=\"_blank\">利用規約</Link>に同意する</>}\n              />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"left\">\n              <FormControlLabel\n                control={<Checkbox\n                  checked={agreedPrivacy}\n                  color=\"secondary\"\n                  onChange={() => setAgreedPrivacy(!agreedPrivacy)}\n                  name=\"privacy\"\n                />}\n                label={<><Link to=\"/privacy\" target=\"_blank\">プライバシーポリシー</Link>に同意する</>}\n              />\n            </TableCell>\n          </TableRow>\n          <TableRow >\n            <TableCell align=\"center\" style={{ border: 'none' }}>\n              <ReCAPTCHA\n                ref={recaptchaRef}\n                sitekey={process.env.REACT_APP_RECAPTCHA_KEY || \"\"}\n                onChange={_token => setToken(_token as string)}\n              />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">\n              <Button disabled={buttonDisabled} variant=\"contained\" onClick={() => {signup();setToken(\"\")}}>登録する</Button>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default UserSignupLayout\n","import React, { useContext } from 'react';\nimport { Snackbar, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport InformationContext from '../../hooks/informationContext';\n\nconst SnackbarComponent = () => {\n  const { state, dispatch } = useContext(InformationContext)\n\n  if(!state.severity) {\n    return <></>\n  }\n\n  const defaultCloseHandler = () => {\n    dispatch({ type: \"CLOSE_ALERT\" })\n  }\n\n  const action = (buttonText:string) =>\n    <Button onClick={state.closeHandler || defaultCloseHandler} color=\"inherit\" size=\"small\">{buttonText}</Button>\n\n  // クローズハンドラーの指定がある場合は非表示時間や他画面クリックでアラートが消えない\n  const onCloseEvent = state.closeHandler ? {} : { onClose: defaultCloseHandler }\n\n  return (\n    <Snackbar style={{ bottom: \"70px\" }} open={state.open} autoHideDuration={state.duration} {...onCloseEvent}>\n      <Alert severity={state.severity} action={action(state.buttonText)}>{state.text}</Alert>\n    </Snackbar>\n  )\n}\n\nexport default SnackbarComponent\n","import React, { useContext, useEffect } from 'react';\nimport InformationContext from '../../hooks/informationContext';\nimport { Link } from 'react-router-dom';\nimport Cookies from 'js-cookie'\n\n// クッキーポリシーの同意をするだけの component\nconst CookieInformation = () => {\n  const { dispatch } = useContext(InformationContext)\n\n  useEffect(() => {\n    const cookieNotice = Cookies.get(\"cookieNotice\")\n\n    if(cookieNotice !== \"true\") {\n      const text = <>クッキーポリシー<br/>当サービスを利用することにより、当サービスの<Link to=\"/cookie_policy\" target=\"_blank\">クッキーポリシー</Link>に記載されたクッキーの使用に同意することとみなされます。</>\n      const closeHandler = () => {\n        Cookies.set(\"cookieNotice\", \"true\", { expires: 31536000, path: \"/\" })\n        dispatch({ type: \"CLOSE_ALERT\" })\n      }\n      dispatch({ type: \"ADD_ALERT\", severity: \"info\", duration: 31536000, text, buttonText: \"OK\", closeHandler })\n    }\n\n  }, [dispatch])\n\n  return <></>\n}\n\nexport default CookieInformation\n","/// <reference path=\"MusicKitV1.d.ts\" />\ninterface MusicKitConfig {\n  initConfig : {\n    developerToken : string\n    app            : {\n      name  : string\n      build : string\n    }\n  },\n  countryCode?     : string,\n}\n\nconst initMusicKit = (config: MusicKitConfig) => {\n  MusicKit.configure(config.initConfig)\n  // https://help.apple.com/itc/musicspec/?lang=en#/itc740f60829\n  const countryCode = config.countryCode ? config.countryCode : \"jp\"\n  MusicKit.getInstance().api.storefrontId = countryCode\n}\n\nexport default initMusicKit\n","import React, { useContext, useEffect } from 'react';\nimport { AppleMusicTokenDocument } from '../../graphql/types.d';\nimport initMusicKit from '../../hooks/useMusicKit/initMusicKit';\nimport UserContext from '../../hooks/userContext';\nimport useMusicKitReady from '../../hooks/useMusicKit/useMusicKitReady';\nimport { useLazyQuery } from '@apollo/react-hooks';\n\n// Apple Music API を初期化するだけの component\nconst InitAppleMusic = () => {\n  const [getToken, { data }] = useLazyQuery(AppleMusicTokenDocument);\n  const userContext = useContext(UserContext)\n  const isReady = useMusicKitReady()\n\n  useEffect(() => {\n    if(!userContext.state.user) return\n    // 実行権限\n    if(!userContext.state.user.role.allowedActions.includes(\"appleMusicToken\")) return\n    // 設定済みのためスキップ\n    if(isReady) return\n\n    if(!data) {\n      getToken()\n      return\n    }\n\n    const config = {\n      initConfig : {\n        developerToken : data.appleMusicToken,\n        app: {\n          name: \"video-game-music\",\n          build: \"0.0.1\"\n        }\n      },\n      countryCode: \"jp\",\n    }\n\n    console.log(\"Init Apple Music!!\")\n    initMusicKit(config)\n  }, [getToken, data, userContext.state.user, isReady])\n\n  return <></>\n}\n\nexport default InitAppleMusic\n","import React, { useContext, useEffect } from 'react';\nimport SecureCookies from '../../lib/SecureCookies';\nimport PlayerContext from '../../hooks/playerContext';\n\n// Spotify API を初期化するだけの component\nconst InitSpotify = () => {\n  const { dispatch } = useContext(PlayerContext)\n\n  useEffect(() => {\n    if(!dispatch) return\n\n    if(!window.onSpotifyWebPlaybackSDKReady) {\n      const cookie = new SecureCookies();\n\n      window.onSpotifyWebPlaybackSDKReady = () => {\n        const token = cookie.get(\"spotifyAccessToken\")\n        if(!token) return console.log(\"Not found spotify token!!\")\n\n        const player = new Spotify.Player({\n          name: 'Web Playback SDK Quick Start Player',\n          getOAuthToken: cb => { cb(token); }\n        })\n\n        player.addListener('player_state_changed', state => {\n          // 自動停止時\n          if(state.paused && state.position === 0 && state.track_window.previous_tracks.length === 0) {\n            dispatch({ type: \"NEXT_PLAY\" })\n          }\n        })\n\n        player.addListener('ready', ({ device_id }) => {\n          cookie.set(\"spotifyDeviceId\", device_id, { expires: 7 })\n        })\n\n        console.log(\"Init Spotify!!\")\n        player.connect()\n      }\n    }\n  }, [dispatch])\n\n  return <></>\n}\n\nexport default InitSpotify\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\"\nimport Bar from './Bar';\nimport { ApolloProvider } from '@apollo/react-hoc';\nimport client from './client';\nimport ArtistsLayout from '../artist/list/ArtistsLayout';\nimport ArtistInfoLayout from '../artist/info/ArtistInfoLayout';\nimport AlbumsLayout from '../album/list/AlbumsLayout';\nimport AlbumInfoLayout from '../album/info/AlbumInfoLayout';\nimport TracksLayout from '../track/list/TracksLayout';\nimport UserLoginLayout from '../user/login/UserLoginLayout';\nimport UserLogoutLayout from '../user/logout/UserLogoutLayout';\nimport UserMeLayout from '../user/me/UserMeLayout';\nimport UserMeEditLayout from '../user/meEdit/UserMeEditLayout';\nimport { Grid, Container, Toolbar } from '@material-ui/core';\nimport { PlayerProvider } from '../../hooks/playerContext';\nimport PlayerBar from './PlayerBar';\nimport AboutLayout from '../information/AboutLayout';\nimport TermsLayout from '../information/TermsLayout';\nimport PrivacyLayout from '../information/PrivacyLayout';\nimport CookiePolicyLayout from '../information/CookiePolicyLayout';\nimport { UserProvider } from '../../hooks/userContext';\nimport InitializeUser from './InitializeUser';\nimport UserSignupLayout from '../user/signup/UserSignupLayout';\nimport SnackbarComponent from '../../components/infomation/SnackbarComponent';\nimport { InformationProvider } from '../../hooks/informationContext';\nimport CookieInformation from './CookieInformation';\nimport InitAppleMusic from '../appleMusic/InitAppleMusic';\nimport InitSpotify from '../spotify/InitSpotify';\n\nconst RootLayout = () =>\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <UserProvider >\n        <InformationProvider>\n          <PlayerProvider >\n            <CookieInformation />\n            <InitializeUser />\n            <InitAppleMusic />\n            <InitSpotify />\n            {/* アプリバー */}\n            <Bar />\n            {/* プレイヤー */}\n            <PlayerBar />\n            <Container style={{ flexGrow: 1 }}>\n              <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={2}\n              >\n                <Grid item>\n                  {/* \bアプリバーダミー */}\n                  <Toolbar />\n                </Grid>\n                <Grid item>\n                  <Switch>\n                    <Route exact path=\"/\" component={AlbumsLayout} />\n                    <Route exact path=\"/artists\" component={ArtistsLayout} />\n                    <Route exact path=\"/artists/:id\" component={ArtistInfoLayout} />\n                    <Route exact path=\"/albums\" component={AlbumsLayout} />\n                    <Route exact path=\"/albums/:id\" component={AlbumInfoLayout} />\n                    <Route exact path=\"/tracks\" component={TracksLayout} />\n                    <Route exact path=\"/signup\" component={UserSignupLayout} />\n                    <Route exact path=\"/login\" component={UserLoginLayout} />\n                    <Route exact path=\"/logout\" component={UserLogoutLayout} />\n                    <Route exact path=\"/me\" component={UserMeLayout} />\n                    <Route exact path=\"/me/edit\" component={UserMeEditLayout} />\n                    <Route exact path=\"/about\" component={AboutLayout} />\n                    <Route exact path=\"/terms\" component={TermsLayout} />\n                    <Route exact path=\"/privacy\" component={PrivacyLayout} />\n                    <Route exact path=\"/cookie_policy\" component={CookiePolicyLayout} />\n                  </Switch>\n                </Grid>\n                <Grid item>\n                  {/* プレイヤー\bダミー */}\n                  <Toolbar />\n                </Grid>\n                {/* お知らせ */}\n                <SnackbarComponent/>\n              </Grid>\n            </Container>\n          </PlayerProvider>\n        </InformationProvider>\n      </UserProvider>\n    </ApolloProvider>\n  </BrowserRouter>\n\nexport default RootLayout\n","import React from 'react';\nimport { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport Root from './Root';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: '#222222',\n    },\n    secondary: {\n      main: '#4AC6D2',\n    },\n  },\n  typography: {\n    fontFamily: [\n      '\"Noto Sans JP\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n})\n\nconst RootStyleLayout = () =>\n  <ThemeProvider theme={theme}>\n    {/* リセットCSS */}\n    <CssBaseline />\n    {/* フォント */}\n    <link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+JP\" rel=\"stylesheet\" />\n    <Root />\n  </ThemeProvider>\n\nexport default RootStyleLayout\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect } from 'react';\nimport RootStyleLayout from './RootStyle';\nimport { unregister } from './serviceWorker'\nimport ReactGA from 'react-ga';\n\nconst App = () => {\n  // トラッキング\n  useEffect(() => {\n    if(process.env.REACT_APP_GA_ID) {\n      ReactGA.initialize(process.env.REACT_APP_GA_ID)\n      ReactGA.pageview(window.location.pathname + window.location.search)\n      console.log(window.location.pathname + window.location.search)\n    }\n  }, [])\n\n  return <RootStyleLayout />\n}\n\nexport default App\n\nunregister()\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './layouts/app/App';\n\nReactDOM.render(<App />, document.querySelector('#app'));\n"],"sourceRoot":""}