{"version":3,"sources":["graphql/types.d.tsx","components/image/ImageComponent.tsx","components/imageCard/ImageCardComponent.tsx","layouts/album/item/AlbumItemLayout.tsx","components/pagination/paginationComponent.tsx","layouts/album/list/AlbumsLayout.tsx","hooks/useConditions.ts","layouts/app/Bar.tsx","layouts/app/client.ts","layouts/album/info/AlbumInfoLayout.tsx","layouts/artist/item/ArtistItemLayout.tsx","layouts/artist/list/ArtistsLayout.tsx","layouts/artist/info/ArtistInfoLayout.tsx","layouts/app/Root.tsx","layouts/app/RootStyle.tsx","layouts/app/App.tsx","index.tsx"],"names":["AlbumsQueryOrder","ArtistsQueryOrder","AlbumDocument","gql","AlbumsDocument","ArtistDocument","ArtistsDocument","ImageComponent","className","src","title","width","process","CardMedia","image","style","height","ImageCardComponent","link","linkUrl","component","Link","to","React","createElement","Grid","container","item","xs","direction","justify","alignItems","children","Card","position","CardActionArea","left","bottom","componentInImage","AlbumItemLayout","album","borderRadius","fontSize","color","lineHeight","textAlign","background","serviceIcons","appleMusicAlbum","push","backgroundColor","itunesAlbum","spotifyAlbum","name","artworkM","url","id","PaginationComponent","no","offset","limit","fetchMore","useState","alreadyFetch","setAlreadyFetch","isFetch","onEnter","variables","updateQuery","prev","fetchMoreResult","items","AlbumsLayout","conditions","location","useLocation","params","URLSearchParams","search","key","value","get","values","split","uniqueValues","Set","forEach","add","Array","from","getUniqueValues","condition_id","test","_","merge","artists","albums","tracks","useConditions","useQuery","order","asc","fetchPolicy","error","data","message","albums_content","map","i","length","spacing","HideOnScroll","props","window","trigger","useScrollTrigger","target","undefined","Slide","appear","in","Bar","AppBar","Toolbar","Typography","variant","IconButton","edge","size","aria-label","margin","headersLink","ApolloLink","operation","forward","endpoint","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","AlbumInfoLayout","useParams","loading","album_content","resize","event","document","documentElement","scrollWidth","scrollHeight","preview_content","onLoad","allow","frameBorder","overflow","appleMusicId","spotifyId","allowTransparency","ArtistItemLayout","artist","ArtistsLayout","content","ArtistInfoLayout","artworkL","padding","RootStyleLayout","client","exact","path","theme","createMuiTheme","palette","type","typography","fontFamily","join","ThemeProvider","CssBaseline","href","rel","Root","App","RootStyle","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.4db6d50f.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** 正の整数 */\n  PositiveNumber: any;\n  /** Table id, hex Timestamp, ID */\n  TTID: any;\n};\n\n/** アルバム */\nexport type Album = {\n   __typename?: 'Album';\n  /** Apple Music アルバム */\n  appleMusicAlbum?: Maybe<AppleMusicAlbum>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** iTunes アルバム */\n  itunesAlbum?: Maybe<AppleMusicAlbum>;\n  /** タイトル */\n  name: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アルバム */\n  spotifyAlbum?: Maybe<SpotifyAlbum>;\n  /** トラック数 */\n  totalTracks: Scalars['PositiveNumber'];\n  /** トラック */\n  tracks?: Maybe<Array<Track>>;\n};\n\nexport type AlbumsConditions = {\n  /** アーティストID */\n  artists?: Maybe<IdInputObject>;\n};\n\nexport enum AlbumsQueryOrder {\n  /** 名前順 */\n  Name = 'NAME',\n  /** 新しい順 */\n  New = 'NEW',\n  /** 発売日順 */\n  Release = 'RELEASE',\n  /** 人気順 */\n  Popularity = 'POPULARITY',\n  /** トラック数順 */\n  TotalTracks = 'TOTAL_TRACKS'\n}\n\n/** Apple Music アルバム */\nexport type AppleMusicAlbum = {\n   __typename?: 'AppleMusicAlbum';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n};\n\n/** Apple Music アーティスト */\nexport type AppleMusicArtist = {\n   __typename?: 'AppleMusicArtist';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** アーティスト */\nexport type Artist = {\n   __typename?: 'Artist';\n  /** 関連アルバム */\n  albums?: Maybe<Array<Album>>;\n  /** Apple Music アーティスト */\n  appleMusicArtists?: Maybe<Array<AppleMusicArtist>>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アーティスト */\n  spotifyArtists?: Maybe<Array<SpotifyArtist>>;\n  /** 関連曲 */\n  tracks?: Maybe<Array<Track>>;\n};\n\nexport enum ArtistsQueryOrder {\n  /** 新しい順 */\n  New = 'NEW',\n  /** 人気順 */\n  Popularity = 'POPULARITY'\n}\n\n/** アートワーク */\nexport type Artwork = {\n   __typename?: 'Artwork';\n  /** 高さ */\n  height?: Maybe<Scalars['PositiveNumber']>;\n  /** URL */\n  url?: Maybe<Scalars['String']>;\n  /** 幅 */\n  width?: Maybe<Scalars['PositiveNumber']>;\n};\n\n\nexport type IdInputObject = {\n  /** ID */\n  id?: Maybe<Array<Scalars['TTID']>>;\n};\n\n\nexport type Query = {\n   __typename?: 'Query';\n  /** アルバム情報取得 */\n  album?: Maybe<Album>;\n  /** アルバム一覧取得 */\n  albums: Array<Album>;\n  /** アーティスト取得 */\n  artist?: Maybe<Artist>;\n  /** アーティスト一覧取得 */\n  artists: Array<Artist>;\n};\n\n\nexport type QueryAlbumArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryAlbumsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n  asc?: Maybe<Scalars['Boolean']>;\n  conditions?: Maybe<AlbumsConditions>;\n  order: AlbumsQueryOrder;\n};\n\n\nexport type QueryArtistArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryArtistsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n  asc?: Maybe<Scalars['Boolean']>;\n  order?: Maybe<ArtistsQueryOrder>;\n};\n\n/** Spotify アルバム */\nexport type SpotifyAlbum = {\n   __typename?: 'SpotifyAlbum';\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\n/** Spotify アーティスト */\nexport type SpotifyArtist = {\n   __typename?: 'SpotifyArtist';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\n\n/** トラック */\nexport type Track = {\n   __typename?: 'Track';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 国際標準レコーディングコード */\n  isrc: Scalars['String'];\n  /** タイトル */\n  name: Scalars['String'];\n};\n\nexport type AlbumQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type AlbumQuery = (\n  { __typename?: 'Query' }\n  & { album?: Maybe<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id' | 'totalTracks' | 'name' | 'releaseDate'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id' | 'spotifyId'>\n    )> }\n  )> }\n);\n\nexport type AlbumsQueryVariables = {\n  conditions?: Maybe<AlbumsConditions>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n  order: AlbumsQueryOrder;\n  asc?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type AlbumsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id'>\n    )> }\n  )> }\n);\n\nexport type ArtistQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type ArtistQuery = (\n  { __typename?: 'Query' }\n  & { artist?: Maybe<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n    & { appleMusicArtists?: Maybe<Array<(\n      { __typename?: 'AppleMusicArtist' }\n      & Pick<AppleMusicArtist, 'id'>\n    )>>, spotifyArtists?: Maybe<Array<(\n      { __typename?: 'SpotifyArtist' }\n      & Pick<SpotifyArtist, 'id'>\n    )>>, artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type ArtistsQueryVariables = {\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n  order: ArtistsQueryOrder;\n  asc?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type ArtistsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\n\nexport const AlbumDocument = gql`\n    query Album($id: TTID!) {\n  album(id: $id) {\n    id\n    totalTracks\n    name\n    releaseDate\n    artworkL {\n      url\n      width\n      height\n    }\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n      appleMusicId\n    }\n    itunesAlbum {\n      id\n      appleMusicId\n    }\n    spotifyAlbum {\n      id\n      spotifyId\n    }\n  }\n}\n    `;\nexport type AlbumComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AlbumQuery, AlbumQueryVariables>, 'query'> & ({ variables: AlbumQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const AlbumComponent = (props: AlbumComponentProps) => (\n      <ApolloReactComponents.Query<AlbumQuery, AlbumQueryVariables> query={AlbumDocument} {...props} />\n    );\n    \nexport type AlbumProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<AlbumQuery, AlbumQueryVariables>\n    } & TChildProps;\nexport function withAlbum<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  AlbumQuery,\n  AlbumQueryVariables,\n  AlbumProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, AlbumQuery, AlbumQueryVariables, AlbumProps<TChildProps, TDataName>>(AlbumDocument, {\n      alias: 'album',\n      ...operationOptions\n    });\n};\nexport type AlbumQueryResult = ApolloReactCommon.QueryResult<AlbumQuery, AlbumQueryVariables>;\nexport const AlbumsDocument = gql`\n    query Albums($conditions: AlbumsConditions, $offset: Int, $limit: PositiveNumber, $order: AlbumsQueryOrder!, $asc: Boolean) {\n  items: albums(conditions: $conditions, offset: $offset, limit: $limit, order: $order, asc: $asc) {\n    id\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n    }\n    itunesAlbum {\n      id\n    }\n    spotifyAlbum {\n      id\n    }\n  }\n}\n    `;\nexport type AlbumsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AlbumsQuery, AlbumsQueryVariables>, 'query'> & ({ variables: AlbumsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const AlbumsComponent = (props: AlbumsComponentProps) => (\n      <ApolloReactComponents.Query<AlbumsQuery, AlbumsQueryVariables> query={AlbumsDocument} {...props} />\n    );\n    \nexport type AlbumsProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<AlbumsQuery, AlbumsQueryVariables>\n    } & TChildProps;\nexport function withAlbums<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  AlbumsQuery,\n  AlbumsQueryVariables,\n  AlbumsProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, AlbumsQuery, AlbumsQueryVariables, AlbumsProps<TChildProps, TDataName>>(AlbumsDocument, {\n      alias: 'albums',\n      ...operationOptions\n    });\n};\nexport type AlbumsQueryResult = ApolloReactCommon.QueryResult<AlbumsQuery, AlbumsQueryVariables>;\nexport const ArtistDocument = gql`\n    query Artist($id: TTID!) {\n  artist(id: $id) {\n    id\n    name\n    appleMusicArtists {\n      id\n    }\n    spotifyArtists {\n      id\n    }\n    artworkL {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\nexport type ArtistComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ArtistQuery, ArtistQueryVariables>, 'query'> & ({ variables: ArtistQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const ArtistComponent = (props: ArtistComponentProps) => (\n      <ApolloReactComponents.Query<ArtistQuery, ArtistQueryVariables> query={ArtistDocument} {...props} />\n    );\n    \nexport type ArtistProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<ArtistQuery, ArtistQueryVariables>\n    } & TChildProps;\nexport function withArtist<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  ArtistQuery,\n  ArtistQueryVariables,\n  ArtistProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, ArtistQuery, ArtistQueryVariables, ArtistProps<TChildProps, TDataName>>(ArtistDocument, {\n      alias: 'artist',\n      ...operationOptions\n    });\n};\nexport type ArtistQueryResult = ApolloReactCommon.QueryResult<ArtistQuery, ArtistQueryVariables>;\nexport const ArtistsDocument = gql`\n    query Artists($offset: Int, $limit: PositiveNumber, $order: ArtistsQueryOrder!, $asc: Boolean) {\n  items: artists(offset: $offset, limit: $limit, order: $order, asc: $asc) {\n    id\n    name\n    artworkL {\n      url\n      width\n      height\n    }\n    artworkM {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\nexport type ArtistsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ArtistsQuery, ArtistsQueryVariables>, 'query'> & ({ variables: ArtistsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const ArtistsComponent = (props: ArtistsComponentProps) => (\n      <ApolloReactComponents.Query<ArtistsQuery, ArtistsQueryVariables> query={ArtistsDocument} {...props} />\n    );\n    \nexport type ArtistsProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<ArtistsQuery, ArtistsQueryVariables>\n    } & TChildProps;\nexport function withArtists<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  ArtistsQuery,\n  ArtistsQueryVariables,\n  ArtistsProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, ArtistsQuery, ArtistsQueryVariables, ArtistsProps<TChildProps, TDataName>>(ArtistsDocument, {\n      alias: 'artists',\n      ...operationOptions\n    });\n};\nexport type ArtistsQueryResult = ApolloReactCommon.QueryResult<ArtistsQuery, ArtistsQueryVariables>;","import React from 'react';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst ImageComponent = ({\n  className = \"\", src = \"\", title = \"\", width\n}:{\n  className?:string, src?:string, title?:string, width:string|number\n}) => {\n  if(src === \"\") src = `${process.env.PUBLIC_URL}/no_image.png`\n\n  return (\n    <CardMedia\n      className={className}\n      image={src}\n      title={title}\n      style={{ width: width, height: width }}\n    />\n  )\n}\n\nexport default ImageComponent;\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport ImageComponent from '../image/ImageComponent'\nimport TitleComponent from '../title/TitleComponent';\nimport { Grid, CardActionArea } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\ninterface Image {\n  title: string\n  src?: string | null\n  width: string | number\n  linkUrl?: string\n  componentInImage?: JSX.Element\n}\n\nconst ImageCardComponent = (image:Image) => {\n  const link = image.linkUrl ? { component: Link, to: image.linkUrl } : {}\n\n  return (\n    React.createElement(Grid, {\n      container: true, item: true, xs: true,\n      direction: \"row\", justify: \"center\", alignItems: \"center\",\n      ...link,\n      children: (\n        <Card style={{ width: image.width, position: \"relative\" }}>\n          <CardActionArea>\n            <Grid container style={{ position: \"absolute\", left: \"5px\", bottom: \"5px\" }}>\n              { image.componentInImage ? image.componentInImage : <></> }\n            </Grid>\n            <ImageComponent src={image.src || \"\"} width={image.width} title={image.title}/>\n          </CardActionArea>\n        </Card>\n      )\n    })\n  )\n}\n\nexport default ImageCardComponent\n","import React from 'react';\nimport { Album } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport { Grid } from '@material-ui/core';\n\nconst AlbumItemLayout = (\n  { album, width }:\n  { album: Album, width:string|number }\n) => {\n  const style = {\n    width: \"15px\",\n    height: \"15px\",\n    borderRadius: \"50%\",\n    fontSize: \"10px\",\n    color: \"#fff\",\n    lineHeight: \"15px\",\n    textAlign: \"center\" as \"center\",\n    background: \"#000\",\n  }\n\n  const serviceIcons = []\n  if(album.appleMusicAlbum){\n    serviceIcons.push(<Grid item style={{...style, backgroundColor: \"#ff2f56\"}}>A</Grid>)\n  }\n  if(album.itunesAlbum){\n    serviceIcons.push(<Grid item style={{...style, backgroundColor: \"#0070c9\"}}>iT</Grid>)\n  }\n  if(album.spotifyAlbum){\n    serviceIcons.push(<Grid item style={{...style, backgroundColor: \"#1DB954\"}}>S</Grid>)\n  }\n  const componentInImage = <>{serviceIcons}</>\n\n  return (\n    <ImageCardComponent\n      title={album.name}\n      src={album.artworkM.url}\n      width={width}\n      linkUrl={`/albums/${album.id}`}\n      componentInImage={componentInImage}\n    />\n  )\n}\n\nexport default AlbumItemLayout\n","import React, { useState } from 'react';\nimport { Waypoint } from 'react-waypoint';\n\nconst PaginationComponent = (\n  { component, no, offset, limit, fetchMore }:\n  { component:JSX.Element, no:number, offset:number, limit:number, fetchMore:any }\n) => {\n  const [alreadyFetch, setAlreadyFetch] = useState(false)\n  const fetchNo = offset - limit\n  const isFetch = no === fetchNo\n\n  const exeFetchMore = () => fetchMore({\n    variables: {\n      offset: offset\n    },\n    updateQuery: (\n      prev:{ items: any[] },\n      { fetchMoreResult }:{ fetchMoreResult:{ items: any[] } }\n    ) => {\n      if (!fetchMoreResult) return prev;\n      return { ...prev, ...{ items: [...prev.items, ...fetchMoreResult.items] } }\n    }\n  })\n\n  const enterFunction = () => {\n    if(alreadyFetch) return\n    setAlreadyFetch(true)\n    return exeFetchMore()\n  }\n\n  return (\n    <>\n      { component }\n      { isFetch ? <Waypoint onEnter={enterFunction}/> : <></> }\n    </>\n  )\n}\n\nexport default PaginationComponent\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { AlbumsDocument, Album, AlbumsConditions } from '../../../graphql/types.d';\nimport AlbumItemLayout from '../item/AlbumItemLayout';\nimport { Grid } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport useConditions from '../../../hooks/useConditions';\n\nconst AlbumsLayout = () => {\n  const conditions = useConditions<AlbumsConditions>()\n  const limit = 50\n  const { error, data, fetchMore } = useQuery<{ items: Album[] }>(\n    AlbumsDocument,\n    {\n      variables: {\n        offset: 0,\n        limit: limit,\n        order: \"RELEASE\",\n        asc: true,\n        ...{ conditions }\n      },\n      // 戻るボタンで戻っても最初から読み込みが発生しない\n      fetchPolicy: \"cache-first\"\n    }\n  )\n\n  if (error) return <div>{error.message}</div>\n\n  let albums_content:JSX.Element[] = []\n\n  if (data) {\n    albums_content =\n      data.items.map(\n        (item, i) =>\n          <PaginationComponent\n            key={i}\n            component={<AlbumItemLayout album={item} width=\"150px\" key={i} />}\n            no={i}\n            offset={data.items.length}\n            limit={limit}\n            fetchMore={fetchMore}\n          />\n      )\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {albums_content}\n    </Grid>\n  )\n}\n\nexport default AlbumsLayout;\n","import { useLocation } from \"react-router-dom\"\nimport _ from \"lodash\"\n\nexport default function useConditions<T>() {\n  const location = useLocation()\n  const params = new URLSearchParams(location.search)\n\n  const getUniqueValues = (key:string):string[] => {\n    const value = params.get(key)\n    if(value === null) return []\n\n    const values = value.split(\",\")\n    const uniqueValues = new Set<string>()\n\n    values.forEach((value) => {\n      uniqueValues.add(value)\n    })\n\n    return Array.from(uniqueValues)\n  }\n\n  let conditions = {}\n\n  // ID\n  getUniqueValues(\"q\").forEach((condition_id) => {\n    switch( true ){\n      case /^arst/.test(condition_id):\n        conditions = _.merge(conditions, { artists: { id: [condition_id] } })\n        break;\n      case /^albm/.test(condition_id):\n        conditions = _.merge(conditions, { albums: { id: [condition_id] } })\n        break;\n      case /^trak/.test(condition_id):\n        conditions = _.merge(conditions, { tracks: { id: [condition_id] } })\n        break;\n    }\n  })\n\n  return conditions as T\n}\n","import React from 'react';\nimport { useScrollTrigger, AppBar, Toolbar, Typography, Slide, BottomNavigationAction, IconButton, Grid } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person'\nimport AlbumIcon from '@material-ui/icons/Album'\nimport { Link } from 'react-router-dom';\n\n// ref: https://material-ui.com/components/app-bar/#hide-app-bar\ninterface Props {\n  window?: () => Window;\n  children: React.ReactElement;\n}\n\nconst HideOnScroll = (props: Props) => {\n  const { children, window } = props;\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nconst Bar = () =>\n  <>\n    <HideOnScroll>\n      <AppBar>\n        <Toolbar>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n            spacing={3}\n          >\n            <Grid item>\n              <Typography variant=\"h6\">ゲーム音楽</Typography>\n            </Grid>\n            <Grid item>\n              <IconButton component={Link} to={`/artists`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <PersonIcon />\n                アーティスト\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <IconButton component={Link} to={`/albums`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <AlbumIcon />\n                アルバム\n              </IconButton>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </HideOnScroll>\n    <Toolbar style={{ margin: \"4px\" }} />\n  </>\n\nexport default Bar\n","import { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nconst headersLink = new ApolloLink((operation, forward) => {\n  return forward(operation)\n})\n\nlet endpoint = 'http://0.0.0.0:3000/graphql'\n\nif(process.env.NODE_ENV === 'production') {\n  endpoint = 'https://music-server.himacloud.app/graphql'\n}\n\nconst httpLink = new HttpLink({ uri: endpoint })\nconst link = ApolloLink.from([headersLink, httpLink])\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Album, AlbumDocument } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\n\nconst AlbumInfoLayout = () => {\n  const { id } = useParams()\n  const { loading, error, data } =\n    useQuery<{ album: Album | null }>(AlbumDocument,{ variables: { id: id } });\n\n  if (error) return <div>{error.message}</div>\n\n  let album_content = <></>\n\n  const resize = (event: React.SyntheticEvent<HTMLIFrameElement, Event>) => {\n    const target = event.target as HTMLIFrameElement\n    target.style.width  = document.documentElement.scrollWidth + 'px';\n    target.style.height = (document.documentElement.scrollHeight - 70) + 'px';\n    return event\n  }\n\n  if (loading || !data) {\n    // todo\n  } else {\n    if(data.album) {\n      let preview_content = <></>\n\n      if(data.album.appleMusicAlbum) {\n        preview_content =\n          <iframe\n            onLoad={event=>resize(event)}\n            title={data.album.id}\n            allow=\"autoplay *; encrypted-media *;\"\n            frameBorder=\"0\"\n            width=\"660\"\n            height=\"500\"\n            style={{overflow:\"hidden\", background:\"transparent\"}}\n            src={`https://embed.music.apple.com/jp/album/game/${data.album.appleMusicAlbum.appleMusicId}?app=music`}>\n          </iframe>\n      } else if(data.album.itunesAlbum) {\n        preview_content =\n          <iframe\n            onLoad={event=>resize(event)}\n            title={data.album.id}\n            src={`https://tools.applemusic.com/embed/v1/album/${data.album.itunesAlbum.appleMusicId}?country=jp`}\n            frameBorder=\"0\"\n            width=\"660\"\n            height=\"500\">\n          </iframe>\n      } else if(data.album.spotifyAlbum) {\n        preview_content =\n          <iframe\n            onLoad={event=>resize(event)}\n            title={data.album.id}\n            src={`https://open.spotify.com/embed/album/${data.album.spotifyAlbum.spotifyId}`}\n            width=\"660\"\n            height=\"500\"\n            frameBorder=\"0\"\n            allowTransparency={true}\n            allow=\"encrypted-media\">\n          </iframe>\n      }\n      album_content = <>\n        {preview_content}\n      </>\n    }\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {album_content}\n    </Grid>\n  )\n}\n\nexport default AlbumInfoLayout\n","import React from 'react';\nimport { Artist } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\n\nconst ArtistItemLayout = (\n  { artist, width }:\n  { artist: Artist, width:string|number }\n) => {\n  const componentInImage = <span style={{ color: \"black\" }}>{artist.name}</span>\n\n  return (\n    <ImageCardComponent\n      title={artist.name}\n      src={artist.artworkM.url}\n      width={width}\n      linkUrl={`/artists/${artist.id}?q=${artist.id}`}\n      componentInImage={componentInImage}\n    />\n  )\n}\n\nexport default ArtistItemLayout\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Artist, ArtistsDocument } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport ArtistItemLayout from '../item/ArtistItemLayout';\n\nconst ArtistsLayout = () => {\n  const limit = 30\n  const { error, data, fetchMore } = useQuery<{ items: Artist[] }>(\n    ArtistsDocument,\n    {\n      variables: {\n        offset: 0,\n        limit: limit,\n        order: \"POPULARITY\",\n        asc: false\n      },\n      // 戻るボタンで戻っても最初から読み込みが発生しない\n      fetchPolicy: \"cache-first\"\n    }\n  )\n\n  if (error) return <div>{error.message}</div>\n\n  let content:JSX.Element[] = []\n\n  if (data) {\n    content =\n      data.items.map(\n        (item, i) =>\n          <PaginationComponent\n            key={i}\n            component={<ArtistItemLayout artist={item} width=\"150px\" key={i} />}\n            no={i}\n            offset={data.items.length}\n            limit={limit}\n            fetchMore={fetchMore}\n          />\n      )\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {content}\n    </Grid>\n  )\n}\n\nexport default ArtistsLayout\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Artist, ArtistDocument } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport AlbumsLayout from '../../album/list/AlbumsLayout';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\n\nconst ArtistInfoLayout = () => {\n  const { id } = useParams()\n  const { error, data } =\n    useQuery<{ artist: Artist | null }>(ArtistDocument,{ variables: { id: id } });\n\n  if (error) return <div>{error.message}</div>\n\n  let content = <></>\n\n  if (data && data.artist) {\n    content =\n      <Grid>\n        <ImageCardComponent\n          title={data.artist.name}\n          src={data.artist.artworkL.url}\n          width={270}\n        />\n        <div style={{ padding: \"4px 0\" }} />\n        <AlbumsLayout />\n      </Grid>\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {content}\n    </Grid>\n  )\n}\n\nexport default ArtistInfoLayout\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\"\nimport AlbumsLayout from '../album/list/AlbumsLayout';\nimport Bar from './Bar';\nimport { ApolloProvider } from '@apollo/react-hoc';\nimport client from './client';\nimport AlbumInfoLayout from '../album/info/AlbumInfoLayout';\nimport ArtistsLayout from '../artist/list/ArtistsLayout';\nimport ArtistInfoLayout from '../artist/info/ArtistInfoLayout';\n\nconst RootStyleLayout = () =>\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <Bar />\n      <Switch>\n        <Route exact path=\"/artists\" component={ArtistsLayout} />\n        <Route exact path=\"/artists/:id\" component={ArtistInfoLayout} />\n        <Route exact path=\"/albums\" component={AlbumsLayout} />\n        <Route exact path=\"/albums/:id\" component={AlbumInfoLayout} />\n      </Switch>\n    </ApolloProvider>\n  </BrowserRouter>\n\nexport default RootStyleLayout\n","import React from 'react';\nimport { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport Root from './Root';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  },\n  typography: {\n    fontFamily: [\n      '\"Noto Sans JP\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n})\n\nconst RootStyleLayout = () =>\n  <ThemeProvider theme={theme}>\n    {/* リセットCSS */}\n    <CssBaseline />\n    {/* フォント */}\n    <link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+JP\" rel=\"stylesheet\" />\n    <Root />\n  </ThemeProvider>\n\nexport default RootStyleLayout\n","import React from 'react';\nimport RootStyleLayout from './RootStyle';\n\nconst App = () => <RootStyleLayout />\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './layouts/app/App';\n\nReactDOM.render(<App />, document.querySelector('#app'));\n"],"sourceRoot":""}