{"version":3,"sources":["graphql/types.d.tsx","components/image/ImageComponent.tsx","components/imageCard/ImageCardComponent.tsx","hooks/useParameters.ts","layouts/album/item/AlbumItemLayout.tsx","components/pagination/paginationComponent.tsx","layouts/album/list/AlbumsLayout.tsx","layouts/app/Bar.tsx","layouts/app/client.ts","layouts/artist/item/ArtistItemLayout.tsx","layouts/artist/list/ArtistsLayout.tsx","layouts/album/info/AlbumInfoLayout.tsx","layouts/artist/info/ArtistInfoLayout.tsx","layouts/user/signin/UserSigninLayout.tsx","layouts/user/me/UserMeLayout.tsx","layouts/app/Root.tsx","layouts/app/RootStyle.tsx","layouts/app/serviceWorker.ts","layouts/app/App.tsx","index.tsx"],"names":["AlbumsQueryOrderEnum","ArtistsQueryOrderEnum","SortEnum","StatusEnum","AlbumDocument","gql","AlbumsDocument","ArtistDocument","ArtistsDocument","MeDocument","UpdateMeDocument","SigninDocument","ImageComponent","className","src","title","width","process","CardMedia","image","style","height","ImageCardComponent","link","linkUrl","component","Link","to","React","createElement","Grid","container","item","xs","direction","justify","alignItems","textDecoration","children","Card","position","CardActionArea","left","bottom","componentInImage","CardContent","padding","Typography","overflow","textOverflow","whiteSpace","variant","color","ParameterPrefixKeys","album","artist","ParameterKeys","useParameters","prefix","location","useLocation","params","URLSearchParams","search","prefixKey","getUniqueValues","key","value","get","values","split","uniqueValues","Set","forEach","add","Array","from","parameters","test","_","merge","conditions","artists","id","albums","tracks","status","sort","order","type","AlbumItemLayout","borderRadius","fontSize","lineHeight","textAlign","background","serviceIcons","appleMusicAlbum","push","backgroundColor","itunesAlbum","spotifyAlbum","set","name","artworkM","url","toString","PaginationComponent","no","offset","limit","fetchMore","useState","prevComponent","setPrevComponent","alreadyFetch","setAlreadyFetch","isFetch","onEnter","variables","cursor","updateQuery","prev","fetchMoreResult","items","AlbumsLayout","baseOptions","setOrder","history","useHistory","fetchPolicy","ApolloReactHooks","error","data","_order","message","content","map","i","length","spacing","FormControl","minWidth","InputLabel","Select","labelId","onChange","event","_child","target","sortType","pathname","label","MenuItem","HideOnScroll","props","window","trigger","useScrollTrigger","undefined","Slide","appear","in","Bar","AppBar","Toolbar","IconButton","edge","size","aria-label","margin","httpLink","HttpLink","uri","credentials","headersLink","ApolloLink","operation","forward","errorLink","onError","graphQLErrors","networkError","locations","path","console","log","ApolloClient","cache","InMemoryCache","dataIdFromObject","object","ArtistItemLayout","ArtistsLayout","AlbumInfoLayout","useParams","loading","index","setIndex","resize","document","documentElement","scrollWidth","button_contents","theme","createMuiTheme","palette","primary","red","Button","href","appleMusicId","blue","green","spotifyId","preview_content","onLoad","allow","frameBorder","Tabs","_event","newValue","indicatorColor","textColor","Tab","disabled","ArtistInfoLayout","useQuery","artworkL","UserSigninLayout","notification","setNotification","username","setUsername","password","setPassword","update","response","signin","Alert","severity","input","autoComplete","Input","e","onClick","preventDefault","UserMeLayout","setName","oldPassword","setOldPassword","newPassword","setNewPassword","setInput","me","role","allowedActions","action","useUpdateMeMutation","updateMe","required","RootStyleLayout","client","exact","typography","fontFamily","join","ThemeProvider","CssBaseline","rel","Root","Boolean","hostname","match","App","RootStyle","navigator","serviceWorker","ready","then","registration","unregister","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.c24a2cbc.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** 正の整数 */\n  PositiveNumber: any;\n  /** Table id, hex Timestamp, ID */\n  TTID: any;\n};\n\n/** アルバム */\nexport type Album = {\n   __typename?: 'Album';\n  /** Apple Music アルバム */\n  appleMusicAlbum?: Maybe<AppleMusicAlbum>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** iTunes アルバム */\n  itunesAlbum?: Maybe<AppleMusicAlbum>;\n  /** タイトル */\n  name: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アルバム */\n  spotifyAlbum?: Maybe<SpotifyAlbum>;\n  /** ステータス */\n  status: StatusEnum;\n  /** トラック数 */\n  totalTracks: Scalars['PositiveNumber'];\n  /** トラック */\n  tracks?: Maybe<Array<Track>>;\n};\n\nexport type AlbumsConditionsInputObject = {\n  /** アーティストID */\n  artists?: Maybe<IdInputObject>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n};\n\nexport enum AlbumsQueryOrderEnum {\n  /** 追加順 */\n  New = 'new',\n  /** 発売日順 */\n  Release = 'release',\n  /** 人気順 */\n  Popularity = 'popularity'\n}\n\nexport type AlbumsSortInputObject = {\n  /** 並び順対象 */\n  order?: Maybe<AlbumsQueryOrderEnum>;\n  /** 並び順 */\n  type?: Maybe<SortEnum>;\n};\n\n/** Apple Music アルバム */\nexport type AppleMusicAlbum = {\n   __typename?: 'AppleMusicAlbum';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n};\n\n/** Apple Music アーティスト */\nexport type AppleMusicArtist = {\n   __typename?: 'AppleMusicArtist';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** アーティスト */\nexport type Artist = {\n   __typename?: 'Artist';\n  /** 関連アルバム */\n  albums?: Maybe<Array<Album>>;\n  /** Apple Music アーティスト */\n  appleMusicArtists?: Maybe<Array<AppleMusicArtist>>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アーティスト */\n  spotifyArtists?: Maybe<Array<SpotifyArtist>>;\n  /** ステータス */\n  status: StatusEnum;\n  /** 関連曲 */\n  tracks?: Maybe<Array<Track>>;\n};\n\nexport type ArtistsConditionsInputObject = {\n  /** アルバムID */\n  albums?: Maybe<IdInputObject>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n};\n\nexport enum ArtistsQueryOrderEnum {\n  /** 名前順 */\n  Name = 'name',\n  /** 追加順 */\n  New = 'new',\n  /** 人気順 */\n  Popularity = 'popularity'\n}\n\nexport type ArtistsSortInputObject = {\n  /** ソート対象 */\n  order?: Maybe<ArtistsQueryOrderEnum>;\n  /** 並び順 */\n  type?: Maybe<SortEnum>;\n};\n\n/** アートワーク */\nexport type Artwork = {\n   __typename?: 'Artwork';\n  /** 高さ */\n  height?: Maybe<Scalars['PositiveNumber']>;\n  /** URL */\n  url?: Maybe<Scalars['String']>;\n  /** 幅 */\n  width?: Maybe<Scalars['PositiveNumber']>;\n};\n\n/** Autogenerated input type of ChangeStatus */\nexport type ChangeStatusInput = {\n  /** 変更したいアーティストID */\n  artistId?: Maybe<Scalars['TTID']>;\n  /** 変更したいアルバムID */\n  albumId?: Maybe<Scalars['TTID']>;\n  /** 変更したいトラックID */\n  trackId?: Maybe<Scalars['TTID']>;\n  /** 変更したいステータス */\n  status: StatusEnum;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ChangeStatus */\nexport type ChangeStatusPayload = {\n   __typename?: 'ChangeStatusPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  /** 変更されたステータスを持ったモデル */\n  model?: Maybe<ModelHasStatusUnion>;\n};\n\n/** Autogenerated input type of ClearCache */\nexport type ClearCacheInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ClearCache */\nexport type ClearCachePayload = {\n   __typename?: 'ClearCachePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  results?: Maybe<Array<Scalars['String']>>;\n};\n\n/** Autogenerated input type of CompactAlbum */\nexport type CompactAlbumInput = {\n  /** 統合後のアルバム名。 */\n  name: Scalars['String'];\n  /** 統合したいアルバムID。Apple Music アルバムのみ統合される。指定した順番通りに統合する。 */\n  albumIdsForAppleMusic?: Maybe<Array<Scalars['TTID']>>;\n  /** 統合したいアルバムID。Spotify アルバムのみ統合される。指定した順番通りに統合する。 */\n  albumIdsForSpotify?: Maybe<Array<Scalars['TTID']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CompactAlbum */\nexport type CompactAlbumPayload = {\n   __typename?: 'CompactAlbumPayload';\n  /** 統合されたアルバム */\n  album?: Maybe<Album>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** カレントユーザー */\nexport type CurrentUser = {\n   __typename?: 'CurrentUser';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** ロール */\n  role: Role;\n  /** ユーザー名 */\n  username: Scalars['String'];\n};\n\nexport type CursorInputObject = {\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n};\n\n\nexport type IdInputObject = {\n  /** ID */\n  id?: Maybe<Array<Scalars['TTID']>>;\n};\n\n/** Autogenerated input type of MixAlbum */\nexport type MixAlbumInput = {\n  /** 混合したいアルバムID */\n  albumIds: Array<Scalars['TTID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of MixAlbum */\nexport type MixAlbumPayload = {\n   __typename?: 'MixAlbumPayload';\n  /** 混合されたアルバム */\n  album?: Maybe<Album>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** ステータスをもつモデルのいずれか */\nexport type ModelHasStatusUnion = Album | Artist | Track;\n\nexport type Mutation = {\n   __typename?: 'Mutation';\n  /** ステータス変更。関連するアルバム, トラック, 各音楽サービスアルバム、各音楽サービストラックも同じステータスで更新される。 */\n  changeStatus?: Maybe<ChangeStatusPayload>;\n  /** 検索結果キャッシュをリセットする */\n  clearCache?: Maybe<ClearCachePayload>;\n  /** 複数アルバムを単一アルバムに統合する。統合前の複数アルバムは全て IGNORE される。 */\n  compactAlbum?: Maybe<CompactAlbumPayload>;\n  /**\n   * アルバムを混合する。\n   * 同じアルバムのはずが各音楽サービスで別のアルバムと認識される場合がある。\n   * その場合に使用する。曲数が多いアルバムを正とする。\n   */\n  mixAlbum?: Maybe<MixAlbumPayload>;\n  /** サインイン */\n  signin?: Maybe<SigninPayload>;\n  /** 統合したアルバムを元に戻す。統合された単一アルバムは削除される。 */\n  uncompactAlbum?: Maybe<UncompactAlbumPayload>;\n  /** アルバムの混合を解除する。アルバムと曲数に相違がある音楽サービスアルバムを分離する。 */\n  unmixAlbum?: Maybe<UnmixAlbumPayload>;\n  /** カレントユーザー情報更新 */\n  updateMe?: Maybe<UpdateMePayload>;\n  /** アルバムを最新の状態にする */\n  upsertAlbum?: Maybe<UpsertAlbumPayload>;\n  /** アーティストを最新の状態にする */\n  upsertArtist?: Maybe<UpsertArtistPayload>;\n};\n\n\nexport type MutationChangeStatusArgs = {\n  input: ChangeStatusInput;\n};\n\n\nexport type MutationClearCacheArgs = {\n  input: ClearCacheInput;\n};\n\n\nexport type MutationCompactAlbumArgs = {\n  input: CompactAlbumInput;\n};\n\n\nexport type MutationMixAlbumArgs = {\n  input: MixAlbumInput;\n};\n\n\nexport type MutationSigninArgs = {\n  input: SigninInput;\n};\n\n\nexport type MutationUncompactAlbumArgs = {\n  input: UncompactAlbumInput;\n};\n\n\nexport type MutationUnmixAlbumArgs = {\n  input: UnmixAlbumInput;\n};\n\n\nexport type MutationUpdateMeArgs = {\n  input: UpdateMeInput;\n};\n\n\nexport type MutationUpsertAlbumArgs = {\n  input: UpsertAlbumInput;\n};\n\n\nexport type MutationUpsertArtistArgs = {\n  input: UpsertArtistInput;\n};\n\n\nexport type Query = {\n   __typename?: 'Query';\n  /** アルバム情報取得 */\n  album?: Maybe<Album>;\n  /** アルバム一覧取得 */\n  albums: Array<Album>;\n  /** アーティスト取得 */\n  artist?: Maybe<Artist>;\n  /** アーティスト一覧取得 */\n  artists: Array<Artist>;\n  /** カレントユーザー情報取得 */\n  me: CurrentUser;\n};\n\n\nexport type QueryAlbumArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryAlbumsArgs = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<AlbumsSortInputObject>;\n  conditions?: Maybe<AlbumsConditionsInputObject>;\n};\n\n\nexport type QueryArtistArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryArtistsArgs = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<ArtistsSortInputObject>;\n  conditions?: Maybe<ArtistsConditionsInputObject>;\n};\n\n/** ロール */\nexport type Role = {\n   __typename?: 'Role';\n  /** 出来ること一覧 */\n  allowedActions: Array<Scalars['String']>;\n  /** 説明 */\n  description: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** Autogenerated input type of Signin */\nexport type SigninInput = {\n  username?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of Signin */\nexport type SigninPayload = {\n   __typename?: 'SigninPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  user?: Maybe<User>;\n};\n\nexport enum SortEnum {\n  /** 昇順 */\n  Asc = 'asc',\n  /** 降順 */\n  Desc = 'desc'\n}\n\n/** Spotify アルバム */\nexport type SpotifyAlbum = {\n   __typename?: 'SpotifyAlbum';\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\n/** Spotify アーティスト */\nexport type SpotifyArtist = {\n   __typename?: 'SpotifyArtist';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\nexport enum StatusEnum {\n  /** 保留 : デフォルトの検索結果に表示されない */\n  Pending = 'pending',\n  /** 有効 : 通常検索結果に表示される */\n  Active = 'active',\n  /** 除外 : 検索結果から除外される。最新情報などを取得する際などでも除外される */\n  Ignore = 'ignore'\n}\n\n\n/** トラック */\nexport type Track = {\n   __typename?: 'Track';\n  /** ディスク番号 */\n  discNumber: Scalars['PositiveNumber'];\n  /** 再生時間 */\n  durationMs: Scalars['PositiveNumber'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 国際標準レコーディングコード */\n  isrc: Scalars['String'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** プレビューURL */\n  previewUrl: Scalars['String'];\n  /** ステータス */\n  status: StatusEnum;\n  /** トラック番号 */\n  trackNumber: Scalars['PositiveNumber'];\n};\n\n/** Autogenerated input type of UncompactAlbum */\nexport type UncompactAlbumInput = {\n  /** 統合解除したいアルバムID。Apple Music アルバムのみ解除される。 */\n  albumIdForAppleMusic?: Maybe<Scalars['TTID']>;\n  /** 統合解除したいアルバムID。Spotify アルバムのみ解除される。 */\n  albumIdForSpotify?: Maybe<Scalars['TTID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UncompactAlbum */\nexport type UncompactAlbumPayload = {\n   __typename?: 'UncompactAlbumPayload';\n  /** 統合解除されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UnmixAlbum */\nexport type UnmixAlbumInput = {\n  /** 混合解除したいアルバムID */\n  albumId: Scalars['TTID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UnmixAlbum */\nexport type UnmixAlbumPayload = {\n   __typename?: 'UnmixAlbumPayload';\n  /** 混合されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateMe */\nexport type UpdateMeInput = {\n  name?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  newPassword?: Maybe<Scalars['String']>;\n  oldPassword: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateMe */\nexport type UpdateMePayload = {\n   __typename?: 'UpdateMePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertAlbum */\nexport type UpsertAlbumInput = {\n  /** 指定したアルバムのトラック(ISRC)を含んでいる別音楽サービスのアルバムを一括登録 */\n  albumId?: Maybe<Scalars['TTID']>;\n  /** Apple Music か iTunes のアルバムを登録 */\n  appleMusicId?: Maybe<Scalars['String']>;\n  /** Spotify のアルバムを登録 */\n  spotifyId?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertAlbum */\nexport type UpsertAlbumPayload = {\n   __typename?: 'UpsertAlbumPayload';\n  /** 追加されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertArtist */\nexport type UpsertArtistInput = {\n  /**\n   * アーティスト名から全ての音楽サービスのアーティストを登録。登録後、関連アルバム、トラックを全て保存する。\n   * (ありきたりなアーティスト名の場合は関係のないアーティストが登録される可能性があるため注意)\n   */\n  artistName?: Maybe<Scalars['String']>;\n  /** Apple Music のアーティストを登録。登録後、関連アルバム、トラックを全て保存する。 */\n  appleMusicId?: Maybe<Scalars['String']>;\n  /** Spotify のアーティストを登録。登録後、関連アルバム、トラックを全て保存する。 */\n  spotifyId?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertArtist */\nexport type UpsertArtistPayload = {\n   __typename?: 'UpsertArtistPayload';\n  /** 追加されたアーティスト */\n  artists?: Maybe<Array<Artist>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** ユーザー */\nexport type User = {\n   __typename?: 'User';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** ユーザー名 */\n  username: Scalars['String'];\n};\n\nexport type AlbumQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type AlbumQuery = (\n  { __typename?: 'Query' }\n  & { album?: Maybe<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id' | 'totalTracks' | 'name' | 'releaseDate'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id' | 'spotifyId'>\n    )> }\n  )> }\n);\n\nexport type AlbumsQueryVariables = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<AlbumsSortInputObject>;\n  conditions?: Maybe<AlbumsConditionsInputObject>;\n};\n\n\nexport type AlbumsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id' | 'name'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id'>\n    )> }\n  )> }\n);\n\nexport type ArtistQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type ArtistQuery = (\n  { __typename?: 'Query' }\n  & { artist?: Maybe<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type ArtistsQueryVariables = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<ArtistsSortInputObject>;\n  conditions?: Maybe<ArtistsConditionsInputObject>;\n};\n\n\nexport type ArtistsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'CurrentUser' }\n    & Pick<CurrentUser, 'id' | 'name' | 'username'>\n    & { role: (\n      { __typename?: 'Role' }\n      & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n    ) }\n  ) }\n);\n\nexport type UpdateMeMutationVariables = {\n  input: UpdateMeInput;\n};\n\n\nexport type UpdateMeMutation = (\n  { __typename?: 'Mutation' }\n  & { updateMe?: Maybe<(\n    { __typename?: 'UpdateMePayload' }\n    & Pick<UpdateMePayload, 'error'>\n    & { currentUser?: Maybe<(\n      { __typename?: 'CurrentUser' }\n      & Pick<CurrentUser, 'id' | 'username' | 'name'>\n    )> }\n  )> }\n);\n\nexport type SigninMutationVariables = {\n  input: SigninInput;\n};\n\n\nexport type SigninMutation = (\n  { __typename?: 'Mutation' }\n  & { signin?: Maybe<(\n    { __typename?: 'SigninPayload' }\n    & Pick<SigninPayload, 'error'>\n  )> }\n);\n\n\nexport const AlbumDocument = gql`\n    query Album($id: TTID!) {\n  album(id: $id) {\n    id\n    totalTracks\n    name\n    releaseDate\n    artworkL {\n      url\n      width\n      height\n    }\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n      appleMusicId\n    }\n    itunesAlbum {\n      id\n      appleMusicId\n    }\n    spotifyAlbum {\n      id\n      spotifyId\n    }\n  }\n}\n    `;\n\n/**\n * __useAlbumQuery__\n *\n * To run a query within a React component, call `useAlbumQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAlbumQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n      }\nexport function useAlbumLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n        }\nexport type AlbumQueryHookResult = ReturnType<typeof useAlbumQuery>;\nexport type AlbumLazyQueryHookResult = ReturnType<typeof useAlbumLazyQuery>;\nexport type AlbumQueryResult = ApolloReactCommon.QueryResult<AlbumQuery, AlbumQueryVariables>;\nexport const AlbumsDocument = gql`\n    query Albums($cursor: CursorInputObject, $sort: AlbumsSortInputObject, $conditions: AlbumsConditionsInputObject) {\n  items: albums(cursor: $cursor, sort: $sort, conditions: $conditions) {\n    id\n    name\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n    }\n    itunesAlbum {\n      id\n    }\n    spotifyAlbum {\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useAlbumsQuery__\n *\n * To run a query within a React component, call `useAlbumsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumsQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      sort: // value for 'sort'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useAlbumsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n      }\nexport function useAlbumsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n        }\nexport type AlbumsQueryHookResult = ReturnType<typeof useAlbumsQuery>;\nexport type AlbumsLazyQueryHookResult = ReturnType<typeof useAlbumsLazyQuery>;\nexport type AlbumsQueryResult = ApolloReactCommon.QueryResult<AlbumsQuery, AlbumsQueryVariables>;\nexport const ArtistDocument = gql`\n    query Artist($id: TTID!) {\n  artist(id: $id) {\n    id\n    name\n    artworkL {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useArtistQuery__\n *\n * To run a query within a React component, call `useArtistQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useArtistQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n      }\nexport function useArtistLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n        }\nexport type ArtistQueryHookResult = ReturnType<typeof useArtistQuery>;\nexport type ArtistLazyQueryHookResult = ReturnType<typeof useArtistLazyQuery>;\nexport type ArtistQueryResult = ApolloReactCommon.QueryResult<ArtistQuery, ArtistQueryVariables>;\nexport const ArtistsDocument = gql`\n    query Artists($cursor: CursorInputObject, $sort: ArtistsSortInputObject, $conditions: ArtistsConditionsInputObject) {\n  items: artists(cursor: $cursor, sort: $sort, conditions: $conditions) {\n    id\n    name\n    artworkM {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useArtistsQuery__\n *\n * To run a query within a React component, call `useArtistsQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistsQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      sort: // value for 'sort'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useArtistsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n      }\nexport function useArtistsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n        }\nexport type ArtistsQueryHookResult = ReturnType<typeof useArtistsQuery>;\nexport type ArtistsLazyQueryHookResult = ReturnType<typeof useArtistsLazyQuery>;\nexport type ArtistsQueryResult = ApolloReactCommon.QueryResult<ArtistsQuery, ArtistsQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    name\n    username\n    role {\n      id\n      name\n      description\n      allowedActions\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const UpdateMeDocument = gql`\n    mutation UpdateMe($input: UpdateMeInput!) {\n  updateMe(input: $input) {\n    currentUser {\n      id\n      username\n      name\n    }\n    error\n  }\n}\n    `;\nexport type UpdateMeMutationFn = ApolloReactCommon.MutationFunction<UpdateMeMutation, UpdateMeMutationVariables>;\n\n/**\n * __useUpdateMeMutation__\n *\n * To run a mutation, you first call `useUpdateMeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMeMutation, { data, loading, error }] = useUpdateMeMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateMeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateMeMutation, UpdateMeMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateMeMutation, UpdateMeMutationVariables>(UpdateMeDocument, baseOptions);\n      }\nexport type UpdateMeMutationHookResult = ReturnType<typeof useUpdateMeMutation>;\nexport type UpdateMeMutationResult = ApolloReactCommon.MutationResult<UpdateMeMutation>;\nexport type UpdateMeMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateMeMutation, UpdateMeMutationVariables>;\nexport const SigninDocument = gql`\n    mutation Signin($input: SigninInput!) {\n  signin(input: $input) {\n    error\n  }\n}\n    `;\nexport type SigninMutationFn = ApolloReactCommon.MutationFunction<SigninMutation, SigninMutationVariables>;\n\n/**\n * __useSigninMutation__\n *\n * To run a mutation, you first call `useSigninMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSigninMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signinMutation, { data, loading, error }] = useSigninMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSigninMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SigninMutation, SigninMutationVariables>) {\n        return ApolloReactHooks.useMutation<SigninMutation, SigninMutationVariables>(SigninDocument, baseOptions);\n      }\nexport type SigninMutationHookResult = ReturnType<typeof useSigninMutation>;\nexport type SigninMutationResult = ApolloReactCommon.MutationResult<SigninMutation>;\nexport type SigninMutationOptions = ApolloReactCommon.BaseMutationOptions<SigninMutation, SigninMutationVariables>;","import React from 'react';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst ImageComponent = ({\n  className = \"\", src = \"\", title = \"\", width\n}:{\n  className?:string, src?:string, title?:string, width:string|number\n}) => {\n  if(src === \"\") src = `${process.env.PUBLIC_URL}/no_image.png`\n\n  return (\n    <CardMedia\n      className={className}\n      image={src}\n      title={title}\n      style={{ width: width, height: width }}\n    />\n  )\n}\n\nexport default ImageComponent;\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport ImageComponent from '../image/ImageComponent'\nimport { Grid, CardActionArea, CardContent, Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\ninterface Image {\n  title: string\n  src?: string | null\n  width: string | number\n  linkUrl?: string\n  componentInImage?: JSX.Element\n}\n\nconst ImageCardComponent = (image:Image) => {\n  const link = image.linkUrl ? { component: Link, to: image.linkUrl } : {}\n\n  return (\n    React.createElement(Grid, {\n      container: true, item: true, xs: true,\n      direction: \"row\", justify: \"center\", alignItems: \"center\",\n      style: { textDecoration: \"none\" },\n      ...link,\n      children: (\n        <Card style={{ width: image.width, position: \"relative\" }}>\n          <CardActionArea>\n            <Grid container style={{ position: \"absolute\", left: \"5px\", bottom: \"5px\" }}>\n              { image.componentInImage ? image.componentInImage : <></> }\n            </Grid>\n            <ImageComponent src={image.src || \"\"} width={image.width} title={image.title}/>\n          </CardActionArea>\n          <CardContent style={{ padding: \"5px 5px\" }}>\n            <Typography style={{\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              whiteSpace: \"nowrap\"\n            }} variant=\"caption\" color=\"textSecondary\" component=\"p\">\n              {image.title}\n            </Typography>\n          </CardContent>\n        </Card>\n      )\n    })\n  )\n}\n\nexport default ImageCardComponent\n","import { useLocation } from \"react-router-dom\"\nimport _ from \"lodash\"\n\nexport const ParameterPrefixKeys = {\n  album:  \"b\",\n  artist: \"a\",\n}\n\nexport const ParameterKeys = {\n  keyword:  \"q\",\n  ids:      \"i\",\n  status:   \"s\",\n  order:    \"o\",\n  sortType: \"r\",\n//tag:      \"t\", // いつか実装する\n}\n\nexport type ParameterPrefix = keyof typeof ParameterPrefixKeys;\n\nexport default function useParameters<T>(prefix:ParameterPrefix){\n  const location = useLocation()\n  const params = new URLSearchParams(location.search)\n  const prefixKey = ParameterPrefixKeys[prefix]\n\n  const getUniqueValues = (key:string):string[] => {\n    const value = params.get(key)\n    if(value === null) return []\n\n    const values = value.split(\",\")\n    const uniqueValues = new Set<string>()\n\n    values.forEach((value) => {\n      uniqueValues.add(value)\n    })\n\n    return Array.from(uniqueValues)\n  }\n\n  let parameters = {}\n\n  // ID\n  getUniqueValues(prefixKey + ParameterKeys.ids).forEach((value) => {\n    switch( true ){\n      case /^art/.test(value):\n        parameters = _.merge(parameters, { conditions: { artists: { id: [value] } } })\n        break;\n      case /^abm/.test(value):\n        parameters = _.merge(parameters, { conditions: { albums: { id: [value] } } })\n        break;\n      case /^trk/.test(value):\n        parameters = _.merge(parameters, { conditions: { tracks: { id: [value] } } })\n        break;\n    }\n  })\n\n  // ステータス\n  getUniqueValues(prefixKey + ParameterKeys.status).forEach((value) => {\n    parameters = _.merge(parameters, { conditions: { status: [value] } })\n  })\n\n  // 並び順対象\n  getUniqueValues(prefixKey + ParameterKeys.order).forEach((value) => {\n    parameters = _.merge(parameters, { sort: { order: value } })\n  })\n\n  // 並び順\n  getUniqueValues(prefixKey + ParameterKeys.sortType).forEach((value) => {\n    parameters = _.merge(parameters, { sort: { type: value } })\n  })\n\n  return parameters as T\n}\n","import React from 'react';\nimport { Album } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport { Grid } from '@material-ui/core';\nimport { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\n\nconst AlbumItemLayout = (\n  { album, width }:\n  { album: Album, width:string|number }\n) => {\n  const style = {\n    width: \"15px\",\n    height: \"15px\",\n    borderRadius: \"50%\",\n    fontSize: \"10px\",\n    color: \"#fff\",\n    lineHeight: \"15px\",\n    textAlign: \"center\" as \"center\",\n    background: \"#000\",\n  }\n\n  const serviceIcons = []\n  if(album.appleMusicAlbum){\n    serviceIcons.push(<Grid key={1} item style={{...style, backgroundColor: \"#ff2f56\"}}>A</Grid>)\n  }\n  if(album.itunesAlbum){\n    serviceIcons.push(<Grid key={2} item style={{...style, backgroundColor: \"#0070c9\"}}>iT</Grid>)\n  }\n  if(album.spotifyAlbum){\n    serviceIcons.push(<Grid key={3} item style={{...style, backgroundColor: \"#1DB954\"}}>S</Grid>)\n  }\n  const componentInImage = <>{serviceIcons}</>\n\n  const params = new URLSearchParams()\n  params.set(ParameterPrefixKeys.artist + ParameterKeys.ids, album.id)\n\n  return (\n    <ImageCardComponent\n      title={album.name}\n      src={album.artworkM.url}\n      width={width}\n      linkUrl={`/albums/${album.id}?${params.toString()}`}\n      componentInImage={componentInImage}\n    />\n  )\n}\n\nexport default AlbumItemLayout\n","import React, { useState } from 'react';\nimport { Waypoint } from 'react-waypoint';\n\n// TODO: hasNext とかないのでページ遷移によって再度取得してしまう？\nconst PaginationComponent = (\n  { component, no, offset, limit, fetchMore }:\n  { component:JSX.Element, no:number, offset:number, limit:number, fetchMore:any }\n) => {\n  // 並び替えなどによる内部の component の変更を検知し再度ページネーションする\n  const [prevComponent, setPrevComponent] = useState(component)\n  const [alreadyFetch, setAlreadyFetch] = useState(false)\n  const fetchNo = offset - limit\n  const isFetch = no === fetchNo\n\n  const exeFetchMore = () => fetchMore({\n    variables: {\n      cursor: {\n        offset: offset\n      }\n    },\n    updateQuery: (\n      prev:{ items: any[] },\n      { fetchMoreResult }:{ fetchMoreResult:{ items: any[] } }\n    ) => {\n      if (!fetchMoreResult) return prev;\n      return { ...prev, ...{ items: [...prev.items, ...fetchMoreResult.items] } }\n    }\n  })\n\n  const enterFunction = () => {\n    if(alreadyFetch && prevComponent === component) return\n    setAlreadyFetch(true)\n    setPrevComponent(component)\n    return exeFetchMore()\n  }\n\n  return (\n    <>\n      { component }\n      { isFetch ? <Waypoint onEnter={enterFunction}/> : <></> }\n    </>\n  )\n}\n\nexport default PaginationComponent\n","import React, { useState } from 'react';\nimport { useAlbumsQuery, Album, AlbumsQueryVariables } from '../../../graphql/types.d';\nimport AlbumItemLayout from '../item/AlbumItemLayout';\nimport { Grid, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport useParameters, { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\n\nconst AlbumsLayout = () => {\n  const [order, setOrder] = useState<string>(\"release.desc\")\n  const parameters = useParameters<AlbumsQueryVariables>(\"album\")\n  let history = useHistory()\n  const limit = 50\n  const { error, data, fetchMore } = useAlbumsQuery(\n    {\n      variables: {\n        cursor: {\n          offset: 0,\n          limit: limit,\n        },\n        sort: parameters.sort,\n        conditions: parameters.conditions,\n      },\n      // 戻るボタンで戻っても最初から読み込みが発生しない\n      fetchPolicy: \"cache-first\"\n    }\n  )\n\n  // 並び順初期化\n  const _order = parameters?.sort ? `${parameters?.sort?.order}.${parameters?.sort?.type}` : null\n  if(_order && order !== _order){\n    setOrder(_order)\n  }\n\n  if (error) return <div>{error.message}</div>\n\n  let content:JSX.Element[] = []\n\n  if (data) {\n    content =\n      data.items.map(\n        (item, i) =>\n          <Grid item key={i}>\n            <PaginationComponent\n              component={<AlbumItemLayout album={item as Album} width=\"150px\" />}\n              no={i}\n              offset={data.items.length}\n              limit={limit}\n              fetchMore={fetchMore}\n            />\n          </Grid>\n      )\n  }\n\n  const handleChange = (event: React.ChangeEvent<{\n      name?: string | undefined\n      value: unknown\n  }>, _child: React.ReactNode) => {\n    const sort = event.target.value as string\n    const [order, sortType] = sort.split(\".\")\n    setOrder(sort)\n    const params = new URLSearchParams(history.location.search)\n    params.set(ParameterPrefixKeys.album + ParameterKeys.order, order)\n    params.set(ParameterPrefixKeys.album + ParameterKeys.sortType, sortType)\n    history.push(`${history.location.pathname}?${params.toString()}`)\n  }\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n      spacing={1}\n    >\n      <Grid item >\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          <Grid>\n            <FormControl variant=\"outlined\" style={{minWidth: 150}}>\n              <InputLabel id=\"demo-simple-select-outlined-label\">アルバム表示順</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={order}\n                onChange={handleChange}\n                label=\"アルバム表示順\"\n              >\n                <MenuItem value={\"release.desc\"}>発売日新しい順</MenuItem>\n                <MenuItem value={\"release.asc\"}>発売日古い順</MenuItem>\n                <MenuItem value={\"new.desc\"}>追加日新しい順</MenuItem>\n                <MenuItem value={\"new.asc\"}>追加日古い順</MenuItem>\n                <MenuItem value={\"popularity.desc\"}>人気順</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          {content}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AlbumsLayout;\n","import React from 'react';\nimport { useScrollTrigger, AppBar, Toolbar, Typography, Slide, IconButton, Grid } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person'\nimport AlbumIcon from '@material-ui/icons/Album'\nimport { Link } from 'react-router-dom';\n\n// ref: https://material-ui.com/components/app-bar/#hide-app-bar\ninterface Props {\n  window?: () => Window;\n  children: React.ReactElement;\n}\n\nconst HideOnScroll = (props: Props) => {\n  const { children, window } = props;\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nconst Bar = () =>\n  <>\n    <HideOnScroll>\n      <AppBar>\n        <Toolbar>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n            spacing={3}\n          >\n            <Grid item>\n              <Typography variant=\"h6\">ゲーム音楽</Typography>\n            </Grid>\n            <Grid item>\n              <IconButton component={Link} to={`/artists`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <PersonIcon />\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <IconButton component={Link} to={`/albums`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <AlbumIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </HideOnScroll>\n    <Toolbar style={{ margin: \"4px\" }} />\n  </>\n\nexport default Bar\n","import { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { onError } from \"apollo-link-error\"\n\nconst httpLink = new HttpLink({ uri: process.env.REACT_APP_GRAPHQL_URI, credentials: 'include' })\nconst headersLink = new ApolloLink((operation, forward) => forward(operation))\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst link = ApolloLink.from([headersLink, errorLink, httpLink])\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache({ dataIdFromObject: object => object.id })\n})\n","import React from 'react';\nimport { Artist } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\n\nconst ArtistItemLayout = (\n  { artist, width }:\n  { artist: Artist, width:string|number }\n) => {\n  const params = new URLSearchParams()\n  params.set(ParameterPrefixKeys.album + ParameterKeys.ids, artist.id)\n\n  return (\n    <ImageCardComponent\n      title={artist.name}\n      src={artist.artworkM.url}\n      width={width}\n      linkUrl={`/artists/${artist.id}?${params.toString()}`}\n    />\n  )\n}\n\nexport default ArtistItemLayout\n","import React, { useState } from 'react';\nimport { useArtistsQuery, ArtistsQueryVariables, Artist } from '../../../graphql/types.d';\nimport { Grid, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport ArtistItemLayout from '../item/ArtistItemLayout';\nimport useParameters, { ParameterPrefixKeys, ParameterKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\n\nconst ArtistsLayout = () => {\n  const [order, setOrder] = useState<string>(\"name.asc\")\n  const parameters = useParameters<ArtistsQueryVariables>(\"artist\")\n  let history = useHistory()\n  const limit = 30\n  const { error, data, fetchMore } = useArtistsQuery(\n    {\n      variables: {\n        cursor: {\n          offset: 0,\n          limit: limit,\n        },\n        sort: parameters.sort,\n        conditions: parameters.conditions,\n      },\n      // 戻るボタンで戻っても最初から読み込みが発生しない\n      fetchPolicy: \"cache-first\"\n    }\n  )\n\n  // 並び順初期化\n  const _order = parameters?.sort ? `${parameters?.sort?.order}.${parameters?.sort?.type}` : null\n  if(_order && order !== _order){\n    setOrder(_order)\n  }\n\n  if (error) return <div>{error.message}</div>\n\n  let content:JSX.Element[] = []\n\n  if (data) {\n    content =\n      data.items.map(\n        (item, i) =>\n          <Grid item key={i}>\n            <PaginationComponent\n              component={<ArtistItemLayout artist={item as Artist} width=\"150px\" />}\n              no={i}\n              offset={data.items.length}\n              limit={limit}\n              fetchMore={fetchMore}\n            />\n          </Grid>\n      )\n  }\n\n  const handleChange = (event: React.ChangeEvent<{\n    name?: string | undefined\n    value: unknown\n  }>, _child: React.ReactNode) => {\n    const sort = event.target.value as string\n    const [order, sortType] = sort.split(\".\")\n    setOrder(sort)\n    const params = new URLSearchParams(history.location.search)\n    params.set(ParameterPrefixKeys.artist + ParameterKeys.order, order)\n    params.set(ParameterPrefixKeys.artist + ParameterKeys.sortType, sortType)\n    history.push(`${history.location.pathname}?${params.toString()}`)\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item >\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          <Grid>\n            <FormControl variant=\"outlined\" style={{minWidth: 150}}>\n              <InputLabel id=\"demo-simple-select-outlined-label\">アーティスト表示順</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={order}\n                onChange={handleChange}\n                label=\"アーティスト表示順\"\n              >\n                <MenuItem value={\"name.asc\"}>名前昇順</MenuItem>\n                <MenuItem value={\"name.desc\"}>名前降順</MenuItem>\n                <MenuItem value={\"new.desc\"}>追加日新しい順</MenuItem>\n                <MenuItem value={\"new.asc\"}>追加日古い順</MenuItem>\n                <MenuItem value={\"popularity.desc\"}>人気順</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          {content}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ArtistsLayout\n","import React from 'react';\nimport { useAlbumQuery } from '../../../graphql/types.d';\nimport { Grid, Tabs, Tab, Button, MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport ArtistsLayout from '../../artist/list/ArtistsLayout';\nimport { red, green, blue } from '@material-ui/core/colors';\n\n// TODO: このファイル汚すぎるのでリファクタすること\n\nconst AlbumInfoLayout = () => {\n  const { id } = useParams()\n  const { loading, error, data } = useAlbumQuery({ variables: { id: id } })\n  const [index, setIndex] = React.useState<number|null>(null)\n\n  if (error) return <div>{error.message}</div>\n\n  let content = <></>\n\n  const resize = (event: React.SyntheticEvent<HTMLIFrameElement, Event>) => {\n    const target = event.target as HTMLIFrameElement\n    target.style.width  = document.documentElement.scrollWidth + 'px';\n    return event\n  }\n\n  if(!loading && data && data.album) {\n    // default index\n    if(null === index){\n      if(data.album.appleMusicAlbum){\n        setIndex(0)\n      }else if(data.album.itunesAlbum){\n        setIndex(1)\n      }else if(data.album.spotifyAlbum){\n        setIndex(2)\n      }\n    }\n\n    // share button\n    let button_contents:JSX.Element[] = []\n    if(data.album.appleMusicAlbum){\n      button_contents.push(\n        <Grid item key={0}>\n          <MuiThemeProvider theme={createMuiTheme({ palette: { primary: red } })}>\n            <Button\n              href={`https://music.apple.com/jp/album/${data.album.appleMusicAlbum.appleMusicId}`}\n              target=\"_blank\"\n              variant=\"contained\" color=\"primary\"\n            >\n              Apple Music で聴く\n            </Button>\n          </MuiThemeProvider>\n        </Grid>\n      )\n    }\n    if(data.album.itunesAlbum){\n      button_contents.push(\n        <Grid item key={1}>\n          <MuiThemeProvider theme={createMuiTheme({ palette: { primary: blue } })}>\n            <Button\n              href={`https://music.apple.com/jp/album/${data.album.itunesAlbum.appleMusicId}`}\n              target=\"_blank\"\n              variant=\"contained\" color=\"primary\"\n            >\n              iTunes で聴く\n            </Button>\n          </MuiThemeProvider>\n        </Grid>\n      )\n    }\n    if(data.album.spotifyAlbum){\n      button_contents.push(\n        <Grid item key={2}>\n          <MuiThemeProvider theme={createMuiTheme({ palette: { primary: green } })}>\n            <Button\n              href={`https://open.spotify.com/album/${data.album.spotifyAlbum.spotifyId}`}\n              target=\"_blank\"\n              variant=\"contained\" color=\"primary\"\n            >\n              Spotify で聴く\n            </Button>\n          </MuiThemeProvider>\n        </Grid>\n      )\n    }\n\n    // view iframe\n    let preview_content = <></>\n    if(data.album.appleMusicAlbum && index === 0) {\n      preview_content =\n        <iframe\n          onLoad={event=>resize(event)}\n          title={data.album.id}\n          allow=\"autoplay *; encrypted-media *;\"\n          width=\"300\"\n          height=\"500\"\n          frameBorder=\"0\"\n          style={{overflow:\"hidden\", background:\"transparent\"}}\n          src={`https://embed.music.apple.com/jp/album/game/${data.album.appleMusicAlbum.appleMusicId}?app=music`}>\n        </iframe>\n    }\n\n    if(data.album.itunesAlbum && index === 1) {\n      preview_content =\n        <iframe\n          onLoad={event=>resize(event)}\n          title={data.album.id}\n          src={`https://tools.applemusic.com/embed/v1/album/${data.album.itunesAlbum.appleMusicId}?country=jp`}\n          frameBorder=\"0\"\n          width=\"300\"\n          height=\"500\">\n        </iframe>\n    }\n\n    if(data.album.spotifyAlbum && index === 2) {\n      preview_content =\n        <iframe\n          onLoad={event=>resize(event)}\n          title={data.album.id}\n          src={`https://open.spotify.com/embed/album/${data.album.spotifyAlbum.spotifyId}`}\n          width=\"300\"\n          height=\"500\"\n          frameBorder=\"0\"\n          allow=\"encrypted-media\">\n        </iframe>\n    }\n\n    content =\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n        >\n          <Grid item>\n            {preview_content}\n          </Grid>\n          <Grid item>\n            <Grid container spacing={1} direction=\"row\">\n              {button_contents}\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Grid container>\n              <ArtistsLayout />\n            </Grid>\n          </Grid>\n      </Grid>\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item>\n        <Tabs\n          value={index || 0}\n          onChange={(_event: React.ChangeEvent<{}>, newValue: number) => setIndex(newValue)}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"full width tabs example\"\n        >\n          <Tab label=\"Apple Music\" disabled={!data?.album?.appleMusicAlbum} />\n          <Tab label=\"iTunes\" disabled={!data?.album?.itunesAlbum}/>\n          <Tab label=\"Spotify\" disabled={!data?.album?.spotifyAlbum}/>\n        </Tabs>\n      </Grid>\n      <Grid item>\n        {content}\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AlbumInfoLayout\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Artist, ArtistDocument } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport AlbumsLayout from '../../album/list/AlbumsLayout';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\n\nconst ArtistInfoLayout = () => {\n  const { id } = useParams()\n  const { error, data } =\n    useQuery<{ artist: Artist | null }>(ArtistDocument,{ variables: { id: id } })\n\n  if (error) return <div>{error.message}</div>\n\n  let content = <></>\n\n  if (data && data.artist) {\n    content =\n      <Grid item>\n        <ImageCardComponent\n          title={data.artist.name}\n          src={data.artist.artworkL.url}\n          width={270}\n        />\n      </Grid>\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {content}\n      <Grid item>\n        <AlbumsLayout />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ArtistInfoLayout\n","import React, { useState } from 'react';\nimport { Grid, FormControl, InputLabel, Input, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert'\nimport { useSigninMutation, SigninPayload } from '../../../graphql/types.d';\n\nconst UserSigninLayout = () => {\n  const [notification, setNotification] = useState(<></>)\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n\n  interface SigninResponse {\n    data: { signin: SigninPayload }\n  }\n  const [signin] = useSigninMutation({\n    update: (_, response:SigninResponse) => {\n      if (response.data.signin.error) {\n        setNotification(<Alert severity=\"error\">{response.data.signin.error}</Alert>)\n      } else {\n        setNotification(<Alert severity=\"success\">ログインしました</Alert>)\n      }\n    },\n    variables: { input: { username, password } },\n  })\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <form autoComplete=\"off\">\n        <div>\n          <FormControl>\n            <InputLabel>ユーザー名</InputLabel>\n            <Input value={username} onChange={e => setUsername(e.target.value || \"\")}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>パスワード</InputLabel>\n            <Input value={password} onChange={e => setPassword(e.target.value || \"\")} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <Button type=\"submit\" onClick={(e) =>{e.preventDefault(); signin()}} variant=\"contained\">Signin</Button>\n        </div>\n        <div>{notification}</div>\n      </form>\n    </Grid>\n  )\n}\n\nexport default UserSigninLayout\n","import React, { useState } from 'react';\nimport { Grid, FormControl, InputLabel, Input, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert'\nimport { useMeQuery, useUpdateMeMutation, UpdateMePayload, UpdateMeInput } from '../../../graphql/types.d';\n\nconst UserMeLayout = () => {\n  const [notification, setNotification] = useState(<></>)\n  const [name, setName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [oldPassword, setOldPassword] = useState(\"\")\n  const [newPassword, setNewPassword] = useState(\"\")\n  const [input, setInput] = useState<UpdateMeInput>({ oldPassword })\n\n  // カレントユーザーデフォルト値\n  const { data } = useMeQuery()\n  if(name === \"\" && username === \"\" && data && data.me){\n    setName(data.me.name)\n    setUsername(data.me.username)\n  }\n  // TODO: 適当すぎるので直すこと\n  let role:JSX.Element[] = []\n  if(data && data.me){\n    role = data.me.role.allowedActions.map((action, i) => {\n        return <p key={i}>{action}</p>\n      }\n    )\n  }\n\n  // カレントユーザー更新\n  interface UpdateMeResponse {\n    data: { updateMe: UpdateMePayload }\n  }\n  const [updateMe] = useUpdateMeMutation({\n    update: (_, response:UpdateMeResponse) => {\n      if (response.data.updateMe.error) {\n        setNotification(<Alert severity=\"error\">{response.data.updateMe.error}</Alert>)\n      } else {\n        setNotification(<Alert severity=\"success\">更新しました</Alert>)\n      }\n    },\n    variables: { input },\n  })\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <form autoComplete=\"off\">\n        <div>ID: {(data && data.me) ? data.me.id : \"\"}</div>\n        <div>\n          <FormControl>\n            <InputLabel>名前</InputLabel>\n            <Input value={name} onChange={e => {\n              setName(e.target.value || \"\")\n              setInput({ ...input, name: (e.target.value || \"\") })\n            }}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>ユーザー名</InputLabel>\n            <Input value={username} onChange={e => {\n              setUsername(e.target.value || \"\")\n              setInput({ ...input, username: (e.target.value || \"\") })\n            }}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>新しいパスワード</InputLabel>\n            <Input value={newPassword} onChange={e => {\n              setNewPassword(e.target.value || \"\")\n              setInput({ ...input, newPassword: (e.target.value || \"\") })\n            }} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <FormControl required={true}>\n            <InputLabel>古いパスワード</InputLabel>\n            <Input value={oldPassword} onChange={e => {\n              setOldPassword(e.target.value || \"\")\n              setInput({ ...input, oldPassword: (e.target.value || \"\") })\n            }} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <Button type=\"submit\" onClick={(e) =>{e.preventDefault(); updateMe()}} variant=\"contained\">Update</Button>\n        </div>\n        <div>{notification}</div>\n        <div>権限: {role}</div>\n      </form>\n    </Grid>\n  )\n}\n\nexport default UserMeLayout\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\"\nimport AlbumsLayout from '../album/list/AlbumsLayout';\nimport Bar from './Bar';\nimport { ApolloProvider } from '@apollo/react-hoc';\nimport client from './client';\nimport AlbumInfoLayout from '../album/info/AlbumInfoLayout';\nimport ArtistsLayout from '../artist/list/ArtistsLayout';\nimport ArtistInfoLayout from '../artist/info/ArtistInfoLayout';\nimport UserSigninLayout from '../user/signin/UserSigninLayout';\nimport UserMeLayout from '../user/me/UserMeLayout';\nimport { Grid } from '@material-ui/core';\n\nconst RootStyleLayout = () =>\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <Bar />\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\">\n          <Grid item>\n            <Switch>\n              <Route exact path=\"/\" component={AlbumsLayout} />\n              <Route exact path=\"/artists\" component={ArtistsLayout} />\n              <Route exact path=\"/artists/:id\" component={ArtistInfoLayout} />\n              <Route exact path=\"/albums\" component={AlbumsLayout} />\n              <Route exact path=\"/albums/:id\" component={AlbumInfoLayout} />\n              <Route exact path=\"/signin\" component={UserSigninLayout} />\n              <Route exact path=\"/me\" component={UserMeLayout} />\n            </Switch>\n          </Grid>\n      </Grid>\n    </ApolloProvider>\n  </BrowserRouter>\n\nexport default RootStyleLayout\n","import React from 'react';\nimport { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport Root from './Root';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  },\n  typography: {\n    fontFamily: [\n      '\"Noto Sans JP\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n})\n\nconst RootStyleLayout = () =>\n  <ThemeProvider theme={theme}>\n    {/* リセットCSS */}\n    <CssBaseline />\n    {/* フォント */}\n    <link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+JP\" rel=\"stylesheet\" />\n    <Root />\n  </ThemeProvider>\n\nexport default RootStyleLayout\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport RootStyleLayout from './RootStyle';\nimport * as serviceWorker from './serviceWorker'\n\nconst App = () => <RootStyleLayout />\n\nexport default App\n\nserviceWorker.unregister()\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './layouts/app/App';\n\nReactDOM.render(<App />, document.querySelector('#app'));\n"],"sourceRoot":""}