{"version":3,"sources":["graphql/types.d.tsx","components/image/ImageComponent.tsx","components/imageCard/ImageCardComponent.tsx","hooks/useParameters.ts","layouts/album/item/AlbumItemLayout.tsx","hooks/playerContext.tsx","components/pagination/paginationComponent.tsx","layouts/album/list/AlbumsLayout.tsx","layouts/app/Bar.tsx","layouts/app/client.ts","layouts/artist/item/ArtistItemLayout.tsx","layouts/artist/list/ArtistsLayout.tsx","components/player/PreviewPlayer.ts","components/player/ShareButtonComponent.tsx","components/player/PreviewPlayerItemComponent.tsx","components/player/PreviewPlayerComponent.tsx","layouts/album/info/AlbumInfoLayout.tsx","layouts/artist/info/ArtistInfoLayout.tsx","layouts/user/signin/UserSigninLayout.tsx","layouts/user/me/UserMeLayout.tsx","layouts/player/PreviewPlayerLayout.tsx","layouts/app/PlayerBar.tsx","layouts/app/Root.tsx","layouts/app/RootStyle.tsx","layouts/app/serviceWorker.ts","layouts/app/App.tsx","index.tsx"],"names":["AlbumsQueryOrderEnum","ArtistsQueryOrderEnum","SortEnum","StatusEnum","AlbumDocument","gql","AlbumsDocument","ArtistDocument","ArtistsDocument","MeDocument","UpdateMeDocument","SigninDocument","ImageComponent","className","src","title","width","process","CardMedia","image","style","height","ImageCardComponent","link","linkUrl","component","Link","to","createElement","Grid","item","textDecoration","children","Card","position","CardActionArea","container","left","bottom","componentInImage","CardContent","padding","Typography","overflow","textOverflow","whiteSpace","variant","color","ParameterPrefixKeys","album","artist","ParameterKeys","useParameters","prefix","location","useLocation","params","URLSearchParams","search","prefixKey","getUniqueValues","key","value","get","values","split","uniqueValues","Set","forEach","add","Array","from","customizer","objValue","srcValue","_","isArray","concat","parameters","test","merge","conditions","artists","id","albums","tracks","status","mergeWith","length","sort","order","type","PlaybackStatus","LoadingStatus","AlbumItemLayout","history","useHistory","set","borderRadius","fontSize","lineHeight","textAlign","background","serviceIcons","appleMusicAlbum","push","backgroundColor","itunesAlbum","spotifyAlbum","Pending","Ignore","name","artworkM","url","toString","PaginationComponent","no","offset","limit","fetchMore","useState","prevComponent","setPrevComponent","alreadyFetch","setAlreadyFetch","isFetch","onEnter","variables","cursor","updateQuery","prev","fetchMoreResult","items","AlbumsLayout","baseOptions","setOrder","fetchPolicy","ApolloReactHooks","error","data","_order","message","content","map","i","spacing","direction","justify","alignItems","FormControl","minWidth","InputLabel","Select","labelId","onChange","event","_child","target","sortType","pathname","label","MenuItem","HideOnScroll","props","window","trigger","useScrollTrigger","undefined","Slide","appear","in","Bar","AppBar","Toolbar","IconButton","edge","size","aria-label","httpLink","HttpLink","uri","credentials","headersLink","ApolloLink","operation","forward","errorLink","onError","graphQLErrors","networkError","locations","path","console","log","ApolloClient","cache","InMemoryCache","dataIdFromObject","object","ArtistItemLayout","ArtistsLayout","PreviewPlayer","dispatch","playlist","currentPlaybackNo","this","track","index","previewUrl","player","Howl","html5","preload","autoplay","onend","a","autoNextPlay","onplay","volume","fade","isEmpty","play","stopAndPlay","nextNo","stop","currentNo","stopNo","playNo","pause","PlayerContext","createContext","initialState","playbackStatus","None","loadingStatus","Done","reducer","state","action","Stop","Play","nextPlay","Pause","Loading","PlayerProvider","useReducer","Provider","ShareButtonComponent","useContext","contents","theme","createMuiTheme","palette","primary","red","Button","href","appleMusicId","onClick","blue","green","spotifyId","useStyles","makeStyles","transform","playingIcon","animationName","animationDuration","animationIterationCount","animationTimingFunction","PreviewPlayerItemComponent","playAction","averagePopularity","classes","playable","playing","currentTrack","currentTrackIcon","svgProps","stopColor","React","cloneElement","fill","starable","popularity","TableRow","TableCell","align","disabled","PreviewPlayerComponent","ms","durationMs","reduce","accumulator","currentValue","Intl","DateTimeFormat","year","formatToParts","Date","releaseDate","literal","releaseYear","initPlayer","useRef","current","_player","meanBy","t","TableContainer","Paper","maxWidth","Table","TableHead","colSpan","border","artworkL","totalTracks","seconds","parseInt","toFixed","minutes","hours","days","timeConversion","TableBody","AlbumInfoLayout","useParams","loading","album_content","ArtistInfoLayout","useQuery","UserSigninLayout","notification","setNotification","username","setUsername","password","setPassword","update","response","signin","Alert","severity","input","autoComplete","Input","e","preventDefault","UserMeLayout","setName","oldPassword","setOldPassword","newPassword","setNewPassword","setInput","me","role","allowedActions","useUpdateMeMutation","updateMe","required","_theme","loadingIcon","PreviewPlayerLayout","playbackButton","skipButton","artwork_content","title_content","xs","PlayerBar","top","RootStyleLayout","client","Container","flexGrow","exact","main","secondary","typography","fontFamily","join","ThemeProvider","CssBaseline","rel","Root","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","App","RootStyle","some","toMatchItem","userAgent","URL","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.eb330472.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** 正の整数 */\n  PositiveNumber: any;\n  /** Table id, hex Timestamp, ID */\n  TTID: any;\n};\n\n/** アルバム */\nexport type Album = {\n   __typename?: 'Album';\n  /** Apple Music アルバム */\n  appleMusicAlbum?: Maybe<AppleMusicAlbum>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** iTunes アルバム */\n  itunesAlbum?: Maybe<AppleMusicAlbum>;\n  /** タイトル */\n  name: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アルバム */\n  spotifyAlbum?: Maybe<SpotifyAlbum>;\n  /** ステータス */\n  status: StatusEnum;\n  /** トラック数 */\n  totalTracks: Scalars['PositiveNumber'];\n  /** トラック */\n  tracks: Array<Track>;\n};\n\nexport type AlbumsConditionsInputObject = {\n  /** アーティストID */\n  artists?: Maybe<IdInputObject>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n};\n\nexport enum AlbumsQueryOrderEnum {\n  /** 追加順 */\n  New = 'NEW',\n  /** 発売日順 */\n  Release = 'RELEASE',\n  /** 人気順 */\n  Popularity = 'POPULARITY'\n}\n\nexport type AlbumsSortInputObject = {\n  /** 並び順対象 */\n  order?: Maybe<AlbumsQueryOrderEnum>;\n  /** 並び順 */\n  type?: Maybe<SortEnum>;\n};\n\n/** Apple Music アルバム */\nexport type AppleMusicAlbum = {\n   __typename?: 'AppleMusicAlbum';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n};\n\n/** Apple Music アーティスト */\nexport type AppleMusicArtist = {\n   __typename?: 'AppleMusicArtist';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** アーティスト */\nexport type Artist = {\n   __typename?: 'Artist';\n  /** 関連アルバム */\n  albums?: Maybe<Array<Album>>;\n  /** Apple Music アーティスト */\n  appleMusicArtists?: Maybe<Array<AppleMusicArtist>>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アーティスト */\n  spotifyArtists?: Maybe<Array<SpotifyArtist>>;\n  /** ステータス */\n  status: StatusEnum;\n  /** 関連曲 */\n  tracks?: Maybe<Array<Track>>;\n};\n\nexport type ArtistsConditionsInputObject = {\n  /** アルバムID */\n  albums?: Maybe<IdInputObject>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n};\n\nexport enum ArtistsQueryOrderEnum {\n  /** 名前順 */\n  Name = 'NAME',\n  /** 追加順 */\n  New = 'NEW',\n  /** 人気順 */\n  Popularity = 'POPULARITY'\n}\n\nexport type ArtistsSortInputObject = {\n  /** ソート対象 */\n  order?: Maybe<ArtistsQueryOrderEnum>;\n  /** 並び順 */\n  type?: Maybe<SortEnum>;\n};\n\n/** アートワーク */\nexport type Artwork = {\n   __typename?: 'Artwork';\n  /** 高さ */\n  height?: Maybe<Scalars['PositiveNumber']>;\n  /** URL */\n  url?: Maybe<Scalars['String']>;\n  /** 幅 */\n  width?: Maybe<Scalars['PositiveNumber']>;\n};\n\n/** Autogenerated input type of ChangeStatus */\nexport type ChangeStatusInput = {\n  /** 変更したいアーティストID */\n  artistId?: Maybe<Scalars['TTID']>;\n  /** 変更したいアルバムID */\n  albumId?: Maybe<Scalars['TTID']>;\n  /** 変更したいトラックID */\n  trackId?: Maybe<Scalars['TTID']>;\n  /** 変更したいステータス */\n  status: StatusEnum;\n  /** true の場合は関連のステータスは変更しない。デフォルトは false。アーティスト限定 */\n  only?: Maybe<Scalars['Boolean']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ChangeStatus */\nexport type ChangeStatusPayload = {\n   __typename?: 'ChangeStatusPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  /** 変更されたステータスを持ったモデル */\n  model?: Maybe<ModelHasStatusUnion>;\n};\n\n/** Autogenerated input type of ClearCache */\nexport type ClearCacheInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ClearCache */\nexport type ClearCachePayload = {\n   __typename?: 'ClearCachePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  results?: Maybe<Array<Scalars['String']>>;\n};\n\n/** Autogenerated input type of CompactAlbum */\nexport type CompactAlbumInput = {\n  /** 統合後のアルバム名。 */\n  name: Scalars['String'];\n  /** 統合したいアルバムID。Apple Music アルバムのみ統合される。指定した順番通りに統合する。 */\n  albumIdsForAppleMusic?: Maybe<Array<Scalars['TTID']>>;\n  /** 統合したいアルバムID。Spotify アルバムのみ統合される。指定した順番通りに統合する。 */\n  albumIdsForSpotify?: Maybe<Array<Scalars['TTID']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CompactAlbum */\nexport type CompactAlbumPayload = {\n   __typename?: 'CompactAlbumPayload';\n  /** 統合されたアルバム */\n  album?: Maybe<Album>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** カレントユーザー */\nexport type CurrentUser = {\n   __typename?: 'CurrentUser';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** ロール */\n  role: Role;\n  /** ユーザー名 */\n  username: Scalars['String'];\n};\n\nexport type CursorInputObject = {\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n};\n\n\nexport type IdInputObject = {\n  /** ID */\n  id?: Maybe<Array<Scalars['TTID']>>;\n};\n\n/** Autogenerated input type of MixAlbum */\nexport type MixAlbumInput = {\n  /** 混合したいアルバムID */\n  albumIds: Array<Scalars['TTID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of MixAlbum */\nexport type MixAlbumPayload = {\n   __typename?: 'MixAlbumPayload';\n  /** 混合されたアルバム */\n  album?: Maybe<Album>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of MixArtist */\nexport type MixArtistInput = {\n  /** メインアーティストID */\n  mainArtistId: Scalars['TTID'];\n  /** サブアーティストID */\n  subArtistId: Scalars['TTID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of MixArtist */\nexport type MixArtistPayload = {\n   __typename?: 'MixArtistPayload';\n  /** 混合されたアーティスト */\n  artist?: Maybe<Artist>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** ステータスをもつモデルのいずれか */\nexport type ModelHasStatusUnion = Album | Artist | Track;\n\nexport type Mutation = {\n   __typename?: 'Mutation';\n  /** ステータス変更。関連するアルバム, トラック, 各音楽サービスアルバム、各音楽サービストラックも同じステータスで更新される。 */\n  changeStatus?: Maybe<ChangeStatusPayload>;\n  /** 検索結果キャッシュをリセットする */\n  clearCache?: Maybe<ClearCachePayload>;\n  /** 複数アルバムを単一アルバムに統合する。統合前の複数アルバムは全て IGNORE される。 */\n  compactAlbum?: Maybe<CompactAlbumPayload>;\n  /**\n   * アルバムを混合する。\n   * 同じアルバムのはずが各音楽サービスで別のアルバムと認識される場合がある。\n   * その場合に使用する。曲数が多いアルバムを正とする。\n   */\n  mixAlbum?: Maybe<MixAlbumPayload>;\n  /**\n   * アーティストを混合する。\n   * 混合後は修正不可のため注意して使用すること。\n   */\n  mixArtist?: Maybe<MixArtistPayload>;\n  /** サインイン */\n  signin?: Maybe<SigninPayload>;\n  /** 統合したアルバムを元に戻す。統合された単一アルバムは削除される。 */\n  uncompactAlbum?: Maybe<UncompactAlbumPayload>;\n  /** アルバムの混合を解除する。アルバムと曲数に相違がある音楽サービスアルバムを分離する。 */\n  unmixAlbum?: Maybe<UnmixAlbumPayload>;\n  /** カレントユーザー情報更新 */\n  updateMe?: Maybe<UpdateMePayload>;\n  /** アルバムを最新の状態にする */\n  upsertAlbum?: Maybe<UpsertAlbumPayload>;\n  /** アーティストを最新の状態にする */\n  upsertArtist?: Maybe<UpsertArtistPayload>;\n};\n\n\nexport type MutationChangeStatusArgs = {\n  input: ChangeStatusInput;\n};\n\n\nexport type MutationClearCacheArgs = {\n  input: ClearCacheInput;\n};\n\n\nexport type MutationCompactAlbumArgs = {\n  input: CompactAlbumInput;\n};\n\n\nexport type MutationMixAlbumArgs = {\n  input: MixAlbumInput;\n};\n\n\nexport type MutationMixArtistArgs = {\n  input: MixArtistInput;\n};\n\n\nexport type MutationSigninArgs = {\n  input: SigninInput;\n};\n\n\nexport type MutationUncompactAlbumArgs = {\n  input: UncompactAlbumInput;\n};\n\n\nexport type MutationUnmixAlbumArgs = {\n  input: UnmixAlbumInput;\n};\n\n\nexport type MutationUpdateMeArgs = {\n  input: UpdateMeInput;\n};\n\n\nexport type MutationUpsertAlbumArgs = {\n  input: UpsertAlbumInput;\n};\n\n\nexport type MutationUpsertArtistArgs = {\n  input: UpsertArtistInput;\n};\n\n\nexport type Query = {\n   __typename?: 'Query';\n  /** アルバム情報取得 */\n  album?: Maybe<Album>;\n  /** アルバム一覧取得 */\n  albums: Array<Album>;\n  /** アーティスト取得 */\n  artist?: Maybe<Artist>;\n  /** アーティスト一覧取得 */\n  artists: Array<Artist>;\n  /** カレントユーザー情報取得 */\n  me: CurrentUser;\n};\n\n\nexport type QueryAlbumArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryAlbumsArgs = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<AlbumsSortInputObject>;\n  conditions?: Maybe<AlbumsConditionsInputObject>;\n};\n\n\nexport type QueryArtistArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryArtistsArgs = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<ArtistsSortInputObject>;\n  conditions?: Maybe<ArtistsConditionsInputObject>;\n};\n\n/** ロール */\nexport type Role = {\n   __typename?: 'Role';\n  /** 出来ること一覧 */\n  allowedActions: Array<Scalars['String']>;\n  /** 説明 */\n  description: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** Autogenerated input type of Signin */\nexport type SigninInput = {\n  username?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of Signin */\nexport type SigninPayload = {\n   __typename?: 'SigninPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\nexport enum SortEnum {\n  /** 昇順 */\n  Asc = 'ASC',\n  /** 降順 */\n  Desc = 'DESC'\n}\n\n/** Spotify アルバム */\nexport type SpotifyAlbum = {\n   __typename?: 'SpotifyAlbum';\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\n/** Spotify アーティスト */\nexport type SpotifyArtist = {\n   __typename?: 'SpotifyArtist';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\nexport enum StatusEnum {\n  /** 保留 : デフォルトの検索結果に表示されない */\n  Pending = 'PENDING',\n  /** 有効 : 通常検索結果に表示される */\n  Active = 'ACTIVE',\n  /** 除外 : 検索結果から除外される。最新情報などを取得する際などでも除外される */\n  Ignore = 'IGNORE'\n}\n\n\n/** トラック */\nexport type Track = {\n   __typename?: 'Track';\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** ディスク番号 */\n  discNumber: Scalars['PositiveNumber'];\n  /** 再生時間 */\n  durationMs: Scalars['PositiveNumber'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 国際標準レコーディングコード */\n  isrc: Scalars['String'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** 人気度 */\n  popularity: Scalars['Int'];\n  /** プレビューURL */\n  previewUrl?: Maybe<Scalars['String']>;\n  /** ステータス */\n  status: StatusEnum;\n  /** トラック番号 */\n  trackNumber: Scalars['PositiveNumber'];\n};\n\n/** Autogenerated input type of UncompactAlbum */\nexport type UncompactAlbumInput = {\n  /** 統合解除したいアルバムID。Apple Music アルバムのみ解除される。 */\n  albumIdForAppleMusic?: Maybe<Scalars['TTID']>;\n  /** 統合解除したいアルバムID。Spotify アルバムのみ解除される。 */\n  albumIdForSpotify?: Maybe<Scalars['TTID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UncompactAlbum */\nexport type UncompactAlbumPayload = {\n   __typename?: 'UncompactAlbumPayload';\n  /** 統合解除されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UnmixAlbum */\nexport type UnmixAlbumInput = {\n  /** 混合解除したいアルバムID */\n  albumId: Scalars['TTID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UnmixAlbum */\nexport type UnmixAlbumPayload = {\n   __typename?: 'UnmixAlbumPayload';\n  /** 混合されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateMe */\nexport type UpdateMeInput = {\n  name?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  newPassword?: Maybe<Scalars['String']>;\n  oldPassword: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateMe */\nexport type UpdateMePayload = {\n   __typename?: 'UpdateMePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertAlbum */\nexport type UpsertAlbumInput = {\n  /** 指定したアルバムのトラック(ISRC)を含んでいる別音楽サービスのアルバムを一括登録 */\n  albumId?: Maybe<Scalars['TTID']>;\n  /** Apple Music か iTunes のアルバムを登録 */\n  appleMusicId?: Maybe<Scalars['String']>;\n  /** Spotify のアルバムを登録 */\n  spotifyId?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertAlbum */\nexport type UpsertAlbumPayload = {\n   __typename?: 'UpsertAlbumPayload';\n  /** 追加されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertArtist */\nexport type UpsertArtistInput = {\n  /**\n   * アーティスト名から全ての音楽サービスのアーティストを登録。登録後、関連アルバム、トラックを全て保存する。\n   * (ありきたりなアーティスト名の場合は関係のないアーティストが登録される可能性があるため注意)\n   */\n  artistName?: Maybe<Scalars['String']>;\n  /** Apple Music のアーティストを登録。登録後、関連アルバム、トラックを全て保存する。 */\n  appleMusicId?: Maybe<Scalars['String']>;\n  /** Spotify のアーティストを登録。登録後、関連アルバム、トラックを全て保存する。 */\n  spotifyId?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertArtist */\nexport type UpsertArtistPayload = {\n   __typename?: 'UpsertArtistPayload';\n  /** 追加されたアーティスト */\n  artists?: Maybe<Array<Artist>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\nexport type AlbumQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type AlbumQuery = (\n  { __typename?: 'Query' }\n  & { album?: Maybe<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id' | 'totalTracks' | 'name' | 'releaseDate'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id' | 'spotifyId'>\n    )>, tracks: Array<(\n      { __typename?: 'Track' }\n      & Pick<Track, 'id' | 'isrc' | 'name' | 'discNumber' | 'trackNumber' | 'durationMs' | 'previewUrl' | 'popularity'>\n      & { artworkM: (\n        { __typename?: 'Artwork' }\n        & Pick<Artwork, 'url' | 'width' | 'height'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type AlbumsQueryVariables = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<AlbumsSortInputObject>;\n  conditions?: Maybe<AlbumsConditionsInputObject>;\n};\n\n\nexport type AlbumsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id' | 'name' | 'status'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id'>\n    )> }\n  )> }\n);\n\nexport type ArtistQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type ArtistQuery = (\n  { __typename?: 'Query' }\n  & { artist?: Maybe<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type ArtistsQueryVariables = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<ArtistsSortInputObject>;\n  conditions?: Maybe<ArtistsConditionsInputObject>;\n};\n\n\nexport type ArtistsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name' | 'status'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'CurrentUser' }\n    & Pick<CurrentUser, 'id' | 'name' | 'username'>\n    & { role: (\n      { __typename?: 'Role' }\n      & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n    ) }\n  ) }\n);\n\nexport type UpdateMeMutationVariables = {\n  input: UpdateMeInput;\n};\n\n\nexport type UpdateMeMutation = (\n  { __typename?: 'Mutation' }\n  & { updateMe?: Maybe<(\n    { __typename?: 'UpdateMePayload' }\n    & Pick<UpdateMePayload, 'error'>\n    & { currentUser?: Maybe<(\n      { __typename?: 'CurrentUser' }\n      & Pick<CurrentUser, 'id' | 'username' | 'name'>\n    )> }\n  )> }\n);\n\nexport type SigninMutationVariables = {\n  input: SigninInput;\n};\n\n\nexport type SigninMutation = (\n  { __typename?: 'Mutation' }\n  & { signin?: Maybe<(\n    { __typename?: 'SigninPayload' }\n    & Pick<SigninPayload, 'error'>\n  )> }\n);\n\n\nexport const AlbumDocument = gql`\n    query Album($id: TTID!) {\n  album(id: $id) {\n    id\n    totalTracks\n    name\n    releaseDate\n    artworkL {\n      url\n      width\n      height\n    }\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n      appleMusicId\n    }\n    itunesAlbum {\n      id\n      appleMusicId\n    }\n    spotifyAlbum {\n      id\n      spotifyId\n    }\n    tracks {\n      id\n      isrc\n      name\n      discNumber\n      trackNumber\n      durationMs\n      previewUrl\n      popularity\n      artworkM {\n        url\n        width\n        height\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useAlbumQuery__\n *\n * To run a query within a React component, call `useAlbumQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAlbumQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n      }\nexport function useAlbumLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n        }\nexport type AlbumQueryHookResult = ReturnType<typeof useAlbumQuery>;\nexport type AlbumLazyQueryHookResult = ReturnType<typeof useAlbumLazyQuery>;\nexport type AlbumQueryResult = ApolloReactCommon.QueryResult<AlbumQuery, AlbumQueryVariables>;\nexport const AlbumsDocument = gql`\n    query Albums($cursor: CursorInputObject, $sort: AlbumsSortInputObject, $conditions: AlbumsConditionsInputObject) {\n  items: albums(cursor: $cursor, sort: $sort, conditions: $conditions) {\n    id\n    name\n    status\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n    }\n    itunesAlbum {\n      id\n    }\n    spotifyAlbum {\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useAlbumsQuery__\n *\n * To run a query within a React component, call `useAlbumsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumsQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      sort: // value for 'sort'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useAlbumsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n      }\nexport function useAlbumsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n        }\nexport type AlbumsQueryHookResult = ReturnType<typeof useAlbumsQuery>;\nexport type AlbumsLazyQueryHookResult = ReturnType<typeof useAlbumsLazyQuery>;\nexport type AlbumsQueryResult = ApolloReactCommon.QueryResult<AlbumsQuery, AlbumsQueryVariables>;\nexport const ArtistDocument = gql`\n    query Artist($id: TTID!) {\n  artist(id: $id) {\n    id\n    name\n    artworkL {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useArtistQuery__\n *\n * To run a query within a React component, call `useArtistQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useArtistQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n      }\nexport function useArtistLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n        }\nexport type ArtistQueryHookResult = ReturnType<typeof useArtistQuery>;\nexport type ArtistLazyQueryHookResult = ReturnType<typeof useArtistLazyQuery>;\nexport type ArtistQueryResult = ApolloReactCommon.QueryResult<ArtistQuery, ArtistQueryVariables>;\nexport const ArtistsDocument = gql`\n    query Artists($cursor: CursorInputObject, $sort: ArtistsSortInputObject, $conditions: ArtistsConditionsInputObject) {\n  items: artists(cursor: $cursor, sort: $sort, conditions: $conditions) {\n    id\n    name\n    status\n    artworkM {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useArtistsQuery__\n *\n * To run a query within a React component, call `useArtistsQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistsQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      sort: // value for 'sort'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useArtistsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n      }\nexport function useArtistsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n        }\nexport type ArtistsQueryHookResult = ReturnType<typeof useArtistsQuery>;\nexport type ArtistsLazyQueryHookResult = ReturnType<typeof useArtistsLazyQuery>;\nexport type ArtistsQueryResult = ApolloReactCommon.QueryResult<ArtistsQuery, ArtistsQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    name\n    username\n    role {\n      id\n      name\n      description\n      allowedActions\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const UpdateMeDocument = gql`\n    mutation UpdateMe($input: UpdateMeInput!) {\n  updateMe(input: $input) {\n    currentUser {\n      id\n      username\n      name\n    }\n    error\n  }\n}\n    `;\nexport type UpdateMeMutationFn = ApolloReactCommon.MutationFunction<UpdateMeMutation, UpdateMeMutationVariables>;\n\n/**\n * __useUpdateMeMutation__\n *\n * To run a mutation, you first call `useUpdateMeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMeMutation, { data, loading, error }] = useUpdateMeMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateMeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateMeMutation, UpdateMeMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateMeMutation, UpdateMeMutationVariables>(UpdateMeDocument, baseOptions);\n      }\nexport type UpdateMeMutationHookResult = ReturnType<typeof useUpdateMeMutation>;\nexport type UpdateMeMutationResult = ApolloReactCommon.MutationResult<UpdateMeMutation>;\nexport type UpdateMeMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateMeMutation, UpdateMeMutationVariables>;\nexport const SigninDocument = gql`\n    mutation Signin($input: SigninInput!) {\n  signin(input: $input) {\n    error\n  }\n}\n    `;\nexport type SigninMutationFn = ApolloReactCommon.MutationFunction<SigninMutation, SigninMutationVariables>;\n\n/**\n * __useSigninMutation__\n *\n * To run a mutation, you first call `useSigninMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSigninMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signinMutation, { data, loading, error }] = useSigninMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSigninMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SigninMutation, SigninMutationVariables>) {\n        return ApolloReactHooks.useMutation<SigninMutation, SigninMutationVariables>(SigninDocument, baseOptions);\n      }\nexport type SigninMutationHookResult = ReturnType<typeof useSigninMutation>;\nexport type SigninMutationResult = ApolloReactCommon.MutationResult<SigninMutation>;\nexport type SigninMutationOptions = ApolloReactCommon.BaseMutationOptions<SigninMutation, SigninMutationVariables>;","import React from 'react';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst ImageComponent = ({\n  className = \"\", src = \"\", title = \"\", width\n}:{\n  className?:string, src?:string, title?:string, width:string|number\n}) => {\n  if(src === \"\") src = `${process.env.PUBLIC_URL}/no_image.png`\n\n  return (\n    <CardMedia\n      className={className}\n      image={src}\n      title={title}\n      style={{ width: width, height: width }}\n    />\n  )\n}\n\nexport default ImageComponent;\n","import React, { createElement } from 'react';\nimport Card from '@material-ui/core/Card';\nimport ImageComponent from '../image/ImageComponent'\nimport { Grid, CardActionArea, CardContent, Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\ninterface Image {\n  title: string\n  src?: string | null\n  width: string | number\n  linkUrl?: string\n  componentInImage?: JSX.Element\n}\n\nconst ImageCardComponent = (image:Image) => {\n  const link = image.linkUrl ? { component: Link, to: image.linkUrl } : {}\n\n  return (\n    createElement(Grid, {\n      item: true, style: { textDecoration: \"none\" }, ...link,\n      children: (\n        <Card style={{ width: image.width, position: \"relative\" }}>\n          <CardActionArea>\n            <Grid container style={{ position: \"absolute\", left: \"5px\", bottom: \"5px\" }}>\n              { image.componentInImage ? image.componentInImage : <></> }\n            </Grid>\n            <ImageComponent src={image.src || \"\"} width={image.width} title={image.title}/>\n          </CardActionArea>\n          {\n            image.title === \"\" ? <></> :\n            <CardContent style={{ padding: \"5px 5px\" }}>\n              <Typography style={{\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\"\n              }} variant=\"caption\" color=\"textSecondary\" component=\"p\">\n                {image.title}\n              </Typography>\n            </CardContent>\n          }\n        </Card>\n      )\n    })\n  )\n}\n\nexport default ImageCardComponent\n","import { useLocation } from \"react-router-dom\"\nimport _ from \"lodash\"\n\nexport const ParameterPrefixKeys = {\n  album:  \"b\",\n  artist: \"a\",\n}\n\nexport const ParameterKeys = {\n  keyword:  \"q\",\n  ids:      \"i\",\n  status:   \"s\",\n  order:    \"o\",\n  sortType: \"r\",\n//tag:      \"t\", // いつか実装する\n}\n\nexport type ParameterPrefix = keyof typeof ParameterPrefixKeys;\n\nexport default function useParameters<T>(prefix:ParameterPrefix){\n  const location = useLocation()\n  const params = new URLSearchParams(location.search)\n  const prefixKey = ParameterPrefixKeys[prefix]\n\n  const getUniqueValues = (key:string):string[] => {\n    const value = params.get(key)\n    if(value === null) return []\n\n    // , ではなく - にしている理由は文字化けするからURLセーフな - または _ にする必要あり\n    const values = value.split(\"-\")\n    const uniqueValues = new Set<string>()\n\n    values.forEach((value) => {\n      uniqueValues.add(value)\n    })\n\n    return Array.from(uniqueValues)\n  }\n\n  const customizer = (objValue:any, srcValue:any) => {\n    if (_.isArray(objValue)) {\n      return objValue.concat(srcValue)\n    }\n  }\n\n  let parameters = {}\n\n  // ID\n  getUniqueValues(prefixKey + ParameterKeys.ids).forEach((value) => {\n    switch( true ){\n      case /^art/.test(value):\n        parameters = _.merge(parameters, { conditions: { artists: { id: [value] } } })\n        break;\n      case /^abm/.test(value):\n        parameters = _.merge(parameters, { conditions: { albums: { id: [value] } } })\n        break;\n      case /^trk/.test(value):\n        parameters = _.merge(parameters, { conditions: { tracks: { id: [value] } } })\n        break;\n    }\n  })\n\n  // ステータス\n  let status = { status: [] }\n  getUniqueValues(prefixKey + ParameterKeys.status).forEach((value) => {\n      status = _.mergeWith(status, { status: [value] }, customizer)\n  })\n  if(status.status.length !== 0) {\n    parameters = _.mergeWith(parameters, { conditions: { ...status } })\n  }\n\n  // 並び順対象\n  getUniqueValues(prefixKey + ParameterKeys.order).forEach((value) => {\n    parameters = _.merge(parameters, { sort: { order: value } })\n  })\n\n  // 並び順\n  getUniqueValues(prefixKey + ParameterKeys.sortType).forEach((value) => {\n    parameters = _.merge(parameters, { sort: { type: value } })\n  })\n\n  return parameters as T\n}\n","import React from 'react';\nimport { Album, StatusEnum } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport { Grid } from '@material-ui/core';\nimport { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\n\nconst AlbumItemLayout = (\n  { album, width }:\n  { album: Album, width:string|number }\n) => {\n  // クエリパラメータ引き継ぎ\n  let history = useHistory()\n  const params = new URLSearchParams(history.location.search)\n  params.set(ParameterPrefixKeys.artist + ParameterKeys.ids, album.id)\n  const status = params.get(ParameterPrefixKeys.album + ParameterKeys.status)\n  if(status !== null) {\n    params.set(ParameterPrefixKeys.album + ParameterKeys.status, status)\n  }\n\n  const style = {\n    width: \"15px\",\n    height: \"15px\",\n    borderRadius: \"50%\",\n    fontSize: \"10px\",\n    color: \"#fff\",\n    lineHeight: \"15px\",\n    textAlign: \"center\" as \"center\",\n    background: \"#000\",\n  }\n\n  const serviceIcons = []\n  if(album.appleMusicAlbum){\n    serviceIcons.push(<Grid key={1} item style={{...style, backgroundColor: \"#ff2f56\"}}>A</Grid>)\n  }\n  if(album.itunesAlbum){\n    serviceIcons.push(<Grid key={2} item style={{...style, backgroundColor: \"#0070c9\"}}>iT</Grid>)\n  }\n  if(album.spotifyAlbum){\n    serviceIcons.push(<Grid key={3} item style={{...style, backgroundColor: \"#1DB954\"}}>S</Grid>)\n  }\n\n  // ステータスをわかりやすいようにしておく\n  if(album.status === StatusEnum.Pending){\n    serviceIcons.push(<Grid key={10} item style={{...style, color: \"#000\", backgroundColor: \"#FFFF00\"}}>PN</Grid>)\n  } else if (album.status === StatusEnum.Ignore){\n    serviceIcons.push(<Grid key={11} item style={{...style, color: \"#000\",backgroundColor: \"#FF0000\"}}>IG</Grid>)\n  }\n\n  const componentInImage = <>{serviceIcons}</>\n\n  return (\n    <ImageCardComponent\n      title={album.name}\n      src={album.artworkM.url}\n      width={width}\n      linkUrl={`/albums/${album.id}?${params.toString()}`}\n      componentInImage={componentInImage}\n    />\n  )\n}\n\nexport default AlbumItemLayout\n","import React, { useReducer, createContext, Dispatch } from 'react'\nimport PreviewPlayer from '../components/player/PreviewPlayer'\n\ntype ContextValue = {\n  state: StateType\n  dispatch: Dispatch<ActionType>\n}\n\nconst PlayerContext = createContext({} as ContextValue)\n\nexport enum PlaybackStatus {\n  None,\n  Play,\n  Pause,\n  Stop,\n}\n\nexport enum LoadingStatus {\n  None,\n  Loading,\n  Done,\n}\n\nconst initialState = {\n  player: new PreviewPlayer({ linkUrl: \"\", tracks: [] }),\n  currentNo: 0,\n  playbackStatus: PlaybackStatus.None,\n  loadingStatus: LoadingStatus.Done,\n}\n\nexport type StateType = typeof initialState\nexport type ActionType =\n  | { type: 'SET_PLAYER', player: PreviewPlayer }\n  | { type: 'PLAY', no?: number }\n  | { type: 'NEXT_PLAY' }\n  | { type: 'PAUSE' }\n  | { type: 'STOP' }\n  | { type: 'LOADING_START' }\n  | { type: 'LOADING_DONE' }\n  | { type: 'STATUS_FINISH' }\n\nconst reducer = (state:StateType, action:ActionType):StateType => {\n  switch(action.type) {\n    case 'SET_PLAYER':\n      state.player.stop()\n      return {\n        ...state,\n        player: action.player,\n        playbackStatus: PlaybackStatus.Stop,\n      }\n    case 'PLAY':\n      state.player.play(action.no)\n      const currentNo = action.no === undefined ? state.currentNo : action.no\n      return {\n        ...state,\n        playbackStatus: PlaybackStatus.Play,\n        currentNo,\n      }\n    case 'NEXT_PLAY':\n      (async () => await state.player.nextPlay())()\n      return {\n        ...state,\n        currentNo: state.player.currentPlaybackNo,\n        playbackStatus: PlaybackStatus.Play,\n      }\n    case 'PAUSE':\n      state.player.pause()\n      return {\n        ...state,\n        playbackStatus: PlaybackStatus.Pause,\n      }\n    case 'STOP':\n      state.player.stop()\n      return {\n        ...state,\n        playbackStatus: PlaybackStatus.Play,\n      }\n    case 'LOADING_START':\n      return {\n        ...state,\n        loadingStatus: LoadingStatus.Loading,\n      }\n    case 'LOADING_DONE':\n      return {\n        ...state,\n        loadingStatus: LoadingStatus.Done,\n      }\n    case 'STATUS_FINISH':\n      return {\n        ...state,\n        currentNo: state.player.currentPlaybackNo,\n        playbackStatus: PlaybackStatus.Pause,\n        loadingStatus: LoadingStatus.Done,\n      }\n    default:\n      return state\n  }\n}\n\nconst PlayerProvider = ({ children }:{ children:JSX.Element|JSX.Element[] }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return <PlayerContext.Provider value={{ state, dispatch }}>{children}</PlayerContext.Provider>\n}\n\nexport default PlayerContext\nexport { PlayerProvider }\n","import React, { useState } from 'react';\nimport { Waypoint } from 'react-waypoint';\n\n// TODO: hasNext とかないのでページ遷移によって再度取得してしまう？\nconst PaginationComponent = (\n  { component, no, offset, limit, fetchMore }:\n  { component:JSX.Element, no:number, offset:number, limit:number, fetchMore:any }\n) => {\n  // 並び替えなどによる内部の component の変更を検知し再度ページネーションする\n  const [prevComponent, setPrevComponent] = useState(component)\n  const [alreadyFetch, setAlreadyFetch] = useState(false)\n  const fetchNo = offset - limit\n  const isFetch = no === fetchNo\n\n  const exeFetchMore = () => fetchMore({\n    variables: {\n      cursor: {\n        offset: offset\n      }\n    },\n    updateQuery: (\n      prev:{ items: any[] },\n      { fetchMoreResult }:{ fetchMoreResult:{ items: any[] } }\n    ) => {\n      if (!fetchMoreResult) return prev;\n      return { ...prev, ...{ items: [...prev.items, ...fetchMoreResult.items] } }\n    }\n  })\n\n  const enterFunction = () => {\n    if(alreadyFetch && prevComponent === component) return\n    setAlreadyFetch(true)\n    setPrevComponent(component)\n    return exeFetchMore()\n  }\n\n  return (\n    <>\n      { component }\n      { isFetch ? <Waypoint onEnter={enterFunction}/> : <></> }\n    </>\n  )\n}\n\nexport default PaginationComponent\n","import React, { useState } from 'react';\nimport { useAlbumsQuery, Album, AlbumsQueryVariables } from '../../../graphql/types.d';\nimport AlbumItemLayout from '../item/AlbumItemLayout';\nimport { Grid, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport useParameters, { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\n\nconst AlbumsLayout = () => {\n  const [order, setOrder] = useState<string>(\"RELEASE.DESC\")\n  const parameters = useParameters<AlbumsQueryVariables>(\"album\")\n  let history = useHistory()\n  const limit = 50\n  const { error, data, fetchMore } = useAlbumsQuery(\n    {\n      variables: {\n        cursor: {\n          offset: 0,\n          limit: limit,\n        },\n        sort: parameters.sort,\n        conditions: parameters.conditions,\n      },\n      // 戻るボタンで戻っても最初から読み込みが発生しない\n      fetchPolicy: \"cache-first\"\n    }\n  )\n\n  // 並び順初期化\n  const _order = parameters?.sort ? `${parameters?.sort?.order}.${parameters?.sort?.type}` : null\n  if(_order && order !== _order){\n    setOrder(_order)\n  }\n\n  if (error) return <div>{error.message}</div>\n\n  let content:JSX.Element[] = []\n\n  if (data) {\n    content =\n      data.items.map(\n        (item, i) =>\n          <Grid item key={i}>\n            <PaginationComponent\n              component={<AlbumItemLayout album={item as Album} width=\"150px\" />}\n              no={i}\n              offset={data.items.length}\n              limit={limit}\n              fetchMore={fetchMore}\n            />\n          </Grid>\n      )\n  }\n\n  const handleChange = (event: React.ChangeEvent<{\n      name?: string | undefined\n      value: unknown\n  }>, _child: React.ReactNode) => {\n    const sort = event.target.value as string\n    const [order, sortType] = sort.split(\".\")\n    setOrder(sort)\n    const params = new URLSearchParams(history.location.search)\n    params.set(ParameterPrefixKeys.album + ParameterKeys.order, order)\n    params.set(ParameterPrefixKeys.album + ParameterKeys.sortType, sortType)\n    history.push(`${history.location.pathname}?${params.toString()}`)\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          <Grid item>\n            <FormControl variant=\"outlined\" style={{minWidth: 150}}>\n              <InputLabel id=\"demo-simple-select-outlined-label\">アルバム表示順</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={order}\n                onChange={handleChange}\n                label=\"アルバム表示順\"\n              >\n                <MenuItem value={\"RELEASE.DESC\"}>発売日新しい順</MenuItem>\n                <MenuItem value={\"RELEASE.ASC\"}>発売日古い順</MenuItem>\n                <MenuItem value={\"NEW.DESC\"}>追加日新しい順</MenuItem>\n                <MenuItem value={\"NEW.ASC\"}>追加日古い順</MenuItem>\n                <MenuItem value={\"POPULARITY.DESC\"}>人気順</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-evenly\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          {content}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AlbumsLayout;\n","import React from 'react';\nimport { useScrollTrigger, AppBar, Toolbar, Typography, Slide, IconButton, Grid } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person'\nimport AlbumIcon from '@material-ui/icons/Album'\nimport { Link } from 'react-router-dom';\n\n// ref: https://material-ui.com/components/app-bar/#hide-app-bar\ninterface Props {\n  window?: () => Window;\n  children: React.ReactElement;\n}\n\nconst HideOnScroll = (props: Props) => {\n  const { children, window } = props;\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nconst Bar = () =>\n  <>\n    <HideOnScroll>\n      <AppBar>\n        <Toolbar>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n            spacing={3}\n          >\n            <Grid item>\n              <Typography variant=\"h6\">ゲーム音楽</Typography>\n            </Grid>\n            <Grid item>\n              <IconButton component={Link} to={`/artists`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <PersonIcon />\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <IconButton component={Link} to={`/albums`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <AlbumIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </HideOnScroll>\n  </>\n\nexport default Bar\n","import { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { onError } from \"apollo-link-error\"\n\nconst httpLink = new HttpLink({ uri: process.env.REACT_APP_GRAPHQL_URI, credentials: 'include' })\nconst headersLink = new ApolloLink((operation, forward) => forward(operation))\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst link = ApolloLink.from([headersLink, errorLink, httpLink])\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache({ dataIdFromObject: object => object.id })\n})\n","import React from 'react';\nimport { Artist, StatusEnum } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\nimport { Grid } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nconst ArtistItemLayout = (\n  { artist, width }:\n  { artist: Artist, width:string|number }\n) => {\n  // クエリパラメータ引き継ぎ\n  let history = useHistory()\n  const params = new URLSearchParams(history.location.search)\n  params.set(ParameterPrefixKeys.album + ParameterKeys.ids, artist.id)\n  const status = params.get(ParameterPrefixKeys.artist + ParameterKeys.status)\n  if(status !== null) {\n    params.set(ParameterPrefixKeys.album + ParameterKeys.status, status)\n  }\n\n  const style = {\n    width: \"15px\",\n    height: \"15px\",\n    borderRadius: \"50%\",\n    fontSize: \"10px\",\n    color: \"#fff\",\n    lineHeight: \"15px\",\n    textAlign: \"center\" as \"center\",\n    background: \"#000\",\n  }\n\n  // ステータスをわかりやすいようにしておく\n  const serviceIcons = []\n  if(artist.status === StatusEnum.Pending){\n    serviceIcons.push(<Grid key={10} item style={{...style, color: \"#000\", backgroundColor: \"#FFFF00\"}}>PN</Grid>)\n  } else if (artist.status === StatusEnum.Ignore){\n    serviceIcons.push(<Grid key={11} item style={{...style, color: \"#000\",backgroundColor: \"#FF0000\"}}>IG</Grid>)\n  }\n  const componentInImage = <>{serviceIcons}</>\n\n  return (\n    <ImageCardComponent\n      title={artist.name}\n      src={artist.artworkM.url}\n      width={width}\n      linkUrl={`/artists/${artist.id}?${params.toString()}`}\n      componentInImage={componentInImage}\n    />\n  )\n}\n\nexport default ArtistItemLayout\n","import React, { useState } from 'react';\nimport { useArtistsQuery, ArtistsQueryVariables, Artist } from '../../../graphql/types.d';\nimport { Grid, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport ArtistItemLayout from '../item/ArtistItemLayout';\nimport useParameters, { ParameterPrefixKeys, ParameterKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\n\nconst ArtistsLayout = () => {\n  const [order, setOrder] = useState<string>(\"NAME.DESC\")\n  const parameters = useParameters<ArtistsQueryVariables>(\"artist\")\n  let history = useHistory()\n  const limit = 30\n  const { error, data, fetchMore } = useArtistsQuery(\n    {\n      variables: {\n        cursor: {\n          offset: 0,\n          limit: limit,\n        },\n        sort: parameters.sort,\n        conditions: parameters.conditions,\n      },\n      // 戻るボタンで戻っても最初から読み込みが発生しない\n      fetchPolicy: \"cache-first\"\n    }\n  )\n\n  // 並び順初期化\n  const _order = parameters?.sort ? `${parameters?.sort?.order}.${parameters?.sort?.type}` : null\n  if(_order && order !== _order){\n    setOrder(_order)\n  }\n\n  if (error) return <div>{error.message}</div>\n\n  let content:JSX.Element[] = []\n\n  if (data) {\n    content =\n      data.items.map(\n        (item, i) =>\n          <Grid item key={i}>\n            <PaginationComponent\n              component={<ArtistItemLayout artist={item as Artist} width=\"150px\" />}\n              no={i}\n              offset={data.items.length}\n              limit={limit}\n              fetchMore={fetchMore}\n            />\n          </Grid>\n      )\n  }\n\n  const handleChange = (event: React.ChangeEvent<{\n    name?: string | undefined\n    value: unknown\n  }>, _child: React.ReactNode) => {\n    const sort = event.target.value as string\n    const [order, sortType] = sort.split(\".\")\n    setOrder(sort)\n    const params = new URLSearchParams(history.location.search)\n    params.set(ParameterPrefixKeys.artist + ParameterKeys.order, order)\n    params.set(ParameterPrefixKeys.artist + ParameterKeys.sortType, sortType)\n    history.push(`${history.location.pathname}?${params.toString()}`)\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item >\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          <Grid>\n            <FormControl variant=\"outlined\" style={{minWidth: 150}}>\n              <InputLabel id=\"demo-simple-select-outlined-label\">アーティスト表示順</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={order}\n                onChange={handleChange}\n                label=\"アーティスト表示順\"\n              >\n                <MenuItem value={\"NAME.DESC\"}>名前降順</MenuItem>\n                <MenuItem value={\"NAME.ASC\"}>名前昇順</MenuItem>\n                <MenuItem value={\"NEW.DESC\"}>追加日新しい順</MenuItem>\n                <MenuItem value={\"NEW.ASC\"}>追加日古い順</MenuItem>\n                <MenuItem value={\"POPULARITY.DESC\"}>人気順</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-evenly\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          {content}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ArtistsLayout\n","import { Howl } from 'howler'\nimport { Track } from '../../graphql/types.d'\nimport { ActionType } from '../../hooks/playerContext'\nimport { isEmpty } from 'lodash'\n\nclass PreviewPlayer {\n  linkUrl: string\n  playlist: { [key:number]:Howl }\n  tracks: Track[]\n  currentPlaybackNo: number\n  dispatch?: React.Dispatch<ActionType>\n\n  constructor(\n    { linkUrl, tracks, dispatch }:\n    { linkUrl:string, tracks:Track[], dispatch?: React.Dispatch<ActionType> }\n  ){\n    this.linkUrl = linkUrl\n    this.currentPlaybackNo = 0\n    this.playlist = {}\n    tracks.forEach((track, index) => {\n      if(!track.previewUrl) return\n      const player:Howl = new Howl({\n        src: track.previewUrl,\n        html5: true,\n        preload: false,\n        autoplay: false,\n        onend: async () => this.autoNextPlay(),\n        onplay: () => {\n          // フェードイン\n          if(player.volume() === 0) player.fade(0, 0.5, 2000)\n        },\n        volume: 0,\n      })\n      this.playlist[index] = player\n    })\n    this.tracks = tracks\n    this.dispatch = dispatch\n  }\n\n  currentTrack() {\n    if(isEmpty(this.playlist)) return\n    return this.tracks[this.currentPlaybackNo]\n  }\n\n  async play(no?:number) {\n    if(isEmpty(this.playlist)) return\n\n    if(no === undefined) {\n      const player = this.playlist[this.currentPlaybackNo]\n      // 再生可否による分岐\n      if(player){\n        await player.play()\n      } else {\n        await this.autoNextPlay()\n      }\n    } else {\n      this.stopAndPlay(this.currentPlaybackNo, no)\n      this.currentPlaybackNo = no\n    }\n  }\n\n  async autoNextPlay() {\n    this.dispatch && this.dispatch({ type: \"NEXT_PLAY\" })\n  }\n\n  async nextPlay():Promise<number> {\n    if(isEmpty(this.playlist)) return 0\n\n    const nextNo = this.currentPlaybackNo + 1\n    if((this.tracks.length - 1) < nextNo) {\n      // プレイリスト最後の曲\n      await this.playlist[this.currentPlaybackNo].stop()\n      this.currentPlaybackNo = 0\n      this.dispatch && this.dispatch({ type: \"STATUS_FINISH\" })\n      return this.currentPlaybackNo\n    } else {\n      const currentNo = this.currentPlaybackNo\n      this.currentPlaybackNo = nextNo\n      await this.stopAndPlay(currentNo, nextNo)\n      return this.currentPlaybackNo\n    }\n  }\n\n  async stopAndPlay(stopNo:number, playNo:number) {\n    await this.playlist[stopNo]?.stop()\n    const player = this.playlist[playNo]\n    // 再生可否による分岐\n    if(player){\n      await player.play()\n    } else {\n      await this.autoNextPlay()\n    }\n  }\n\n  async pause() {\n    if(isEmpty(this.playlist)) return\n\n    await this.playlist[this.currentPlaybackNo].pause()\n  }\n\n  async stop() {\n    if(isEmpty(this.playlist)) return\n\n    await this.playlist[this.currentPlaybackNo].stop()\n    this.currentPlaybackNo = 0\n  }\n}\n\nexport default PreviewPlayer\n","import React, { useContext } from 'react';\nimport { Grid, Button, MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport { red, green, blue } from '@material-ui/core/colors';\nimport { Album } from '../../graphql/types.d'\nimport PlayerContext from '../../hooks/playerContext';\n\nconst ShareButtonComponent = ({ album }:{ album:Album|null }) => {\n  const { dispatch } = useContext(PlayerContext)\n  let contents:JSX.Element[] = []\n\n  if(album?.appleMusicAlbum){\n    contents.push(\n      <Grid item key={0}>\n        <MuiThemeProvider theme={createMuiTheme({ palette: { primary: red } })}>\n          <Button\n            href={`https://music.apple.com/jp/album/${album.appleMusicAlbum.appleMusicId}`}\n            target=\"_blank\"\n            variant=\"contained\" color=\"primary\"\n            onClick={() => dispatch({ type: \"PAUSE\" })}\n          >\n            Apple Music で聴く\n          </Button>\n        </MuiThemeProvider>\n      </Grid>\n    )\n  }\n\n  if(album?.itunesAlbum){\n    contents.push(\n      <Grid item key={1}>\n        <MuiThemeProvider theme={createMuiTheme({ palette: { primary: blue } })}>\n          <Button\n            href={`https://music.apple.com/jp/album/${album.itunesAlbum.appleMusicId}`}\n            target=\"_blank\"\n            variant=\"contained\" color=\"primary\"\n            onClick={() => dispatch({ type: \"PAUSE\" })}\n          >\n            iTunes で聴く\n          </Button>\n        </MuiThemeProvider>\n      </Grid>\n    )\n  }\n\n  if(album?.spotifyAlbum){\n    contents.push(\n      <Grid item key={2}>\n        <MuiThemeProvider theme={createMuiTheme({ palette: { primary: green } })}>\n          <Button\n            href={`https://open.spotify.com/album/${album.spotifyAlbum.spotifyId}`}\n            target=\"_blank\"\n            variant=\"contained\" color=\"primary\"\n            onClick={() => dispatch({ type: \"PAUSE\" })}\n          >\n            Spotify で聴く\n          </Button>\n        </MuiThemeProvider>\n      </Grid>\n    )\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {contents}\n    </Grid>\n  )\n}\n\nexport default ShareButtonComponent\n","import React, { useContext } from 'react';\nimport { TableRow, TableCell, IconButton, makeStyles, Theme, SvgIconProps } from '@material-ui/core';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StarRateIcon from '@material-ui/icons/StarRate'\nimport AlbumIcon from '@material-ui/icons/Album'\nimport { Track } from '../../graphql/types.d'\nimport PlayerContext, { PlaybackStatus } from '../../hooks/playerContext';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  '@keyframes playing-icon-spin': {\n    from: { transform: 'rotate(0deg)' },\n    to: { transform: 'rotate(360deg)' },\n  },\n  playingIcon: {\n    height: 24,\n    width: 24,\n    animationName: '$playing-icon-spin',\n    animationDuration: '2000ms',\n    animationIterationCount: 'infinite',\n    animationTimingFunction: 'linear',\n  },\n}));\n\nconst PreviewPlayerItemComponent = (\n  { track, index, playAction, averagePopularity }:\n  { track:Track, index:number, playAction:(no:number) => void, averagePopularity:number }\n) => {\n  const classes = useStyles()\n  const { state } = useContext(PlayerContext)\n\n  const playable = track.previewUrl !== null\n  const playing = (state.playbackStatus === PlaybackStatus.Play)\n  const currentTrack =\n    (index === state.currentNo) &&\n    (track.id === state.player.currentTrack()?.id)\n\n  let currentTrackIcon = <AlbumIcon\n    color=\"primary\"\n    className={classes.playingIcon}\n    component={(svgProps: SvgIconProps) => {\n      return (\n        <svg {...svgProps}>\n          <defs>\n            <linearGradient id=\"gradient1\">\n              {\n                playing ?\n                <>\n                  <stop offset=\"20%\" stopColor={\"#4AC6D2\"} />\n                  <stop offset=\"80%\" stopColor={\"#F2D349\"} />\n                </>\n                :\n                <stop offset=\"100%\" stopColor={\"#4AC6D2\"} />\n              }\n            </linearGradient>\n          </defs>\n          {React.cloneElement(\n            (svgProps.children as React.ReactNodeArray)[0] as React.ReactElement,\n            {\n              fill: 'url(#gradient1)',\n            },\n          )}\n        </svg>\n      );\n    }}\n  />\n\n  // 人気度が平均以上のものは星にする\n  let starable = false\n  if(averagePopularity < track.popularity) starable = true\n\n  return (\n    <TableRow>\n      <TableCell align=\"center\">\n        {\n          currentTrack ?\n            <IconButton component=\"span\">\n              {currentTrackIcon}\n            </IconButton>\n          :\n            <IconButton onClick={() => playAction(index)} disabled={!playable} component=\"span\">\n              {starable ? <StarRateIcon /> : <PlayArrowIcon />}\n            </IconButton>\n        }\n      </TableCell>\n      <TableCell>{track.name}</TableCell>\n    </TableRow>\n  )\n}\n\nexport default PreviewPlayerItemComponent\n","import React, { useContext, useRef } from 'react';\nimport { TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody, Grid } from '@material-ui/core';\nimport ImageCardComponent from '../imageCard/ImageCardComponent';\nimport PreviewPlayer from './PreviewPlayer';\nimport ShareButtonComponent from './ShareButtonComponent';\nimport { Album } from '../../graphql/types.d'\nimport PlayerContext from '../../hooks/playerContext';\nimport { useLocation } from 'react-router-dom';\nimport PreviewPlayerItemComponent from './PreviewPlayerItemComponent';\nimport _ from 'lodash';\n\nconst PreviewPlayerComponent = ({ album }:{ album:Album }) => {\n  const { dispatch } = useContext(PlayerContext)\n  const location = useLocation()\n\n  const timeConversion = (ms:number) => {\n    const seconds = parseInt((ms / 1000).toFixed(0))\n    const minutes = parseInt((ms / (1000 * 60)).toFixed(0))\n    const hours = parseInt((ms / (1000 * 60 * 60)).toFixed(0))\n    const days = parseInt((ms / (1000 * 60 * 60 * 24)).toFixed(0))\n\n    if (seconds < 60) {\n        return seconds + \"秒\";\n    } else if (minutes < 60) {\n        return minutes + \"分\";\n    } else if (hours < 24) {\n        return hours + \"時間\";\n    } else {\n        return days + \"日\"\n    }\n  }\n\n  // アルバム情報\n  const reducer = (accumulator:number, currentValue:number) => accumulator + currentValue\n  const ms = album.tracks.map(track => track.durationMs).reduce(reducer)\n  const [{ value: year },{ value: literal }] =\n    new Intl.DateTimeFormat(\"jp\", { year: 'numeric' }).formatToParts(new Date(album.releaseDate))\n  const releaseYear = `${year}${literal}`\n\n  // プレビュー画面表示時に初期化される\n  const initPlayer = useRef<boolean>(true);\n  const playAction = (no:number) => {\n    if(initPlayer.current) {\n      const _player = new PreviewPlayer({\n        linkUrl: `${location.pathname}${location.search}`,\n        tracks: album.tracks,\n        dispatch\n      })\n\n      dispatch({ type: \"SET_PLAYER\", player: _player })\n      initPlayer.current = false\n    }\n    console.log(\"dispatch PLAY\")\n    dispatch({ type: \"PLAY\", no })\n  }\n\n  // 人気度平均\n  const averagePopularity = _.meanBy(album.tracks, (t) => t.popularity)\n\n  return (\n    <TableContainer component={Paper} style={{ maxWidth: \"600px\" }}>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              <Grid\n                container\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <ImageCardComponent title={\"\"} src={album.artworkL.url} width={\"250px\"}/>\n              </Grid>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              { album.name }\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              { `${releaseYear}発売、${album.totalTracks}曲、${timeConversion(ms)}` }\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2}>\n             <ShareButtonComponent album={album} />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">試聴</TableCell>\n            <TableCell>タイトル</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {album.tracks.map((track, i) => {\n            return <PreviewPlayerItemComponent\n              key={i}\n              track={track}\n              index={i}\n              playAction={playAction}\n              averagePopularity={averagePopularity}\n            />\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default PreviewPlayerComponent\n","import React from 'react';\nimport { useAlbumQuery, Album } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport ArtistsLayout from '../../artist/list/ArtistsLayout';\nimport PreviewPlayerComponent from '../../../components/player/PreviewPlayerComponent';\n\n// TODO: このファイル汚すぎるのでリファクタすること\n\nconst AlbumInfoLayout = () => {\n  const { id } = useParams()\n  const { loading, error, data } = useAlbumQuery({ variables: { id: id } })\n\n  if (error) return <div>{error.message}</div>\n\n  let content = <></>\n\n  if(!loading && data && data.album) {\n\n    const album_content = <PreviewPlayerComponent album={data.album as Album} />\n\n    content =\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n        >\n          <Grid item>\n            {album_content}\n          </Grid>\n          <Grid item>\n            <ArtistsLayout />\n          </Grid>\n      </Grid>\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item>\n        {content}\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AlbumInfoLayout\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Artist, ArtistDocument } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport AlbumsLayout from '../../album/list/AlbumsLayout';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\n\nconst ArtistInfoLayout = () => {\n  const { id } = useParams()\n  const { error, data } =\n    useQuery<{ artist: Artist | null }>(ArtistDocument,{ variables: { id: id } })\n\n  if (error) return <div>{error.message}</div>\n\n  let content = <></>\n\n  if (data && data.artist) {\n    content =\n      <ImageCardComponent\n        title={data.artist.name}\n        src={data.artist.artworkL.url}\n        width={270}\n      />\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {content}\n      <Grid item>\n        <AlbumsLayout />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ArtistInfoLayout\n","import React, { useState } from 'react';\nimport { Grid, FormControl, InputLabel, Input, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert'\nimport { useSigninMutation, SigninPayload } from '../../../graphql/types.d';\n\nconst UserSigninLayout = () => {\n  const [notification, setNotification] = useState(<></>)\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n\n  interface SigninResponse {\n    data: { signin: SigninPayload }\n  }\n  const [signin] = useSigninMutation({\n    update: (_, response:SigninResponse) => {\n      if (response.data.signin.error) {\n        setNotification(<Alert severity=\"error\">{response.data.signin.error}</Alert>)\n      } else {\n        setNotification(<Alert severity=\"success\">ログインしました</Alert>)\n      }\n    },\n    variables: { input: { username, password } },\n  })\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <form autoComplete=\"off\">\n        <div>\n          <FormControl>\n            <InputLabel>ユーザー名</InputLabel>\n            <Input value={username} onChange={e => setUsername(e.target.value || \"\")}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>パスワード</InputLabel>\n            <Input value={password} onChange={e => setPassword(e.target.value || \"\")} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <Button type=\"submit\" onClick={(e) =>{e.preventDefault(); signin()}} variant=\"contained\">Signin</Button>\n        </div>\n        <div>{notification}</div>\n      </form>\n    </Grid>\n  )\n}\n\nexport default UserSigninLayout\n","import React, { useState } from 'react';\nimport { Grid, FormControl, InputLabel, Input, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert'\nimport { useMeQuery, useUpdateMeMutation, UpdateMePayload, UpdateMeInput } from '../../../graphql/types.d';\n\nconst UserMeLayout = () => {\n  const [notification, setNotification] = useState(<></>)\n  const [name, setName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [oldPassword, setOldPassword] = useState(\"\")\n  const [newPassword, setNewPassword] = useState(\"\")\n  const [input, setInput] = useState<UpdateMeInput>({ oldPassword })\n\n  // カレントユーザーデフォルト値\n  const { data } = useMeQuery()\n  if(name === \"\" && username === \"\" && data && data.me){\n    setName(data.me.name)\n    setUsername(data.me.username)\n  }\n  // TODO: 適当すぎるので直すこと\n  let role:JSX.Element[] = []\n  if(data && data.me){\n    role = data.me.role.allowedActions.map((action, i) => {\n        return <p key={i}>{action}</p>\n      }\n    )\n  }\n\n  // カレントユーザー更新\n  interface UpdateMeResponse {\n    data: { updateMe: UpdateMePayload }\n  }\n  const [updateMe] = useUpdateMeMutation({\n    update: (_, response:UpdateMeResponse) => {\n      if (response.data.updateMe.error) {\n        setNotification(<Alert severity=\"error\">{response.data.updateMe.error}</Alert>)\n      } else {\n        setNotification(<Alert severity=\"success\">更新しました</Alert>)\n      }\n    },\n    variables: { input },\n  })\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <form autoComplete=\"off\">\n        <div>ID: {(data && data.me) ? data.me.id : \"\"}</div>\n        <div>\n          <FormControl>\n            <InputLabel>名前</InputLabel>\n            <Input value={name} onChange={e => {\n              setName(e.target.value || \"\")\n              setInput({ ...input, name: (e.target.value || \"\") })\n            }}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>ユーザー名</InputLabel>\n            <Input value={username} onChange={e => {\n              setUsername(e.target.value || \"\")\n              setInput({ ...input, username: (e.target.value || \"\") })\n            }}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>新しいパスワード</InputLabel>\n            <Input value={newPassword} onChange={e => {\n              setNewPassword(e.target.value || \"\")\n              setInput({ ...input, newPassword: (e.target.value || \"\") })\n            }} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <FormControl required={true}>\n            <InputLabel>古いパスワード</InputLabel>\n            <Input value={oldPassword} onChange={e => {\n              setOldPassword(e.target.value || \"\")\n              setInput({ ...input, oldPassword: (e.target.value || \"\") })\n            }} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <Button type=\"submit\" onClick={(e) =>{e.preventDefault(); updateMe()}} variant=\"contained\">Update</Button>\n        </div>\n        <div>{notification}</div>\n        <div>権限: {role}</div>\n      </form>\n    </Grid>\n  )\n}\n\nexport default UserMeLayout\n","import React, { useContext } from 'react';\nimport { Grid, IconButton, makeStyles, Theme, Typography } from '@material-ui/core';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport PauseIcon from '@material-ui/icons/Pause'\nimport AutorenewIcon from '@material-ui/icons/Autorenew'\nimport PlayerContext, { PlaybackStatus, LoadingStatus } from '../../hooks/playerContext';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport ImageCardComponent from '../../components/imageCard/ImageCardComponent';\n\nconst useStyles = makeStyles((_theme: Theme) => ({\n  '@keyframes loading-icon-spin': {\n    from: { transform: 'rotate(0deg)' },\n    to: { transform: 'rotate(360deg)' },\n  },\n  loadingIcon: {\n    height: 35,\n    width: 35,\n    animationName: '$loading-icon-spin',\n    animationDuration: '2000ms',\n    animationIterationCount: 'infinite',\n    animationTimingFunction: 'linear',\n  }\n}))\n\nconst PreviewPlayerLayout = () => {\n  const { state, dispatch } = useContext(PlayerContext)\n  const classes = useStyles()\n\n  let playbackButton = <></>\n  let skipButton =\n    <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"NEXT_PLAY\" })}>\n      <SkipNextIcon fontSize=\"large\" />\n    </IconButton>\n\n  if(state.loadingStatus === LoadingStatus.Loading) {\n    // TODO: 今の所ローディング表示はしていないのでいらないかも、要確認\n    playbackButton =\n      <IconButton aria-label=\"loading\" disabled={true}>\n        <AutorenewIcon className={classes.loadingIcon} />\n      </IconButton>\n    skipButton = playbackButton\n  } else {\n    switch(state.playbackStatus) {\n      case PlaybackStatus.None:\n        playbackButton =\n          <IconButton color=\"inherit\" disabled={true}>\n            <PlayArrowIcon fontSize=\"large\" />\n          </IconButton>\n        skipButton =\n          <IconButton color=\"inherit\" disabled={true}>\n            <SkipNextIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n      case PlaybackStatus.Play:\n        playbackButton =\n          <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"PAUSE\" })}>\n            <PauseIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n      case PlaybackStatus.Pause:\n        playbackButton =\n          <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"PLAY\" })}>\n            <PlayArrowIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n      case PlaybackStatus.Stop:\n        playbackButton =\n          <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"PLAY\", no: 0 })}>\n            <PlayArrowIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n    }\n  }\n\n  let artwork_content = <></>\n  let title_content = <></>\n  if(state.player.tracks[state.currentNo]){\n    const track = state.player.tracks[state.currentNo]\n    if(track.artworkM?.url) {\n      artwork_content =\n        <ImageCardComponent linkUrl={`${state.player.linkUrl}#${track.id}`} title={\"\"} src={track.artworkM.url} width={\"40px\"} />\n    }\n    title_content =\n      <Typography style={{\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\"\n      }} variant=\"caption\" component=\"p\">{track.name}</Typography>\n  }\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"center\"\n    >\n      <Grid item xs={5}>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={1}></Grid>\n          <Grid item xs={3}>\n            {artwork_content}\n          </Grid>\n          <Grid item xs={1}></Grid>\n          <Grid item xs={7}>\n            {title_content}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={2}>\n        <Grid\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            {playbackButton}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={2}>\n        <Grid\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            {skipButton}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={2}></Grid>\n      <Grid item xs={1}>{/* ダミー */}</Grid>\n    </Grid>\n  )\n}\n\nexport default PreviewPlayerLayout\n","import React from 'react';\nimport { AppBar } from '@material-ui/core';\nimport PreviewPlayerLayout from '../player/PreviewPlayerLayout';\n\n// ref: https://material-ui.com/components/app-bar/#elevate-app-bar\nconst PlayerBar = () =>\n  <AppBar position=\"fixed\" color=\"secondary\" style={{ top: 'auto', bottom: 0 }}>\n    <PreviewPlayerLayout />\n  </AppBar>\n\nexport default PlayerBar\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\"\nimport AlbumsLayout from '../album/list/AlbumsLayout';\nimport Bar from './Bar';\nimport { ApolloProvider } from '@apollo/react-hoc';\nimport client from './client';\nimport AlbumInfoLayout from '../album/info/AlbumInfoLayout';\nimport ArtistsLayout from '../artist/list/ArtistsLayout';\nimport ArtistInfoLayout from '../artist/info/ArtistInfoLayout';\nimport UserSigninLayout from '../user/signin/UserSigninLayout';\nimport UserMeLayout from '../user/me/UserMeLayout';\nimport { Grid, Container, Toolbar } from '@material-ui/core';\nimport { PlayerProvider } from '../../hooks/playerContext';\nimport PlayerBar from './PlayerBar';\n\nconst RootStyleLayout = () =>\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <PlayerProvider >\n        {/* アプリバー */}\n        <Bar />\n        {/* プレイヤー */}\n        <PlayerBar />\n        <Container style={{ flexGrow: 1 }}>\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n            spacing={2}\n          >\n            <Grid item>\n              {/* \bアプリバーダミー */}\n              <Toolbar />\n            </Grid>\n            <Grid item>\n              <Switch>\n                <Route exact path=\"/\" component={AlbumsLayout} />\n                <Route exact path=\"/artists\" component={ArtistsLayout} />\n                <Route exact path=\"/artists/:id\" component={ArtistInfoLayout} />\n                <Route exact path=\"/albums\" component={AlbumsLayout} />\n                <Route exact path=\"/albums/:id\" component={AlbumInfoLayout} />\n                <Route exact path=\"/signin\" component={UserSigninLayout} />\n                <Route exact path=\"/me\" component={UserMeLayout} />\n              </Switch>\n            </Grid>\n            <Grid item>\n              {/* プレイヤー\bダミー */}\n              <Toolbar />\n            </Grid>\n          </Grid>\n        </Container>\n      </PlayerProvider>\n    </ApolloProvider>\n  </BrowserRouter>\n\nexport default RootStyleLayout\n","import React from 'react';\nimport { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport Root from './Root';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: '#222222',\n    },\n    secondary: {\n      main: '#4AC6D2',\n    },\n  },\n  typography: {\n    fontFamily: [\n      '\"Noto Sans JP\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n})\n\nconst RootStyleLayout = () =>\n  <ThemeProvider theme={theme}>\n    {/* リセットCSS */}\n    <CssBaseline />\n    {/* フォント */}\n    <link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+JP\" rel=\"stylesheet\" />\n    <Root />\n  </ThemeProvider>\n\nexport default RootStyleLayout\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport RootStyleLayout from './RootStyle';\nimport { register, unregister } from './serviceWorker'\n\nconst App = () => <RootStyleLayout />\n\nexport default App\n\n// SPA, PWA 対応\n// ref: https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\nconst isMobile = () => {\n  const toMatch = [\n      /Android/i,\n      /webOS/i,\n      /iPhone/i,\n      /iPad/i,\n      /iPod/i,\n      /BlackBerry/i,\n      /Windows Phone/i\n  ]\n  return toMatch.some((toMatchItem) => {\n      return navigator.userAgent.match(toMatchItem);\n  })\n}\n\nif (isMobile()) {\n  register()\n} else {\n  unregister()\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './layouts/app/App';\n\nReactDOM.render(<App />, document.querySelector('#app'));\n"],"sourceRoot":""}