{"version":3,"sources":["graphql/types.d.tsx","components/image/ImageComponent.tsx","components/imageCard/ImageCardComponent.tsx","hooks/useParameters.ts","hooks/playerContext.tsx","hooks/userContext.tsx","components/favorite/FavoriteComponent.tsx","layouts/album/item/AlbumItemLayout.tsx","components/pagination/paginationComponent.tsx","components/search/OrderComponent.tsx","components/chip/ChipsComponent.tsx","components/search/SearchKeywordComponent.tsx","layouts/album/list/AlbumsLayout.tsx","layouts/app/Bar.tsx","layouts/app/client.ts","layouts/artist/item/ArtistItemLayout.tsx","layouts/artist/list/ArtistsLayout.tsx","components/player/PreviewPlayer.ts","components/player/MusicServiceButtonComponent.tsx","components/player/PreviewPlayerItemComponent.tsx","components/player/ShareButtonComponent.tsx","components/player/PreviewPlayerComponent.tsx","layouts/album/info/AlbumInfoLayout.tsx","layouts/artist/info/ArtistInfoLayout.tsx","layouts/user/signin/UserSigninLayout.tsx","layouts/user/me/UserMeLayout.tsx","layouts/player/PreviewPlayerLayout.tsx","layouts/app/PlayerBar.tsx","layouts/information/AbputLayout.tsx","layouts/app/InitializeUser.tsx","layouts/app/Root.tsx","layouts/app/RootStyle.tsx","layouts/app/serviceWorker.ts","layouts/app/App.tsx","index.tsx"],"names":["AlbumsQueryOrderEnum","ArtistsQueryOrderEnum","SortEnum","StatusEnum","TracksQueryOrderEnum","ChangeFavoritesDocument","gql","AlbumDocument","AlbumsDocument","ArtistDocument","ArtistsDocument","MeDocument","UpdateMeDocument","SigninDocument","ImageComponent","className","src","title","width","process","CardMedia","image","style","height","ImageCardComponent","link","linkUrl","component","Link","to","createElement","Grid","item","textDecoration","children","Card","position","CardActionArea","container","left","bottom","bottomComponent","topComponent","CardContent","padding","Typography","overflow","textOverflow","whiteSpace","variant","color","ParameterPrefixKeys","artist","album","track","ParameterKeys","useParameters","prefix","location","useLocation","params","URLSearchParams","search","prefixKey","getUniqueValues","key","value","get","values","split","uniqueValues","Set","forEach","add","Array","from","customizer","objValue","srcValue","_","isArray","concat","parameters","conditions","merge","name","test","artists","id","albums","tracks","status","mergeWith","length","favorite","usernames","sort","order","type","PlaybackStatus","LoadingStatus","UserContext","createContext","initialState","user","reducer","state","action","UserProvider","useReducer","dispatch","Provider","FavoriteComponent","contentWidth","favorable_type","favorable_id","useContext","useState","setFavorite","useEffect","ids","albumIds","artistIds","includes","input","input_id","baseOptions","update","response","data","changeFavorites","currentUser","variables","ApolloReactHooks","changeFavorite","role","allowedActions","favoriteIcon","theme","createMuiTheme","palette","primary","red","stroke","strokeWidth","top","IconButton","onClick","e","preventDefault","size","AlbumItemLayout","history","useHistory","set","delete","borderRadius","fontSize","lineHeight","textAlign","background","serviceIcons","appleMusicAlbum","push","backgroundColor","itunesAlbum","spotifyAlbum","Pending","Ignore","artworkM","url","toString","PaginationComponent","no","offset","limit","fetchMore","prevComponent","setPrevComponent","alreadyFetch","setAlreadyFetch","isFetch","onEnter","cursor","updateQuery","prev","fetchMoreResult","items","OrderComponent","label","minWidth","selectItems","onChange","FormControl","InputLabel","Select","map","i","MenuItem","ChipsComponent","labels","onDelete","colorCode","main","index","Chip","SearchKeywordComponent","canSearch","setCanSearch","keyword","setKeyword","onlyFavorite","setOnlyFavorite","setUsernames","join","pathname","match","_keyword","startsWith","indexOf","slice","replace","trim","usernamesContent","filter","searchType","favoriteContent","_event","edge","htmlFor","OutlinedInput","target","onKeyDown","event","keyCode","startAdornment","endAdornment","InputAdornment","AlbumsLayout","setOrder","fetchPolicy","error","_order","message","content","spacing","direction","justify","alignItems","_child","sortType","HideOnScroll","props","window","trigger","useScrollTrigger","undefined","Slide","appear","in","Bar","resetTitle","document","querySelector","setAttribute","React","anchorEl","setAnchorEl","AppBar","Toolbar","aria-label","currentTarget","Menu","keepMounted","open","Boolean","onClose","httpLink","HttpLink","uri","credentials","headersLink","ApolloLink","operation","forward","errorLink","onError","graphQLErrors","networkError","locations","path","console","log","ApolloClient","cache","InMemoryCache","dataIdFromObject","object","ArtistItemLayout","ArtistsLayout","PreviewPlayer","playlist","currentPlaybackNo","this","previewUrl","player","Howl","html5","preload","autoplay","onend","a","autoNextPlay","onplay","setMediaMetadata","volume","fade","setTimeout","duration","seek","onstop","navigator","mediaSession","currentTrack","metadata","MediaMetadata","artwork","sizes","setActionHandler","isEmpty","play","stopAndPlay","nextNo","stop","currentNo","stopNo","playNo","pause","PlayerContext","playbackStatus","None","loadingStatus","Done","Stop","Play","nextPlay","Pause","Loading","PlayerProvider","MusicServiceButtonComponent","contents","Button","href","appleMusicId","blue","green","spotifyId","useStyles","makeStyles","transform","playingIcon","animationName","animationDuration","animationIterationCount","animationTimingFunction","PreviewPlayerItemComponent","playAction","averagePopularity","classes","playable","playing","currentTrackIcon","svgProps","stopColor","cloneElement","fill","starable","popularity","TableRow","TableCell","align","disabled","ShareButtonComponent","twitterUrl","facebookUrl","encodeURIComponent","PreviewPlayerComponent","openInfo","setOpenInfo","timeConversion","ms","seconds","parseInt","toFixed","minutes","hours","days","durationMs","reduce","accumulator","currentValue","releaseDate","Date","toLocaleDateString","year","month","day","description","totalTracks","initPlayer","useRef","current","_player","meanBy","t","previewUrlFromService","TableContainer","Paper","maxWidth","Table","TableHead","colSpan","border","artworkL","copyright","ClickAwayListener","onClickAway","Tooltip","PopperProps","disablePortal","disableFocusListener","disableHoverListener","disableTouchListener","placement","TableBody","AlbumInfoLayout","useParams","loading","titles","ReactGA","pageview","album_content","ArtistInfoLayout","useQuery","UserSigninLayout","notification","setNotification","username","setUsername","password","setPassword","signin","Alert","severity","autoComplete","Input","UserMeLayout","setup","setSetup","setName","oldPassword","setOldPassword","newPassword","setNewPassword","setInput","updateMe","required","_theme","loadingIcon","PreviewPlayerLayout","playbackButton","skipButton","artwork_content","title_content","xs","PlayerBar","AboutLayout","InitializeUser","me","RootLayout","client","Container","flexGrow","exact","secondary","typography","fontFamily","RootStyleLayout","ThemeProvider","CssBaseline","rel","Root","isLocalhost","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","App","initialize","RootStyle","some","toMatchItem","userAgent","URL","origin","addEventListener","fetch","contentType","headers","ready","unregister","reload","checkValidServiceWorker","ReactDOM","render"],"mappings":"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","file":"static/js/main.11b2da1e.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** 正の整数 */\n  PositiveNumber: any;\n  /** Table id, hex Timestamp, ID */\n  TTID: any;\n};\n\n/** アルバム */\nexport type Album = {\n   __typename?: 'Album';\n  /** Apple Music アルバム */\n  appleMusicAlbum?: Maybe<AppleMusicAlbum>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** コピーライト */\n  copyright: Scalars['String'];\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** iTunes アルバム */\n  itunesAlbum?: Maybe<AppleMusicAlbum>;\n  /** タイトル */\n  name: Scalars['String'];\n  /** レーベル */\n  recordLabel: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アルバム */\n  spotifyAlbum?: Maybe<SpotifyAlbum>;\n  /** ステータス */\n  status: StatusEnum;\n  /** トラック数 */\n  totalTracks: Scalars['PositiveNumber'];\n  /** トラック */\n  tracks: Array<Track>;\n};\n\nexport type AlbumsConditionsInputObject = {\n  /** ユーザー名 */\n  usernames?: Maybe<Array<Scalars['String']>>;\n  /** アーティストID */\n  artists?: Maybe<IdInputObject>;\n  /** アルバム名(あいまい検索) */\n  name?: Maybe<Scalars['String']>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n  /** お気に入り */\n  favorite?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum AlbumsQueryOrderEnum {\n  /** 追加順 */\n  New = 'NEW',\n  /** 発売日順 */\n  Release = 'RELEASE',\n  /** 人気順 */\n  Popularity = 'POPULARITY'\n}\n\nexport type AlbumsSortInputObject = {\n  /** 並び順対象 */\n  order?: Maybe<AlbumsQueryOrderEnum>;\n  /** 並び順 */\n  type?: Maybe<SortEnum>;\n};\n\n/** Apple Music アルバム */\nexport type AppleMusicAlbum = {\n   __typename?: 'AppleMusicAlbum';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n};\n\n/** Apple Music アーティスト */\nexport type AppleMusicArtist = {\n   __typename?: 'AppleMusicArtist';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** Apple Music トラック */\nexport type AppleMusicTrack = {\n   __typename?: 'AppleMusicTrack';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n};\n\n/** アーティスト */\nexport type Artist = {\n   __typename?: 'Artist';\n  /** 関連アルバム */\n  albums?: Maybe<Array<Album>>;\n  /** Apple Music アーティスト */\n  appleMusicArtists?: Maybe<Array<AppleMusicArtist>>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アーティスト */\n  spotifyArtists?: Maybe<Array<SpotifyArtist>>;\n  /** ステータス */\n  status: StatusEnum;\n  /** 関連曲 */\n  tracks?: Maybe<Array<Track>>;\n};\n\nexport type ArtistsConditionsInputObject = {\n  /** ユーザー名 */\n  usernames?: Maybe<Array<Scalars['String']>>;\n  /** アルバムID */\n  albums?: Maybe<IdInputObject>;\n  /** アーティスト名(あいまい検索) */\n  name?: Maybe<Scalars['String']>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n  /** お気に入り */\n  favorite?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum ArtistsQueryOrderEnum {\n  /** 名前順 */\n  Name = 'NAME',\n  /** 追加順 */\n  New = 'NEW',\n  /** 人気順 */\n  Popularity = 'POPULARITY'\n}\n\nexport type ArtistsSortInputObject = {\n  /** ソート対象 */\n  order?: Maybe<ArtistsQueryOrderEnum>;\n  /** 並び順 */\n  type?: Maybe<SortEnum>;\n};\n\n/** アートワーク */\nexport type Artwork = {\n   __typename?: 'Artwork';\n  /** 高さ */\n  height?: Maybe<Scalars['PositiveNumber']>;\n  /** URL */\n  url?: Maybe<Scalars['String']>;\n  /** 幅 */\n  width?: Maybe<Scalars['PositiveNumber']>;\n};\n\n/** Autogenerated input type of ChangeFavorites */\nexport type ChangeFavoritesInput = {\n  /** お気に入り変更したいアーティストID */\n  artistIds?: Maybe<Array<Scalars['TTID']>>;\n  /** お気に入り変更したいアルバムID */\n  albumIds?: Maybe<Array<Scalars['TTID']>>;\n  /** true の場合は一括でお気に入り登録をする。false 場合は一括で解除する。 */\n  favorite: Scalars['Boolean'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ChangeFavorites */\nexport type ChangeFavoritesPayload = {\n   __typename?: 'ChangeFavoritesPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** 更新されたカレントユーザー */\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of ChangeStatus */\nexport type ChangeStatusInput = {\n  /** 変更したいアーティストID */\n  artistId?: Maybe<Scalars['TTID']>;\n  /** 変更したいアルバムID */\n  albumId?: Maybe<Scalars['TTID']>;\n  /** 変更したいトラックID */\n  trackId?: Maybe<Scalars['TTID']>;\n  /** 変更したいステータス */\n  status: StatusEnum;\n  /** true の場合は関連のステータスは変更しない。デフォルトは false。アーティスト限定 */\n  only?: Maybe<Scalars['Boolean']>;\n  /** true の場合は Twitter に投稿する。デフォルトは true */\n  tweet?: Maybe<Scalars['Boolean']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ChangeStatus */\nexport type ChangeStatusPayload = {\n   __typename?: 'ChangeStatusPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  /** 変更されたステータスを持ったモデル */\n  model?: Maybe<ModelHasStatusUnion>;\n};\n\n/** Autogenerated input type of ClearCache */\nexport type ClearCacheInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ClearCache */\nexport type ClearCachePayload = {\n   __typename?: 'ClearCachePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  results?: Maybe<Array<Scalars['String']>>;\n};\n\n/** Autogenerated input type of CompactAlbum */\nexport type CompactAlbumInput = {\n  /** 統合後のアルバム名。 */\n  name: Scalars['String'];\n  /** 統合したいアルバムID。Apple Music アルバムのみ統合される。指定した順番通りに統合する。 */\n  albumIdsForAppleMusic?: Maybe<Array<Scalars['TTID']>>;\n  /** 統合したいアルバムID。Spotify アルバムのみ統合される。指定した順番通りに統合する。 */\n  albumIdsForSpotify?: Maybe<Array<Scalars['TTID']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CompactAlbum */\nexport type CompactAlbumPayload = {\n   __typename?: 'CompactAlbumPayload';\n  /** 統合されたアルバム */\n  album?: Maybe<Album>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** カレントユーザー */\nexport type CurrentUser = {\n   __typename?: 'CurrentUser';\n  /** お気に入り */\n  favorite: Favorite;\n  /** ID */\n  id: Scalars['TTID'];\n  /** 初期設定済み */\n  initialized: Scalars['Boolean'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** ロール */\n  role: Role;\n  /** ユーザー名 */\n  username: Scalars['String'];\n};\n\nexport type CursorInputObject = {\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n};\n\n/** お気に入り */\nexport type Favorite = {\n   __typename?: 'Favorite';\n  /** アルバムID */\n  albumIds: Array<Scalars['String']>;\n  /** アーティストID */\n  artistIds: Array<Scalars['String']>;\n};\n\n/** Autogenerated input type of ForceIgnoreAlbum */\nexport type ForceIgnoreAlbumInput = {\n  /** 除外コンテンツに登録したいアルバムID */\n  albumId: Scalars['TTID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ForceIgnoreAlbum */\nexport type ForceIgnoreAlbumPayload = {\n   __typename?: 'ForceIgnoreAlbumPayload';\n  /** 除外コンテンツに登録されたアルバム */\n  album?: Maybe<Album>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of GenerateSitemaps */\nexport type GenerateSitemapsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of GenerateSitemaps */\nexport type GenerateSitemapsPayload = {\n   __typename?: 'GenerateSitemapsPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  results?: Maybe<Array<Scalars['String']>>;\n};\n\n\nexport type IdInputObject = {\n  /** ID */\n  id?: Maybe<Array<Scalars['TTID']>>;\n};\n\n/** Autogenerated input type of IgnoreAlbums */\nexport type IgnoreAlbumsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of IgnoreAlbums */\nexport type IgnoreAlbumsPayload = {\n   __typename?: 'IgnoreAlbumsPayload';\n  /** IGNOREされたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of IgnoreArtists */\nexport type IgnoreArtistsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of IgnoreArtists */\nexport type IgnoreArtistsPayload = {\n   __typename?: 'IgnoreArtistsPayload';\n  /** IGNOREされたアーティスト */\n  artists?: Maybe<Array<Artist>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of MixAlbum */\nexport type MixAlbumInput = {\n  /** 混合したいアルバムID */\n  albumIds: Array<Scalars['TTID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of MixAlbum */\nexport type MixAlbumPayload = {\n   __typename?: 'MixAlbumPayload';\n  /** 混合されたアルバム */\n  album?: Maybe<Album>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of MixArtist */\nexport type MixArtistInput = {\n  /** メインアーティストID */\n  mainArtistId: Scalars['TTID'];\n  /** サブアーティストID */\n  subArtistId: Scalars['TTID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of MixArtist */\nexport type MixArtistPayload = {\n   __typename?: 'MixArtistPayload';\n  /** 混合されたアーティスト */\n  artist?: Maybe<Artist>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** ステータスをもつモデルのいずれか */\nexport type ModelHasStatusUnion = Album | Artist | Track;\n\nexport type Mutation = {\n   __typename?: 'Mutation';\n  /** お気に入り一括変更 */\n  changeFavorites?: Maybe<ChangeFavoritesPayload>;\n  /** ステータス変更。関連するアルバム, トラック, 各音楽サービスアルバム、各音楽サービストラックも同じステータスで更新される。 */\n  changeStatus?: Maybe<ChangeStatusPayload>;\n  /** 検索結果キャッシュをリセットする */\n  clearCache?: Maybe<ClearCachePayload>;\n  /** 複数アルバムを単一アルバムに統合する。統合前の複数アルバムは全て IGNORE される。 */\n  compactAlbum?: Maybe<CompactAlbumPayload>;\n  /** 対象アルバムを除外コンテンツに登録する */\n  forceIgnoreAlbum?: Maybe<ForceIgnoreAlbumPayload>;\n  /** サイトマップを更新する */\n  generateSitemaps?: Maybe<GenerateSitemapsPayload>;\n  /** PENDING状態のアルバム全てをIGNOREにする。よく考えてから実行すること。 */\n  ignoreAlbums?: Maybe<IgnoreAlbumsPayload>;\n  /** PENDING状態のアーティスト全てをIGNOREにする。よく考えてから実行すること。 */\n  ignoreArtists?: Maybe<IgnoreArtistsPayload>;\n  /**\n   * アルバムを混合する。\n   * 同じアルバムのはずが各音楽サービスで別のアルバムと認識される場合がある。\n   * その場合に使用する。曲数が多いアルバムを正とする。\n   */\n  mixAlbum?: Maybe<MixAlbumPayload>;\n  /**\n   * アーティストを混合する。\n   * 混合後は修正不可のため注意して使用すること。\n   */\n  mixArtist?: Maybe<MixArtistPayload>;\n  /** サインイン */\n  signin?: Maybe<SigninPayload>;\n  /** 統合したアルバムを元に戻す。統合された単一アルバムは削除される。 */\n  uncompactAlbum?: Maybe<UncompactAlbumPayload>;\n  /** アルバムの混合を解除する。アルバムと曲数に相違がある音楽サービスアルバムを分離する。 */\n  unmixAlbum?: Maybe<UnmixAlbumPayload>;\n  /** カレントユーザー情報更新 */\n  updateMe?: Maybe<UpdateMePayload>;\n  /** ACTIVE な全てのアーティストの全てのアルバムを最新の状態にする */\n  upsertActiveArtistsHasAlbums?: Maybe<UpsertActiveArtistsHasAlbumsPayload>;\n  /** アルバムを最新の状態にする */\n  upsertAlbum?: Maybe<UpsertAlbumPayload>;\n  /** アーティストを最新の状態にする */\n  upsertArtist?: Maybe<UpsertArtistPayload>;\n  /** ロールを追加更新する */\n  upsertRole?: Maybe<UpsertRolePayload>;\n};\n\n\nexport type MutationChangeFavoritesArgs = {\n  input: ChangeFavoritesInput;\n};\n\n\nexport type MutationChangeStatusArgs = {\n  input: ChangeStatusInput;\n};\n\n\nexport type MutationClearCacheArgs = {\n  input: ClearCacheInput;\n};\n\n\nexport type MutationCompactAlbumArgs = {\n  input: CompactAlbumInput;\n};\n\n\nexport type MutationForceIgnoreAlbumArgs = {\n  input: ForceIgnoreAlbumInput;\n};\n\n\nexport type MutationGenerateSitemapsArgs = {\n  input: GenerateSitemapsInput;\n};\n\n\nexport type MutationIgnoreAlbumsArgs = {\n  input: IgnoreAlbumsInput;\n};\n\n\nexport type MutationIgnoreArtistsArgs = {\n  input: IgnoreArtistsInput;\n};\n\n\nexport type MutationMixAlbumArgs = {\n  input: MixAlbumInput;\n};\n\n\nexport type MutationMixArtistArgs = {\n  input: MixArtistInput;\n};\n\n\nexport type MutationSigninArgs = {\n  input: SigninInput;\n};\n\n\nexport type MutationUncompactAlbumArgs = {\n  input: UncompactAlbumInput;\n};\n\n\nexport type MutationUnmixAlbumArgs = {\n  input: UnmixAlbumInput;\n};\n\n\nexport type MutationUpdateMeArgs = {\n  input: UpdateMeInput;\n};\n\n\nexport type MutationUpsertActiveArtistsHasAlbumsArgs = {\n  input: UpsertActiveArtistsHasAlbumsInput;\n};\n\n\nexport type MutationUpsertAlbumArgs = {\n  input: UpsertAlbumInput;\n};\n\n\nexport type MutationUpsertArtistArgs = {\n  input: UpsertArtistInput;\n};\n\n\nexport type MutationUpsertRoleArgs = {\n  input: UpsertRoleInput;\n};\n\n\nexport type Query = {\n   __typename?: 'Query';\n  /** アルバム情報取得 */\n  album?: Maybe<Album>;\n  /** アルバム一覧取得 */\n  albums: Array<Album>;\n  /** Apple Music Token */\n  appleMusicToken: Scalars['String'];\n  /** アーティスト取得 */\n  artist?: Maybe<Artist>;\n  /** アーティスト一覧取得 */\n  artists: Array<Artist>;\n  /** 必ずエラーを発生させる。セッションテストなどで使用 */\n  error: Scalars['String'];\n  /** カレントユーザー情報取得 */\n  me: CurrentUser;\n  /** ロール一覧取得 */\n  roles: Array<Role>;\n  /** トラック一覧取得 */\n  tracks: Array<Track>;\n};\n\n\nexport type QueryAlbumArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryAlbumsArgs = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<AlbumsSortInputObject>;\n  conditions?: Maybe<AlbumsConditionsInputObject>;\n};\n\n\nexport type QueryArtistArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryArtistsArgs = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<ArtistsSortInputObject>;\n  conditions?: Maybe<ArtistsConditionsInputObject>;\n};\n\n\nexport type QueryTracksArgs = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<TracksSortInputObject>;\n  conditions?: Maybe<TracksConditionsInputObject>;\n};\n\n/** ロール */\nexport type Role = {\n   __typename?: 'Role';\n  /** 出来ること一覧 */\n  allowedActions: Array<Scalars['String']>;\n  /** 説明 */\n  description: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** Autogenerated input type of Signin */\nexport type SigninInput = {\n  username?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of Signin */\nexport type SigninPayload = {\n   __typename?: 'SigninPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\nexport enum SortEnum {\n  /** 昇順 */\n  Asc = 'ASC',\n  /** 降順 */\n  Desc = 'DESC'\n}\n\n/** Spotify アルバム */\nexport type SpotifyAlbum = {\n   __typename?: 'SpotifyAlbum';\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\n/** Spotify アーティスト */\nexport type SpotifyArtist = {\n   __typename?: 'SpotifyArtist';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\n/** Spotify トラック */\nexport type SpotifyTrack = {\n   __typename?: 'SpotifyTrack';\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\nexport enum StatusEnum {\n  /** 保留 : デフォルトの検索結果に表示されない */\n  Pending = 'PENDING',\n  /** 有効 : 通常検索結果に表示される */\n  Active = 'ACTIVE',\n  /** 除外 : 検索結果から除外される。最新情報などを取得する際などでも除外される */\n  Ignore = 'IGNORE'\n}\n\n\n/** トラック */\nexport type Track = {\n   __typename?: 'Track';\n  /** Apple Music トラック */\n  appleMusicTracks?: Maybe<Array<AppleMusicTrack>>;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** ディスク番号 */\n  discNumber: Scalars['PositiveNumber'];\n  /** 再生時間 */\n  durationMs: Scalars['PositiveNumber'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 国際標準レコーディングコード */\n  isrc: Scalars['String'];\n  /** iTunes トラック */\n  itunesTracks?: Maybe<Array<AppleMusicTrack>>;\n  /** タイトル */\n  name: Scalars['String'];\n  /** 人気度 */\n  popularity: Scalars['Int'];\n  /** プレビューURL */\n  previewUrl?: Maybe<Scalars['String']>;\n  /** Spotify トラック */\n  spotifyTracks?: Maybe<Array<SpotifyTrack>>;\n  /** ステータス */\n  status: StatusEnum;\n  /** トラック番号 */\n  trackNumber: Scalars['PositiveNumber'];\n};\n\nexport type TracksConditionsInputObject = {\n  /** トラック名(あいまい検索) */\n  name?: Maybe<Scalars['String']>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n};\n\nexport enum TracksQueryOrderEnum {\n  /** 名前順 */\n  Name = 'NAME',\n  /** 追加順 */\n  New = 'NEW',\n  /** 人気順 */\n  Popularity = 'POPULARITY'\n}\n\nexport type TracksSortInputObject = {\n  /** 並び順対象 */\n  order?: Maybe<TracksQueryOrderEnum>;\n  /** 並び順 */\n  type?: Maybe<SortEnum>;\n};\n\n/** Autogenerated input type of UncompactAlbum */\nexport type UncompactAlbumInput = {\n  /** 統合解除したいアルバムID。Apple Music アルバムのみ解除される。 */\n  albumIdForAppleMusic?: Maybe<Scalars['TTID']>;\n  /** 統合解除したいアルバムID。Spotify アルバムのみ解除される。 */\n  albumIdForSpotify?: Maybe<Scalars['TTID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UncompactAlbum */\nexport type UncompactAlbumPayload = {\n   __typename?: 'UncompactAlbumPayload';\n  /** 統合解除されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UnmixAlbum */\nexport type UnmixAlbumInput = {\n  /** 混合解除したいアルバムID */\n  albumId: Scalars['TTID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UnmixAlbum */\nexport type UnmixAlbumPayload = {\n   __typename?: 'UnmixAlbumPayload';\n  /** 混合されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateMe */\nexport type UpdateMeInput = {\n  name?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  newPassword?: Maybe<Scalars['String']>;\n  oldPassword: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateMe */\nexport type UpdateMePayload = {\n   __typename?: 'UpdateMePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertActiveArtistsHasAlbums */\nexport type UpsertActiveArtistsHasAlbumsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertActiveArtistsHasAlbums */\nexport type UpsertActiveArtistsHasAlbumsPayload = {\n   __typename?: 'UpsertActiveArtistsHasAlbumsPayload';\n  /** 追加されたアーティスト */\n  artists?: Maybe<Array<Artist>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertAlbum */\nexport type UpsertAlbumInput = {\n  /** 指定したアルバムのトラック(ISRC)を含んでいる別音楽サービスのアルバムを一括登録 */\n  albumId?: Maybe<Scalars['TTID']>;\n  /** Apple Music か iTunes のアルバムを登録 */\n  appleMusicId?: Maybe<Scalars['String']>;\n  /** Spotify のアルバムを登録 */\n  spotifyId?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertAlbum */\nexport type UpsertAlbumPayload = {\n   __typename?: 'UpsertAlbumPayload';\n  /** 追加されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertArtist */\nexport type UpsertArtistInput = {\n  /**\n   * アーティスト名から全ての音楽サービスのアーティストを登録。登録後、関連アルバム、トラックを全て保存する。\n   * (ありきたりなアーティスト名の場合は関係のないアーティストが登録される可能性があるため注意)\n   */\n  artistName?: Maybe<Scalars['String']>;\n  /** アーティストに関連する音楽サービスアーティストを更新。関連アルバム、トラックを全て更新する。 */\n  artistId?: Maybe<Scalars['String']>;\n  /** Apple Music のアーティストを登録。登録後、関連アルバム、トラックを全て保存する。 */\n  appleMusicId?: Maybe<Scalars['String']>;\n  /** Spotify のアーティストを登録。登録後、関連アルバム、トラックを全て保存する。 */\n  spotifyId?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertArtist */\nexport type UpsertArtistPayload = {\n   __typename?: 'UpsertArtistPayload';\n  /** 追加されたアーティスト */\n  artists?: Maybe<Array<Artist>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertRole */\nexport type UpsertRoleInput = {\n  /** 変更したいロール。IDを指定しない場合は追加される */\n  id?: Maybe<Scalars['TTID']>;\n  /** ロール名。IDを指定しない場合は必須。 */\n  name?: Maybe<Scalars['String']>;\n  /** ロールの説明。IDを指定しない場合は必須。 */\n  description?: Maybe<Scalars['String']>;\n  /** 変更したいアクション。全て上書きされる。IDを指定しない場合は必須。 */\n  allowedActions?: Maybe<Array<Scalars['String']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertRole */\nexport type UpsertRolePayload = {\n   __typename?: 'UpsertRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  /** 追加更新されたロール */\n  role?: Maybe<Role>;\n};\n\nexport type ChangeFavoritesMutationVariables = {\n  input: ChangeFavoritesInput;\n};\n\n\nexport type ChangeFavoritesMutation = (\n  { __typename?: 'Mutation' }\n  & { changeFavorites?: Maybe<(\n    { __typename?: 'ChangeFavoritesPayload' }\n    & { currentUser?: Maybe<(\n      { __typename?: 'CurrentUser' }\n      & Pick<CurrentUser, 'id' | 'name' | 'username'>\n      & { role: (\n        { __typename?: 'Role' }\n        & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n      ), favorite: (\n        { __typename?: 'Favorite' }\n        & Pick<Favorite, 'albumIds' | 'artistIds'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type AlbumQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type AlbumQuery = (\n  { __typename?: 'Query' }\n  & { album?: Maybe<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id' | 'totalTracks' | 'name' | 'releaseDate' | 'recordLabel' | 'copyright'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id' | 'spotifyId'>\n    )>, tracks: Array<(\n      { __typename?: 'Track' }\n      & Pick<Track, 'id' | 'isrc' | 'name' | 'discNumber' | 'trackNumber' | 'durationMs' | 'previewUrl' | 'popularity'>\n      & { artworkM: (\n        { __typename?: 'Artwork' }\n        & Pick<Artwork, 'url' | 'width' | 'height'>\n      ) }\n    )> }\n  )> }\n);\n\nexport type AlbumsQueryVariables = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<AlbumsSortInputObject>;\n  conditions?: Maybe<AlbumsConditionsInputObject>;\n};\n\n\nexport type AlbumsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id' | 'name' | 'status'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id'>\n    )> }\n  )> }\n);\n\nexport type ArtistQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type ArtistQuery = (\n  { __typename?: 'Query' }\n  & { artist?: Maybe<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type ArtistsQueryVariables = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<ArtistsSortInputObject>;\n  conditions?: Maybe<ArtistsConditionsInputObject>;\n};\n\n\nexport type ArtistsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name' | 'status'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type TracksQueryVariables = {\n  cursor?: Maybe<CursorInputObject>;\n  sort?: Maybe<TracksSortInputObject>;\n  conditions?: Maybe<TracksConditionsInputObject>;\n};\n\n\nexport type TracksQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Track' }\n    & Pick<Track, 'id' | 'isrc' | 'name' | 'discNumber' | 'trackNumber' | 'durationMs' | 'previewUrl' | 'popularity'>\n    & { appleMusicTracks?: Maybe<Array<(\n      { __typename?: 'AppleMusicTrack' }\n      & Pick<AppleMusicTrack, 'id'>\n    )>>, itunesTracks?: Maybe<Array<(\n      { __typename?: 'AppleMusicTrack' }\n      & Pick<AppleMusicTrack, 'id'>\n    )>>, spotifyTracks?: Maybe<Array<(\n      { __typename?: 'SpotifyTrack' }\n      & Pick<SpotifyTrack, 'id'>\n    )>>, artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'CurrentUser' }\n    & Pick<CurrentUser, 'id' | 'name' | 'username' | 'initialized'>\n    & { role: (\n      { __typename?: 'Role' }\n      & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n    ), favorite: (\n      { __typename?: 'Favorite' }\n      & Pick<Favorite, 'albumIds' | 'artistIds'>\n    ) }\n  ) }\n);\n\nexport type UpdateMeMutationVariables = {\n  input: UpdateMeInput;\n};\n\n\nexport type UpdateMeMutation = (\n  { __typename?: 'Mutation' }\n  & { updateMe?: Maybe<(\n    { __typename?: 'UpdateMePayload' }\n    & Pick<UpdateMePayload, 'error'>\n    & { currentUser?: Maybe<(\n      { __typename?: 'CurrentUser' }\n      & Pick<CurrentUser, 'id' | 'username' | 'name'>\n    )> }\n  )> }\n);\n\nexport type AppleMusicTokenQueryVariables = {};\n\n\nexport type AppleMusicTokenQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'appleMusicToken'>\n);\n\nexport type SigninMutationVariables = {\n  input: SigninInput;\n};\n\n\nexport type SigninMutation = (\n  { __typename?: 'Mutation' }\n  & { signin?: Maybe<(\n    { __typename?: 'SigninPayload' }\n    & Pick<SigninPayload, 'error'>\n  )> }\n);\n\n\nexport const ChangeFavoritesDocument = gql`\n    mutation ChangeFavorites($input: ChangeFavoritesInput!) {\n  changeFavorites(input: $input) {\n    currentUser {\n      id\n      name\n      username\n      role {\n        id\n        name\n        description\n        allowedActions\n      }\n      favorite {\n        albumIds\n        artistIds\n      }\n    }\n  }\n}\n    `;\nexport type ChangeFavoritesMutationFn = ApolloReactCommon.MutationFunction<ChangeFavoritesMutation, ChangeFavoritesMutationVariables>;\n\n/**\n * __useChangeFavoritesMutation__\n *\n * To run a mutation, you first call `useChangeFavoritesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeFavoritesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeFavoritesMutation, { data, loading, error }] = useChangeFavoritesMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useChangeFavoritesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChangeFavoritesMutation, ChangeFavoritesMutationVariables>) {\n        return ApolloReactHooks.useMutation<ChangeFavoritesMutation, ChangeFavoritesMutationVariables>(ChangeFavoritesDocument, baseOptions);\n      }\nexport type ChangeFavoritesMutationHookResult = ReturnType<typeof useChangeFavoritesMutation>;\nexport type ChangeFavoritesMutationResult = ApolloReactCommon.MutationResult<ChangeFavoritesMutation>;\nexport type ChangeFavoritesMutationOptions = ApolloReactCommon.BaseMutationOptions<ChangeFavoritesMutation, ChangeFavoritesMutationVariables>;\nexport const AlbumDocument = gql`\n    query Album($id: TTID!) {\n  album(id: $id) {\n    id\n    totalTracks\n    name\n    releaseDate\n    recordLabel\n    copyright\n    artworkL {\n      url\n      width\n      height\n    }\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n      appleMusicId\n    }\n    itunesAlbum {\n      id\n      appleMusicId\n    }\n    spotifyAlbum {\n      id\n      spotifyId\n    }\n    tracks {\n      id\n      isrc\n      name\n      discNumber\n      trackNumber\n      durationMs\n      previewUrl\n      popularity\n      artworkM {\n        url\n        width\n        height\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useAlbumQuery__\n *\n * To run a query within a React component, call `useAlbumQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAlbumQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n      }\nexport function useAlbumLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n        }\nexport type AlbumQueryHookResult = ReturnType<typeof useAlbumQuery>;\nexport type AlbumLazyQueryHookResult = ReturnType<typeof useAlbumLazyQuery>;\nexport type AlbumQueryResult = ApolloReactCommon.QueryResult<AlbumQuery, AlbumQueryVariables>;\nexport const AlbumsDocument = gql`\n    query Albums($cursor: CursorInputObject, $sort: AlbumsSortInputObject, $conditions: AlbumsConditionsInputObject) {\n  items: albums(cursor: $cursor, sort: $sort, conditions: $conditions) {\n    id\n    name\n    status\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n    }\n    itunesAlbum {\n      id\n    }\n    spotifyAlbum {\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useAlbumsQuery__\n *\n * To run a query within a React component, call `useAlbumsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumsQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      sort: // value for 'sort'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useAlbumsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n      }\nexport function useAlbumsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n        }\nexport type AlbumsQueryHookResult = ReturnType<typeof useAlbumsQuery>;\nexport type AlbumsLazyQueryHookResult = ReturnType<typeof useAlbumsLazyQuery>;\nexport type AlbumsQueryResult = ApolloReactCommon.QueryResult<AlbumsQuery, AlbumsQueryVariables>;\nexport const ArtistDocument = gql`\n    query Artist($id: TTID!) {\n  artist(id: $id) {\n    id\n    name\n    artworkL {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useArtistQuery__\n *\n * To run a query within a React component, call `useArtistQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useArtistQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n      }\nexport function useArtistLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n        }\nexport type ArtistQueryHookResult = ReturnType<typeof useArtistQuery>;\nexport type ArtistLazyQueryHookResult = ReturnType<typeof useArtistLazyQuery>;\nexport type ArtistQueryResult = ApolloReactCommon.QueryResult<ArtistQuery, ArtistQueryVariables>;\nexport const ArtistsDocument = gql`\n    query Artists($cursor: CursorInputObject, $sort: ArtistsSortInputObject, $conditions: ArtistsConditionsInputObject) {\n  items: artists(cursor: $cursor, sort: $sort, conditions: $conditions) {\n    id\n    name\n    status\n    artworkM {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useArtistsQuery__\n *\n * To run a query within a React component, call `useArtistsQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistsQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      sort: // value for 'sort'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useArtistsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n      }\nexport function useArtistsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n        }\nexport type ArtistsQueryHookResult = ReturnType<typeof useArtistsQuery>;\nexport type ArtistsLazyQueryHookResult = ReturnType<typeof useArtistsLazyQuery>;\nexport type ArtistsQueryResult = ApolloReactCommon.QueryResult<ArtistsQuery, ArtistsQueryVariables>;\nexport const TracksDocument = gql`\n    query Tracks($cursor: CursorInputObject, $sort: TracksSortInputObject, $conditions: TracksConditionsInputObject) {\n  items: tracks(cursor: $cursor, sort: $sort, conditions: $conditions) {\n    id\n    isrc\n    name\n    discNumber\n    trackNumber\n    durationMs\n    previewUrl\n    popularity\n    appleMusicTracks {\n      id\n    }\n    itunesTracks {\n      id\n    }\n    spotifyTracks {\n      id\n    }\n    artworkM {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useTracksQuery__\n *\n * To run a query within a React component, call `useTracksQuery` and pass it any options that fit your needs.\n * When your component renders, `useTracksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTracksQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      sort: // value for 'sort'\n *      conditions: // value for 'conditions'\n *   },\n * });\n */\nexport function useTracksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TracksQuery, TracksQueryVariables>) {\n        return ApolloReactHooks.useQuery<TracksQuery, TracksQueryVariables>(TracksDocument, baseOptions);\n      }\nexport function useTracksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TracksQuery, TracksQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TracksQuery, TracksQueryVariables>(TracksDocument, baseOptions);\n        }\nexport type TracksQueryHookResult = ReturnType<typeof useTracksQuery>;\nexport type TracksLazyQueryHookResult = ReturnType<typeof useTracksLazyQuery>;\nexport type TracksQueryResult = ApolloReactCommon.QueryResult<TracksQuery, TracksQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    name\n    username\n    initialized\n    role {\n      id\n      name\n      description\n      allowedActions\n    }\n    favorite {\n      albumIds\n      artistIds\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const UpdateMeDocument = gql`\n    mutation UpdateMe($input: UpdateMeInput!) {\n  updateMe(input: $input) {\n    currentUser {\n      id\n      username\n      name\n    }\n    error\n  }\n}\n    `;\nexport type UpdateMeMutationFn = ApolloReactCommon.MutationFunction<UpdateMeMutation, UpdateMeMutationVariables>;\n\n/**\n * __useUpdateMeMutation__\n *\n * To run a mutation, you first call `useUpdateMeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMeMutation, { data, loading, error }] = useUpdateMeMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateMeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateMeMutation, UpdateMeMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateMeMutation, UpdateMeMutationVariables>(UpdateMeDocument, baseOptions);\n      }\nexport type UpdateMeMutationHookResult = ReturnType<typeof useUpdateMeMutation>;\nexport type UpdateMeMutationResult = ApolloReactCommon.MutationResult<UpdateMeMutation>;\nexport type UpdateMeMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateMeMutation, UpdateMeMutationVariables>;\nexport const AppleMusicTokenDocument = gql`\n    query AppleMusicToken {\n  appleMusicToken\n}\n    `;\n\n/**\n * __useAppleMusicTokenQuery__\n *\n * To run a query within a React component, call `useAppleMusicTokenQuery` and pass it any options that fit your needs.\n * When your component renders, `useAppleMusicTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAppleMusicTokenQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAppleMusicTokenQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AppleMusicTokenQuery, AppleMusicTokenQueryVariables>) {\n        return ApolloReactHooks.useQuery<AppleMusicTokenQuery, AppleMusicTokenQueryVariables>(AppleMusicTokenDocument, baseOptions);\n      }\nexport function useAppleMusicTokenLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AppleMusicTokenQuery, AppleMusicTokenQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AppleMusicTokenQuery, AppleMusicTokenQueryVariables>(AppleMusicTokenDocument, baseOptions);\n        }\nexport type AppleMusicTokenQueryHookResult = ReturnType<typeof useAppleMusicTokenQuery>;\nexport type AppleMusicTokenLazyQueryHookResult = ReturnType<typeof useAppleMusicTokenLazyQuery>;\nexport type AppleMusicTokenQueryResult = ApolloReactCommon.QueryResult<AppleMusicTokenQuery, AppleMusicTokenQueryVariables>;\nexport const SigninDocument = gql`\n    mutation Signin($input: SigninInput!) {\n  signin(input: $input) {\n    error\n  }\n}\n    `;\nexport type SigninMutationFn = ApolloReactCommon.MutationFunction<SigninMutation, SigninMutationVariables>;\n\n/**\n * __useSigninMutation__\n *\n * To run a mutation, you first call `useSigninMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSigninMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signinMutation, { data, loading, error }] = useSigninMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSigninMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SigninMutation, SigninMutationVariables>) {\n        return ApolloReactHooks.useMutation<SigninMutation, SigninMutationVariables>(SigninDocument, baseOptions);\n      }\nexport type SigninMutationHookResult = ReturnType<typeof useSigninMutation>;\nexport type SigninMutationResult = ApolloReactCommon.MutationResult<SigninMutation>;\nexport type SigninMutationOptions = ApolloReactCommon.BaseMutationOptions<SigninMutation, SigninMutationVariables>;","import React from 'react';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst ImageComponent = ({\n  className = \"\", src = \"\", title = \"\", width\n}:{\n  className?:string, src?:string, title?:string, width:string|number\n}) => {\n  if(src === \"\") src = `${process.env.PUBLIC_URL}/no_image.png`\n\n  return (\n    <CardMedia\n      className={className}\n      image={src}\n      title={title}\n      style={{ width: width, height: width }}\n    />\n  )\n}\n\nexport default ImageComponent;\n","import React, { createElement } from 'react';\nimport Card from '@material-ui/core/Card';\nimport ImageComponent from '../image/ImageComponent'\nimport { Grid, CardActionArea, CardContent, Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\ninterface Image {\n  title: string\n  src?: string | null\n  width: number\n  linkUrl?: string\n  bottomComponent?: JSX.Element\n  topComponent?: JSX.Element\n}\n\nconst ImageCardComponent = (image:Image) => {\n  const link = image.linkUrl ? { component: Link, to: image.linkUrl } : {}\n\n  return (\n    createElement(Grid, {\n      item: true, style: { textDecoration: \"none\" }, ...link,\n      children: (\n        <Card style={{ width: image.width, position: \"relative\" }}>\n          <CardActionArea>\n            <Grid container style={{ position: \"absolute\", left: \"5px\", bottom: \"5px\" }}>\n              { image.bottomComponent ? image.bottomComponent : <></> }\n            </Grid>\n            <ImageComponent src={image.src || \"\"} width={image.width} title={image.title}/>\n          </CardActionArea>\n          { image.topComponent ? image.topComponent : <></> }\n          {\n            image.title === \"\" ? <></> :\n            <CardContent style={{ padding: \"5px 5px\" }}>\n              <Typography style={{\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\"\n              }} variant=\"caption\" color=\"textSecondary\" component=\"p\">\n                {image.title}\n              </Typography>\n            </CardContent>\n          }\n        </Card>\n      )\n    })\n  )\n}\n\nexport default ImageCardComponent\n","import { useLocation } from \"react-router-dom\"\nimport _ from \"lodash\"\n\nexport const ParameterPrefixKeys = {\n  artist: \"a\",\n  album:  \"b\",\n  track:  \"t\",\n}\n\nexport const ParameterKeys = {\n  keyword:  \"q\",\n  ids:      \"i\",\n  status:   \"s\",\n  order:    \"o\",\n  sortType: \"r\",\n  favorite: \"f\",\n  username: \"u\",\n//tag:      \"t\", // いつか実装する\n}\n\nexport type ParameterPrefix = keyof typeof ParameterPrefixKeys;\n\nexport default function useParameters<T>(prefix:ParameterPrefix){\n  const location = useLocation()\n  const params = new URLSearchParams(location.search)\n  const prefixKey = ParameterPrefixKeys[prefix]\n\n  const getUniqueValues = (key:string):string[] => {\n    const value = params.get(key)\n    if(value === null) return []\n\n    // , ではなく - にしている理由は文字化けするからURLセーフな - または _ にする必要あり\n    const values = value.split(\"-\")\n    const uniqueValues = new Set<string>()\n\n    values.forEach((value) => {\n      uniqueValues.add(value)\n    })\n\n    return Array.from(uniqueValues)\n  }\n\n  const customizer = (objValue:any, srcValue:any) => {\n    if (_.isArray(objValue)) {\n      return objValue.concat(srcValue)\n    }\n  }\n\n  let parameters = {}\n  let conditions = {}\n\n  // 並び順対象\n  getUniqueValues(prefixKey + ParameterKeys.keyword).forEach((value) => {\n    conditions = _.merge(conditions, { name: value })\n  })\n  parameters = { ...parameters, conditions: conditions }\n\n  // ID\n  getUniqueValues(prefixKey + ParameterKeys.ids).forEach((value) => {\n    switch( true ){\n      case /^art/.test(value):\n        parameters = _.merge(parameters, { conditions: { artists: { id: [value] } } })\n        break;\n      case /^abm/.test(value):\n        parameters = _.merge(parameters, { conditions: { albums: { id: [value] } } })\n        break;\n      case /^trk/.test(value):\n        parameters = _.merge(parameters, { conditions: { tracks: { id: [value] } } })\n        break;\n    }\n  })\n\n  // ステータス\n  let status = { status: [] }\n  getUniqueValues(prefixKey + ParameterKeys.status).forEach((value) => {\n      status = _.mergeWith(status, { status: [value] }, customizer)\n  })\n  if(status.status.length !== 0) {\n    parameters = _.mergeWith(parameters, { conditions: { ...status } })\n  }\n\n  // お気に入り\n  getUniqueValues(prefixKey + ParameterKeys.favorite).forEach((value) => {\n    parameters = _.merge(parameters, { conditions: { favorite: (value === \"1\") } })\n  })\n\n  // ユーザーお気に入り\n  let usernames = { usernames: [] }\n  getUniqueValues(prefixKey + ParameterKeys.username).forEach((value) => {\n    usernames = _.mergeWith(usernames, { usernames: [value] }, customizer)\n  })\n  if(usernames.usernames.length !== 0) {\n    parameters = _.mergeWith(parameters, { conditions: { ...usernames } })\n  }\n\n  // 並び順対象\n  getUniqueValues(prefixKey + ParameterKeys.order).forEach((value) => {\n    parameters = _.merge(parameters, { sort: { order: value } })\n  })\n\n  // 並び順\n  getUniqueValues(prefixKey + ParameterKeys.sortType).forEach((value) => {\n    parameters = _.merge(parameters, { sort: { type: value } })\n  })\n\n  return parameters as T\n}\n","import React, { useReducer, createContext, Dispatch } from 'react'\nimport PreviewPlayer from '../components/player/PreviewPlayer'\n\ntype ContextValue = {\n  state: StateType\n  dispatch: Dispatch<ActionType>\n}\n\nconst PlayerContext = createContext({} as ContextValue)\n\nexport enum PlaybackStatus {\n  None,\n  Play,\n  Pause,\n  Stop,\n}\n\nexport enum LoadingStatus {\n  None,\n  Loading,\n  Done,\n}\n\nconst initialState = {\n  player: new PreviewPlayer({ linkUrl: \"\", tracks: [] }),\n  currentNo: 0,\n  playbackStatus: PlaybackStatus.None,\n  loadingStatus: LoadingStatus.Done,\n}\n\nexport type StateType = typeof initialState\nexport type ActionType =\n  | { type: 'SET_PLAYER', player: PreviewPlayer }\n  | { type: 'PLAY', no?: number }\n  | { type: 'NEXT_PLAY' }\n  | { type: 'PAUSE' }\n  | { type: 'STOP' }\n  | { type: 'LOADING_START' }\n  | { type: 'LOADING_DONE' }\n  | { type: 'STATUS_FINISH' }\n\nconst reducer = (state:StateType, action:ActionType):StateType => {\n  switch(action.type) {\n    case 'SET_PLAYER':\n      state.player.stop()\n      return {\n        ...state,\n        player: action.player,\n        playbackStatus: PlaybackStatus.Stop,\n      }\n    case 'PLAY':\n      state.player.play(action.no)\n      const currentNo = action.no === undefined ? state.currentNo : action.no\n      return {\n        ...state,\n        playbackStatus: PlaybackStatus.Play,\n        currentNo,\n      }\n    case 'NEXT_PLAY':\n      (async () => await state.player.nextPlay())()\n      return {\n        ...state,\n        currentNo: state.player.currentPlaybackNo,\n        playbackStatus: PlaybackStatus.Play,\n      }\n    case 'PAUSE':\n      state.player.pause()\n      return {\n        ...state,\n        playbackStatus: PlaybackStatus.Pause,\n      }\n    case 'STOP':\n      state.player.stop()\n      return {\n        ...state,\n        playbackStatus: PlaybackStatus.Play,\n      }\n    case 'LOADING_START':\n      return {\n        ...state,\n        loadingStatus: LoadingStatus.Loading,\n      }\n    case 'LOADING_DONE':\n      return {\n        ...state,\n        loadingStatus: LoadingStatus.Done,\n      }\n    case 'STATUS_FINISH':\n      return {\n        ...state,\n        currentNo: state.player.currentPlaybackNo,\n        playbackStatus: PlaybackStatus.Pause,\n        loadingStatus: LoadingStatus.Done,\n      }\n    default:\n      return state\n  }\n}\n\nconst PlayerProvider = ({ children }:{ children:JSX.Element|JSX.Element[] }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return <PlayerContext.Provider value={{ state, dispatch }}>{children}</PlayerContext.Provider>\n}\n\nexport default PlayerContext\nexport { PlayerProvider }\n","import React, { useReducer, createContext, Dispatch } from 'react'\nimport { CurrentUser } from '../graphql/types.d'\n\ntype ContextValue = {\n  state: StateType\n  dispatch: Dispatch<ActionType>\n}\n\nconst UserContext = createContext({} as ContextValue)\n\nconst initialState:{ user: null | CurrentUser } = {\n  user: null\n}\n\nexport type StateType = typeof initialState\nexport type ActionType =\n  | { type: 'SET_USER', user: CurrentUser }\n\nconst reducer = (state:StateType, action:ActionType):StateType => {\n  switch(action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.user }\n    default:\n      return state\n  }\n}\n\nconst UserProvider = ({ children }:{ children:JSX.Element|JSX.Element[] }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  return <UserContext.Provider value={{ state, dispatch }}>{children}</UserContext.Provider>\n}\n\nexport default UserContext\nexport { UserProvider }\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Grid, IconButton, MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { red } from '@material-ui/core/colors';\nimport UserContext from '../../hooks/userContext';\nimport { useChangeFavoritesMutation, ChangeFavoritesInput, ChangeFavoritesMutationResult, CurrentUser } from '../../graphql/types.d';\n\n// TODO: 全体的にダサいので実装なんとかする\nconst FavoriteComponent = ({\n  contentWidth, favorable_type, favorable_id\n}:{\n  contentWidth:number, favorable_type: \"artist\"|\"album\", favorable_id:string\n}) => {\n  const { state, dispatch } = useContext(UserContext)\n  const [favorite, setFavorite] = useState(false)\n\n  useEffect(() => {\n    if(state.user && state.user.favorite) {\n      const ids = state.user.favorite.albumIds.concat(state.user.favorite.artistIds)\n      setFavorite(ids.includes(favorable_id))\n    }\n  }, [state, favorable_id])\n\n  // お気に入り更新\n  let input: ChangeFavoritesInput = { favorite: !favorite }\n  let input_id:{ artistIds?: String[], albumIds?: String[] } = {}\n  if(favorable_type === \"artist\"){\n    input_id = { artistIds: [favorable_id] }\n  } else if(favorable_type === \"album\"){\n    input_id = { albumIds: [favorable_id] }\n  }\n  input = { favorite: !favorite, ...input_id }\n  const [changeFavorite] = useChangeFavoritesMutation({\n    update: (_, response:ChangeFavoritesMutationResult) => {\n      if(response.data?.changeFavorites?.currentUser){\n        dispatch({ type: 'SET_USER', user: (response.data.changeFavorites.currentUser as unknown as CurrentUser) })\n        setFavorite(!favorite)\n      }\n    },\n    variables: { input },\n  })\n\n  // お気に入り機能制限\n  if(state.user && state.user.role.allowedActions.includes(\"changeFavorites\")){\n    const favoriteIcon =\n    <MuiThemeProvider theme={ createMuiTheme({ palette: { primary: red } })}>\n      <FavoriteIcon color=\"primary\" stroke={\"white\"} strokeWidth={1} />\n    </MuiThemeProvider>\n\n    return (\n      <Grid container style={{ width: 24, position: \"absolute\", left: `${contentWidth - 35}px`, top: \"5px\" }}>\n        <IconButton onClick={(e) => {\n            changeFavorite()\n            // リンク遷移無効\n            // TODO: 別のやり方が良いかも\n            e.preventDefault()\n          }} size=\"small\">\n            {\n              favorite ? favoriteIcon : <FavoriteBorderIcon stroke={\"gray\"} strokeWidth={1}  />\n            }\n        </IconButton>\n      </Grid>\n    )\n  }\n\n  return <></>\n}\n\nexport default FavoriteComponent\n","import React from 'react';\nimport { Album, StatusEnum } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport { Grid } from '@material-ui/core';\nimport { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\nimport FavoriteComponent from '../../../components/favorite/FavoriteComponent';\n\nconst AlbumItemLayout = (\n  { album, width }:\n  { album: Album, width: number }\n) => {\n  // クエリパラメータ引き継ぎ\n  let history = useHistory()\n  const params = new URLSearchParams(history.location.search)\n  params.set(ParameterPrefixKeys.artist + ParameterKeys.ids, album.id)\n  // キーワード検索はいちいち検索されるので削除\n  params.delete(ParameterPrefixKeys.album + ParameterKeys.keyword)\n  params.delete(ParameterPrefixKeys.artist + ParameterKeys.keyword)\n  const status = params.get(ParameterPrefixKeys.album + ParameterKeys.status)\n  // すでにアーティストステータスが設定されていた場合はそちらを優先する\n  if(status !== null && !params.get(ParameterPrefixKeys.album + ParameterKeys.status)) {\n    params.set(ParameterPrefixKeys.album + ParameterKeys.status, status)\n  }\n\n  const style = {\n    width: \"15px\",\n    height: \"15px\",\n    borderRadius: \"50%\",\n    fontSize: \"10px\",\n    color: \"#fff\",\n    lineHeight: \"15px\",\n    textAlign: \"center\" as \"center\",\n    background: \"#000\",\n  }\n\n  const serviceIcons = []\n  if(album.appleMusicAlbum){\n    serviceIcons.push(<Grid key={1} item style={{...style, backgroundColor: \"#ff2f56\"}}>A</Grid>)\n  }\n  if(album.itunesAlbum){\n    serviceIcons.push(<Grid key={2} item style={{...style, backgroundColor: \"#0070c9\"}}>iT</Grid>)\n  }\n  if(album.spotifyAlbum){\n    serviceIcons.push(<Grid key={3} item style={{...style, backgroundColor: \"#1DB954\"}}>S</Grid>)\n  }\n\n  // ステータスをわかりやすいようにしておく\n  if(album.status === StatusEnum.Pending){\n    serviceIcons.push(<Grid key={10} item style={{...style, color: \"#000\", backgroundColor: \"#FFFF00\"}}>PN</Grid>)\n  } else if (album.status === StatusEnum.Ignore){\n    serviceIcons.push(<Grid key={11} item style={{...style, color: \"#000\",backgroundColor: \"#FF0000\"}}>IG</Grid>)\n  }\n\n  return (\n    <ImageCardComponent\n      title={album.name}\n      src={album.artworkM.url}\n      width={width}\n      linkUrl={`/albums/${album.id}?${params.toString()}`}\n      topComponent={<FavoriteComponent favorable_type=\"album\" favorable_id={album.id} contentWidth={width} />}\n      bottomComponent={<>{serviceIcons}</>}\n    />\n  )\n}\n\nexport default AlbumItemLayout\n","import React, { useState } from 'react';\nimport { Waypoint } from 'react-waypoint';\n\n// TODO: hasNext とかないのでページ遷移によって再度取得してしまう？\nconst PaginationComponent = (\n  { component, no, offset, limit, fetchMore }:\n  { component:JSX.Element, no:number, offset:number, limit:number, fetchMore:any }\n) => {\n  // 並び替えなどによる内部の component の変更を検知し再度ページネーションする\n  const [prevComponent, setPrevComponent] = useState(component)\n  const [alreadyFetch, setAlreadyFetch] = useState(false)\n  const fetchNo = offset - limit\n  const isFetch = no === fetchNo\n\n  const exeFetchMore = () => fetchMore({\n    variables: {\n      cursor: {\n        offset: offset\n      }\n    },\n    updateQuery: (\n      prev:{ items: any[] },\n      { fetchMoreResult }:{ fetchMoreResult:{ items: any[] } }\n    ) => {\n      if (!fetchMoreResult) return prev;\n      return { ...prev, ...{ items: [...prev.items, ...fetchMoreResult.items] } }\n    }\n  })\n\n  const enterFunction = () => {\n    if(alreadyFetch && prevComponent === component) return\n    setAlreadyFetch(true)\n    setPrevComponent(component)\n    return exeFetchMore()\n  }\n\n  return (\n    <>\n      { component }\n      { isFetch ? <Waypoint onEnter={enterFunction}/> : <></> }\n    </>\n  )\n}\n\nexport default PaginationComponent\n","import React from 'react'\nimport { FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\n\ninterface SelectItem {\n  value:string\n  label:string\n}\n\ninterface changeEvent {\n  (event: React.ChangeEvent<{\n    name?: string | undefined;\n    value: unknown;\n  }>, child: React.ReactNode): void\n}\n\nconst OrderComponent = ({\n  label, value, minWidth, selectItems, onChange\n}:{\n  label:string, value:string, minWidth:number, selectItems:SelectItem[], onChange:changeEvent\n}) => {\n\n  return (\n    <FormControl variant=\"outlined\" style={{ minWidth }}>\n      <InputLabel>{label}</InputLabel>\n      <Select\n        value={value}\n        onChange={onChange}\n        label={label}\n      >\n        {selectItems.map((item, i) => <MenuItem key={i} value={item.value}>{item.label}</MenuItem>)}\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default OrderComponent\n","import React from 'react';\nimport { Chip, MuiThemeProvider, createMuiTheme } from '@material-ui/core';\n\nconst ChipsComponent = ({\n  color, labels, onDelete\n}:{\n  color: \"blue\" | \"yellow\", labels:string[], onDelete:((label: string) => void)\n}) => {\n  let colorCode = \"\"\n  switch(color) {\n    case \"blue\":\n      colorCode = \"#4AC6D2\"\n      break\n    case \"yellow\":\n      colorCode = \"#F2D349\"\n      break\n  }\n\n  return (\n    <MuiThemeProvider theme={createMuiTheme({ palette: { primary: { main: colorCode } } })}>\n      { labels.map((label, index) =><Chip color=\"primary\" key={index} label={label} onDelete={() => onDelete(label)} />) }\n    </MuiThemeProvider>\n  )\n}\n\nexport default ChipsComponent\n","import React, { useState, useContext, useEffect } from 'react'\nimport { FormControl, IconButton, InputLabel, OutlinedInput, InputAdornment, MuiThemeProvider, createMuiTheme } from '@material-ui/core'\nimport useParameters, { ParameterPrefix, ParameterKeys, ParameterPrefixKeys } from '../../hooks/useParameters'\nimport { useHistory } from 'react-router-dom'\nimport SearchIcon from '@material-ui/icons/Search'\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { red } from '@material-ui/core/colors'\nimport UserContext from '../../hooks/userContext'\nimport ChipsComponent from '../chip/ChipsComponent'\nimport { ArtistsQueryVariables, AlbumsQueryVariables } from '../../graphql/types.d'\n\nconst SearchKeywordComponent = ({ type }:{ type:ParameterPrefix }) => {\n  let history = useHistory()\n  const { state } = useContext(UserContext)\n  const params = useParameters<ArtistsQueryVariables|AlbumsQueryVariables>(type)\n  const [canSearch, setCanSearch]   = useState<boolean>(false)\n  const [keyword, setKeyword]   = useState<string>(() => {\n    return params.conditions?.name ? params.conditions?.name : \"\"\n  })\n  const [onlyFavorite, setOnlyFavorite] = useState<boolean>(() => {\n    return params.conditions?.favorite ? true : false\n  })\n  const [usernames, setUsernames] = useState<string[]>(() => {\n    return params.conditions?.usernames ? params.conditions?.usernames : []\n  })\n\n  // 検索実行\n  useEffect(() => {\n    if(!canSearch) return\n\n    const params = new URLSearchParams(history.location.search)\n    if(keyword !== \"\") {\n      params.set(ParameterPrefixKeys[type] + ParameterKeys.keyword, keyword)\n    } else {\n      params.delete(ParameterPrefixKeys[type] + ParameterKeys.keyword)\n    }\n\n    // お気に入りのみ表示\n    if(onlyFavorite) {\n      params.set(ParameterPrefixKeys[type] + ParameterKeys.favorite, \"1\")\n    } else {\n      params.delete(ParameterPrefixKeys[type] + ParameterKeys.favorite)\n    }\n\n    // ユーザーお気に入り表示\n    if(usernames.length > 0) {\n      params.set(ParameterPrefixKeys[type] + ParameterKeys.username, usernames.join(\"-\"))\n    } else {\n      params.delete(ParameterPrefixKeys[type] + ParameterKeys.username)\n    }\n\n    history.push(`${history.location.pathname}?${params.toString()}`)\n\n    setCanSearch(false)\n  }, [canSearch, history, keyword, onlyFavorite, type, usernames])\n\n  // キーワードからユーザー名とハッシュタグを作成する\n  useEffect(() => {\n    // 最後の文字がスペース区切りの場合のみ作成\n    if(keyword.match(/\\s$/)) {\n      const keywords = keyword.split(/\\s/)\n      keywords.forEach((_keyword) => {\n        if(_keyword.startsWith(\"@\") && usernames.indexOf(_keyword) === -1) {\n          setUsernames(usernames.concat(_keyword.slice(1, _keyword.length)))\n          setKeyword(keyword.replace(_keyword, \"\").trim())\n          setCanSearch(true)\n        }\n      })\n    }\n  }, [keyword, usernames])\n\n  // ユーザーお気に入り検索\n  const onDelete = (label: string) => {\n    setUsernames(usernames.filter(name => name !== label))\n    setCanSearch(true)\n  }\n  let usernamesContent = <><ChipsComponent color=\"yellow\" labels={usernames} onDelete={onDelete} /></>\n\n  // お気に入りボタンクリック\n  const favoriteClickHandler = (_event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>): void => {\n    setOnlyFavorite(!onlyFavorite)\n    setCanSearch(true)\n  }\n\n  // 検索ボタンクリック\n  const clickHandler = (_event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>): void => {\n    setCanSearch(true)\n  }\n\n  // エンターでも検索可能にする\n  const keyPressHandler = (event: React.KeyboardEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    if(event.keyCode === 13){\n      setCanSearch(true)\n    }\n  }\n\n  let searchType = \"\"\n  switch(type) {\n    case 'artist':\n      searchType = \"アーティスト\"\n      break\n    case 'album':\n      searchType = \"アルバム\"\n      break\n    case 'track':\n      searchType = \"曲\"\n      break\n  }\n\n  let favoriteContent = <></>\n  if(state.user && state.user.role.allowedActions.includes(\"changeFavorites\")){\n    favoriteContent =\n      <IconButton\n        onClick={favoriteClickHandler}\n        edge=\"end\"\n      >\n        { onlyFavorite ?\n            <MuiThemeProvider theme={createMuiTheme({ palette: { primary: red } })}>\n              <FavoriteIcon color=\"primary\" stroke={\"white\"} strokeWidth={2} />\n            </MuiThemeProvider>\n          :\n            <FavoriteBorderIcon /> }\n      </IconButton>\n  }\n\n  return (\n    <FormControl variant=\"outlined\">\n      <InputLabel htmlFor=\"ord\">{ searchType + \"検索\" }</InputLabel>\n      <OutlinedInput\n        onChange={(e)=>{setKeyword(e.target.value as string)}}\n        onKeyDown={keyPressHandler}\n        // ユーザーとハッシュタグ\n        startAdornment={\n          usernamesContent\n        }\n        // お気に入りと検索ボタン\n        endAdornment={\n          <InputAdornment position=\"end\">\n            {favoriteContent}\n            <IconButton\n              onClick={clickHandler}\n              edge=\"end\"\n            >\n              <SearchIcon />\n            </IconButton>\n          </InputAdornment>\n        }\n        label={ searchType + \"検索\" }\n        value={keyword}\n      />\n    </FormControl>\n  )\n}\n\nexport default SearchKeywordComponent\n","import React, { useState } from 'react';\nimport { useAlbumsQuery, Album, AlbumsQueryVariables } from '../../../graphql/types.d';\nimport AlbumItemLayout from '../item/AlbumItemLayout';\nimport { Grid } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport useParameters, { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\nimport OrderComponent from '../../../components/search/OrderComponent';\nimport SearchKeywordComponent from '../../../components/search/SearchKeywordComponent';\n\nconst AlbumsLayout = () => {\n  const [order, setOrder] = useState<string>(\"RELEASE.DESC\")\n  const parameters = useParameters<AlbumsQueryVariables>(\"album\")\n  let history = useHistory()\n  const limit = 50\n  const fetchPolicy = parameters.conditions?.favorite ? \"cache-and-network\" : \"cache-first\"\n  const { error, data, fetchMore } = useAlbumsQuery(\n    {\n      variables: {\n        cursor: {\n          offset: 0,\n          limit: limit,\n        },\n        sort: parameters.sort,\n        conditions: parameters.conditions,\n      },\n      fetchPolicy,\n    }\n  )\n\n  // 並び順初期化\n  const _order = parameters?.sort ? `${parameters?.sort?.order}.${parameters?.sort?.type}` : null\n  if(_order && order !== _order){\n    setOrder(_order)\n  }\n\n  if (error) return <div>{error.message}</div>\n\n  let content:JSX.Element[] = []\n\n  if (data) {\n    content =\n      data.items.map(\n        (item, i) =>\n          <Grid item key={i}>\n            <PaginationComponent\n              component={<AlbumItemLayout album={item as Album} width={150} />}\n              no={i}\n              offset={data.items.length}\n              limit={limit}\n              fetchMore={fetchMore}\n            />\n          </Grid>\n      )\n  }\n\n  const handleChange = (event: React.ChangeEvent<{\n      name?: string | undefined\n      value: unknown\n  }>, _child: React.ReactNode) => {\n    const sort = event.target.value as string\n    const [order, sortType] = sort.split(\".\")\n    setOrder(sort)\n    const params = new URLSearchParams(history.location.search)\n    params.set(ParameterPrefixKeys.album + ParameterKeys.order, order)\n    params.set(ParameterPrefixKeys.album + ParameterKeys.sortType, sortType)\n    history.push(`${history.location.pathname}?${params.toString()}`)\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item>\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <SearchKeywordComponent type={\"album\"}/>\n          </Grid>\n          <Grid item>\n            <OrderComponent\n              label=\"アルバム表示順\"\n              value={order}\n              onChange={handleChange}\n              minWidth={150}\n              selectItems={[\n                { label: \"発売日新しい順\", value: \"RELEASE.DESC\" },\n                { label: \"発売日古い順\", value: \"RELEASE.ASC\" },\n                { label: \"追加日新しい順\", value: \"NEW.DESC\" },\n                { label: \"追加日古い順\", value: \"NEW.ASC\" },\n                { label: \"人気順\", value: \"POPULARITY.DESC\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-evenly\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          {content}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AlbumsLayout;\n","import React from 'react';\nimport { useScrollTrigger, AppBar, Toolbar, Typography, Slide, IconButton, Grid, Menu, MenuItem } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person'\nimport AlbumIcon from '@material-ui/icons/Album'\nimport InfoIcon from '@material-ui/icons/Info';\nimport { Link } from 'react-router-dom';\n\n// ref: https://material-ui.com/components/app-bar/#hide-app-bar\ninterface Props {\n  window?: () => Window;\n  children: React.ReactElement;\n}\n\nconst HideOnScroll = (props: Props) => {\n  const { children, window } = props;\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nconst Bar = () => {\n  // SEO対策\n  const resetTitle = (title:string) => () => {\n    document.title = `${title} - ゲーム音楽`\n    document.querySelector('meta[name=\"description\"]')?.setAttribute(\"content\", \"音楽サブスクリプション配信中のゲーム音楽のポータルサイト\")\n  }\n\n  const [anchorEl, setAnchorEl] = React.useState<Element|null>(null)\n\n  return <>\n    <HideOnScroll>\n      <AppBar>\n        <Toolbar>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n            spacing={3}\n          >\n            <Grid item>\n              <Typography variant=\"h6\">ゲーム音楽</Typography>\n            </Grid>\n            <Grid item>\n              <IconButton component={Link} onClick={resetTitle(\"アーティスト一覧\")} to={`/artists`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <PersonIcon />\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <IconButton component={Link} onClick={resetTitle(\"アルバム一覧\")} to={`/albums`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <AlbumIcon />\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <IconButton onClick={(event) => setAnchorEl(event.currentTarget)} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <InfoIcon />\n              </IconButton>\n              <Menu\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={() => setAnchorEl(null)}\n              >\n                <MenuItem component={Link} onClick={()=>{resetTitle(\"このサイトについて\");setAnchorEl(null)}} to={`/about`}>このサイトについて</MenuItem>\n                {/* <MenuItem onClick={() => setAnchorEl(null)}>利用規約</MenuItem>\n                <MenuItem onClick={() => setAnchorEl(null)}>プライバシーポリシー</MenuItem> */}\n              </Menu>\n            </Grid>\n            {/* <Grid item>\n              <IconButton component={Link} to={`/tracks`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <LibraryMusicIcon />\n              </IconButton>\n            </Grid> */}\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </HideOnScroll>\n  </>\n}\n\nexport default Bar\n","import { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { onError } from \"apollo-link-error\"\n\nconst httpLink = new HttpLink({ uri: process.env.REACT_APP_GRAPHQL_URI, credentials: 'include' })\nconst headersLink = new ApolloLink((operation, forward) => forward(operation))\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst link = ApolloLink.from([headersLink, errorLink, httpLink])\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache({ dataIdFromObject: object => object.id })\n})\n","import React from 'react';\nimport { Artist, StatusEnum } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport { ParameterKeys, ParameterPrefixKeys } from '../../../hooks/useParameters';\nimport { Grid } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport FavoriteComponent from '../../../components/favorite/FavoriteComponent';\n\nconst ArtistItemLayout = (\n  { artist, width }:\n  { artist: Artist, width: number }\n) => {\n  // クエリパラメータ引き継ぎ\n  let history = useHistory()\n  const params = new URLSearchParams(history.location.search)\n  params.set(ParameterPrefixKeys.album + ParameterKeys.ids, artist.id)\n  // キーワード検索はいちいち検索されるので削除\n  params.delete(ParameterPrefixKeys.album + ParameterKeys.keyword)\n  params.delete(ParameterPrefixKeys.artist + ParameterKeys.keyword)\n  const status = params.get(ParameterPrefixKeys.artist + ParameterKeys.status)\n  // すでにアルバムステータスが設定されていた場合はそちらを優先する\n  if(status !== null && !params.get(ParameterPrefixKeys.album + ParameterKeys.status)) {\n    params.set(ParameterPrefixKeys.album + ParameterKeys.status, status)\n  }\n\n  const style = {\n    width: \"15px\",\n    height: \"15px\",\n    borderRadius: \"50%\",\n    fontSize: \"10px\",\n    color: \"#fff\",\n    lineHeight: \"15px\",\n    textAlign: \"center\" as \"center\",\n    background: \"#000\",\n  }\n\n  // ステータスをわかりやすいようにしておく\n  const serviceIcons = []\n  if(artist.status === StatusEnum.Pending){\n    serviceIcons.push(<Grid key={10} item style={{...style, color: \"#000\", backgroundColor: \"#FFFF00\"}}>PN</Grid>)\n  } else if (artist.status === StatusEnum.Ignore){\n    serviceIcons.push(<Grid key={11} item style={{...style, color: \"#000\",backgroundColor: \"#FF0000\"}}>IG</Grid>)\n  }\n  const bottomComponent = <>{serviceIcons}</>\n\n  return (\n    <ImageCardComponent\n      title={artist.name}\n      src={artist.artworkM.url}\n      width={width}\n      linkUrl={`/artists/${artist.id}?${params.toString()}`}\n      topComponent={<FavoriteComponent favorable_type=\"artist\" favorable_id={artist.id} contentWidth={width} />}\n      bottomComponent={bottomComponent}\n    />\n  )\n}\n\nexport default ArtistItemLayout\n","import React, { useState } from 'react';\nimport { useArtistsQuery, ArtistsQueryVariables, Artist } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport ArtistItemLayout from '../item/ArtistItemLayout';\nimport useParameters, { ParameterPrefixKeys, ParameterKeys } from '../../../hooks/useParameters';\nimport { useHistory } from 'react-router-dom';\nimport OrderComponent from '../../../components/search/OrderComponent';\nimport SearchKeywordComponent from '../../../components/search/SearchKeywordComponent';\n\nconst ArtistsLayout = () => {\n  const [order, setOrder] = useState<string>(\"NAME.DESC\")\n  const parameters = useParameters<ArtistsQueryVariables>(\"artist\")\n  let history = useHistory()\n  const limit = 30\n  const fetchPolicy = parameters.conditions?.favorite ? \"cache-and-network\" : \"cache-first\"\n  const { error, data, fetchMore } = useArtistsQuery(\n    {\n      variables: {\n        cursor: {\n          offset: 0,\n          limit: limit,\n        },\n        sort: parameters.sort,\n        conditions: parameters.conditions,\n      },\n      fetchPolicy\n    }\n  )\n\n  // 並び順初期化\n  const _order = parameters?.sort ? `${parameters?.sort?.order}.${parameters?.sort?.type}` : null\n  if(_order && order !== _order){\n    setOrder(_order)\n  }\n\n  if (error) return <div>{error.message}</div>\n\n  let content:JSX.Element[] = []\n\n  if (data) {\n    content =\n      data.items.map(\n        (item, i) =>\n          <Grid item key={i}>\n            <PaginationComponent\n              component={<ArtistItemLayout artist={item as Artist} width={150} />}\n              no={i}\n              offset={data.items.length}\n              limit={limit}\n              fetchMore={fetchMore}\n            />\n          </Grid>\n      )\n  }\n\n  const orderChangeHandler = (event: React.ChangeEvent<{\n    name?: string | undefined\n    value: unknown\n  }>, _child: React.ReactNode) => {\n    const sort = event.target.value as string\n    const [order, sortType] = sort.split(\".\")\n    setOrder(sort)\n    const params = new URLSearchParams(history.location.search)\n    params.set(ParameterPrefixKeys.artist + ParameterKeys.order, order)\n    params.set(ParameterPrefixKeys.artist + ParameterKeys.sortType, sortType)\n    history.push(`${history.location.pathname}?${params.toString()}`)\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item >\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <SearchKeywordComponent type={\"artist\"}/>\n          </Grid>\n          <Grid item>\n            <OrderComponent\n              label=\"アーティスト表示順\"\n              value={order}\n              onChange={orderChangeHandler}\n              minWidth={150}\n              selectItems={[\n                { label: \"名前降順\", value: \"NAME.DESC\" },\n                { label: \"名前昇順\", value: \"NAME.ASC\" },\n                { label: \"追加日新しい順\", value: \"NEW.DESC\" },\n                { label: \"追加日古い順\", value: \"NEW.ASC\" },\n                { label: \"人気順\", value: \"POPULARITY.DESC\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-evenly\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          {content}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ArtistsLayout\n","import { Howl } from 'howler'\nimport { Track } from '../../graphql/types.d'\nimport { ActionType } from '../../hooks/playerContext'\nimport { isEmpty } from 'lodash'\n\nclass PreviewPlayer {\n  linkUrl: string\n  playlist: { [key:number]:Howl }\n  tracks: Track[]\n  currentPlaybackNo: number\n  dispatch?: React.Dispatch<ActionType>\n\n  constructor(\n    { linkUrl, tracks, dispatch }:\n    { linkUrl:string, tracks:Track[], dispatch?: React.Dispatch<ActionType> }\n  ){\n    this.linkUrl = linkUrl\n    this.currentPlaybackNo = 0\n    this.playlist = {}\n    tracks.forEach((track, index) => {\n      if(!track.previewUrl) return\n      const player:Howl = new Howl({\n        src: track.previewUrl,\n        html5: true,\n        preload: false,\n        autoplay: false,\n        onend: async () => this.autoNextPlay(),\n        onplay: () => {\n          // Media Session API\n          if(this.dispatch) this.setMediaMetadata(this.dispatch)\n          // フェードイン\n          if(player.volume() === 0) player.fade(0, 0.5, 2000)\n          // フェードアウト\n          // ref: https://stackoverflow.com/questions/56043259/how-to-make-a-fade-out-at-the-end-of-the-sound-in-howlerjs\n          var fadeouttime = 2000;\n          setTimeout(\n            () => player.fade(0.5, 0, fadeouttime),\n            (player.duration() - (player.seek() as number)) * 1000 - fadeouttime\n          )\n        },\n        onstop: () => player.volume(0),\n        volume: 0,\n      })\n      this.playlist[index] = player\n    })\n    this.tracks = tracks\n    this.dispatch = dispatch\n  }\n\n  setMediaMetadata(dispatch: React.Dispatch<ActionType>) {\n    if(navigator.mediaSession) {\n      const track = this.currentTrack()\n      if(track) {\n        navigator.mediaSession.metadata = new MediaMetadata({\n          title: track.name,\n          artwork: [{ src: track.artworkM.url || \"\", sizes: \"300x300\", type: 'image/png' }]\n        })\n      }\n      navigator.mediaSession.setActionHandler('play', () => dispatch({ type: \"PLAY\" }))\n      navigator.mediaSession.setActionHandler('pause', () => dispatch({ type: \"PAUSE\" }))\n      navigator.mediaSession.setActionHandler('nexttrack', () => dispatch({ type: \"NEXT_PLAY\" }))\n    }\n  }\n\n  currentTrack() {\n    if(isEmpty(this.playlist)) return\n    return this.tracks[this.currentPlaybackNo]\n  }\n\n  async play(no?:number) {\n    if(isEmpty(this.playlist)) return\n\n    if(no === undefined) {\n      const player = this.playlist[this.currentPlaybackNo]\n      // 再生可否による分岐\n      if(player){\n        await player.play()\n      } else {\n        // 再生不可の場合は次の曲を再生\n        await this.autoNextPlay()\n      }\n    } else {\n      this.stopAndPlay(this.currentPlaybackNo, no)\n      this.currentPlaybackNo = no\n    }\n  }\n\n  async autoNextPlay() {\n    this.dispatch && this.dispatch({ type: \"NEXT_PLAY\" })\n  }\n\n  async nextPlay():Promise<number> {\n    if(isEmpty(this.playlist)) return 0\n\n    const nextNo = this.currentPlaybackNo + 1\n    if((this.tracks.length - 1) < nextNo) {\n      // プレイリスト最後の曲\n      await this.playlist[this.currentPlaybackNo].stop()\n      this.currentPlaybackNo = 0\n      this.dispatch && this.dispatch({ type: \"STATUS_FINISH\" })\n      return this.currentPlaybackNo\n    } else {\n      const currentNo = this.currentPlaybackNo\n      this.currentPlaybackNo = nextNo\n      await this.stopAndPlay(currentNo, nextNo)\n      return this.currentPlaybackNo\n    }\n  }\n\n  async stopAndPlay(stopNo:number, playNo:number) {\n    await this.playlist[stopNo]?.stop()\n    const player = this.playlist[playNo]\n    // 再生可否による分岐\n    if(player){\n      await player.play()\n    } else {\n      // 再生不可の場合は次の曲を再生\n      await this.autoNextPlay()\n    }\n  }\n\n  async pause() {\n    if(isEmpty(this.playlist)) return\n\n    await this.playlist[this.currentPlaybackNo].pause()\n  }\n\n  async stop() {\n    if(isEmpty(this.playlist)) return\n\n    await this.playlist[this.currentPlaybackNo].stop()\n    this.currentPlaybackNo = 0\n  }\n}\n\nexport default PreviewPlayer\n","import React, { useContext } from 'react';\nimport { Grid, Button, MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport { red, green, blue } from '@material-ui/core/colors';\nimport { Album } from '../../graphql/types.d'\nimport PlayerContext from '../../hooks/playerContext';\n\nconst MusicServiceButtonComponent = ({ album }:{ album:Album|null }) => {\n  const { dispatch } = useContext(PlayerContext)\n  let contents:JSX.Element[] = []\n\n  if(album?.appleMusicAlbum){\n    contents.push(\n      <Grid item key={0}>\n        <MuiThemeProvider theme={createMuiTheme({ palette: { primary: red } })}>\n          <Button\n            href={`https://music.apple.com/jp/album/${album.appleMusicAlbum.appleMusicId}`}\n            target=\"_blank\"\n            variant=\"contained\" color=\"primary\"\n            onClick={() => dispatch({ type: \"PAUSE\" })}\n          >\n            Apple Music で聴く\n          </Button>\n        </MuiThemeProvider>\n      </Grid>\n    )\n  }\n\n  if(album?.itunesAlbum){\n    contents.push(\n      <Grid item key={1}>\n        <MuiThemeProvider theme={createMuiTheme({ palette: { primary: blue } })}>\n          <Button\n            href={`https://music.apple.com/jp/album/${album.itunesAlbum.appleMusicId}`}\n            target=\"_blank\"\n            variant=\"contained\" color=\"primary\"\n            onClick={() => dispatch({ type: \"PAUSE\" })}\n          >\n            iTunes で聴く\n          </Button>\n        </MuiThemeProvider>\n      </Grid>\n    )\n  }\n\n  if(album?.spotifyAlbum){\n    contents.push(\n      <Grid item key={2}>\n        <MuiThemeProvider theme={createMuiTheme({ palette: { primary: green } })}>\n          <Button\n            href={`https://open.spotify.com/album/${album.spotifyAlbum.spotifyId}`}\n            target=\"_blank\"\n            variant=\"contained\" color=\"primary\"\n            onClick={() => dispatch({ type: \"PAUSE\" })}\n          >\n            Spotify で聴く\n          </Button>\n        </MuiThemeProvider>\n      </Grid>\n    )\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {contents}\n    </Grid>\n  )\n}\n\nexport default MusicServiceButtonComponent\n","import React, { useContext } from 'react';\nimport { TableRow, TableCell, IconButton, makeStyles, Theme, SvgIconProps } from '@material-ui/core';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StarRateIcon from '@material-ui/icons/StarRate'\nimport AlbumIcon from '@material-ui/icons/Album'\nimport { Track } from '../../graphql/types.d'\nimport PlayerContext, { PlaybackStatus } from '../../hooks/playerContext';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  '@keyframes playing-icon-spin': {\n    from: { transform: 'rotate(0deg)' },\n    to: { transform: 'rotate(360deg)' },\n  },\n  playingIcon: {\n    height: 24,\n    width: 24,\n    animationName: '$playing-icon-spin',\n    animationDuration: '2000ms',\n    animationIterationCount: 'infinite',\n    animationTimingFunction: 'linear',\n  },\n}));\n\nconst PreviewPlayerItemComponent = (\n  { track, index, playAction, averagePopularity }:\n  { track:Track, index:number, playAction:(no:number) => void, averagePopularity:number }\n) => {\n  const classes = useStyles()\n  const { state } = useContext(PlayerContext)\n\n  const playable = track.previewUrl !== null\n  const playing = (state.playbackStatus === PlaybackStatus.Play)\n  const currentTrack =\n    (index === state.currentNo) &&\n    (track.id === state.player.currentTrack()?.id)\n\n  let currentTrackIcon = <AlbumIcon\n    color=\"primary\"\n    className={classes.playingIcon}\n    component={(svgProps: SvgIconProps) => {\n      return (\n        <svg {...svgProps}>\n          <defs>\n            <linearGradient id=\"gradient1\">\n              {\n                playing ?\n                <>\n                  <stop offset=\"20%\" stopColor={\"#4AC6D2\"} />\n                  <stop offset=\"80%\" stopColor={\"#F2D349\"} />\n                </>\n                :\n                <stop offset=\"100%\" stopColor={\"#4AC6D2\"} />\n              }\n            </linearGradient>\n          </defs>\n          {React.cloneElement(\n            (svgProps.children as React.ReactNodeArray)[0] as React.ReactElement,\n            {\n              fill: 'url(#gradient1)',\n            },\n          )}\n        </svg>\n      );\n    }}\n  />\n\n  // 人気度が平均以上のものは星にする\n  let starable = false\n  if(averagePopularity < track.popularity) starable = true\n\n  return (\n    <TableRow>\n      <TableCell align=\"center\">\n        {\n          currentTrack ?\n            <IconButton component=\"span\">\n              {currentTrackIcon}\n            </IconButton>\n          :\n            <IconButton onClick={() => playAction(index)} disabled={!playable} component=\"span\">\n              {starable ? <StarRateIcon /> : <PlayArrowIcon />}\n            </IconButton>\n        }\n      </TableCell>\n      <TableCell>{track.name}</TableCell>\n    </TableRow>\n  )\n}\n\nexport default PreviewPlayerItemComponent\n","import React from 'react';\nimport { Grid, IconButton } from '@material-ui/core';\nimport { Album } from '../../graphql/types.d'\nimport ShareIcon from '@material-ui/icons/Share';\nimport TwitterIcon from '@material-ui/icons/Twitter'\nimport FacebookIcon from '@material-ui/icons/Facebook'\n\nconst ShareButtonComponent = ({ album }:{ album:Album }) => {\n  const url = `https://video-game-music.net/albums/${album.id}?ai=${album.id}`\n  // TODO: 他のSNSでも汎用的に使えるようにリファクタしろよな\n  let twitterUrl = `https://twitter.com/intent/tweet`\n  twitterUrl += `?text=${album.name} - ゲーム音楽`\n  twitterUrl += `&url=${url}`\n\n  let facebookUrl = `https://www.facebook.com/sharer/sharer.php`\n  facebookUrl += `?u=${encodeURIComponent(url)}`\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2}>\n      <Grid item>\n        {/* サイズ統一するため無駄だけど無効ボタンにしておく */}\n        <IconButton size=\"small\" disabled>\n          <ShareIcon/>\n        </IconButton>\n      </Grid>\n      <Grid item>\n        {/* ref: https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/overview */}\n        <IconButton\n          size=\"small\"\n          href={twitterUrl}\n          target=\"_blank\"\n        >\n          <TwitterIcon  />\n        </IconButton>\n      </Grid>\n      <Grid item>\n        {/* ref: https://developers.facebook.com/docs/plugins/share-button?locale=ja_JP#configurator */}\n        <IconButton\n          size=\"small\"\n          href={facebookUrl}\n          target=\"_blank\"\n        >\n          <FacebookIcon  />\n        </IconButton>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ShareButtonComponent\n","import React, { useContext, useRef, useEffect, useState } from 'react';\nimport { TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody, Grid, Tooltip, ClickAwayListener, IconButton, Typography } from '@material-ui/core';\nimport ImageCardComponent from '../imageCard/ImageCardComponent';\nimport PreviewPlayer from './PreviewPlayer';\nimport MusicServiceButtonComponent from './MusicServiceButtonComponent';\nimport { Album } from '../../graphql/types.d'\nimport PlayerContext from '../../hooks/playerContext';\nimport { useLocation } from 'react-router-dom';\nimport PreviewPlayerItemComponent from './PreviewPlayerItemComponent';\nimport InfoIcon from '@material-ui/icons/Info';\nimport _ from 'lodash';\nimport ShareButtonComponent from './ShareButtonComponent';\nimport FavoriteComponent from '../favorite/FavoriteComponent';\n\nconst PreviewPlayerComponent = ({ album }:{ album:Album }) => {\n  const { dispatch } = useContext(PlayerContext)\n  const location = useLocation()\n  const [openInfo, setOpenInfo] = useState(false)\n\n  const timeConversion = (ms:number) => {\n    const seconds = parseInt((ms / 1000).toFixed(0))\n    const minutes = parseInt((ms / (1000 * 60)).toFixed(0))\n    const hours = parseInt((ms / (1000 * 60 * 60)).toFixed(0))\n    const days = parseInt((ms / (1000 * 60 * 60 * 24)).toFixed(0))\n\n    if (seconds < 60) {\n        return seconds + \"秒\";\n    } else if (minutes < 60) {\n        return minutes + \"分\";\n    } else if (hours < 24) {\n        return hours + \"時間\";\n    } else {\n        return days + \"日\"\n    }\n  }\n\n  // アルバム情報\n  const reducer = (accumulator:number, currentValue:number) => accumulator + currentValue\n  const ms = album.tracks.map(track => track.durationMs).reduce(reducer)\n  const releaseDate = (new Date(album.releaseDate)).toLocaleDateString(\"jp\", { year: 'numeric', month: 'long', day: 'numeric' })\n\n  // SEO対策\n  useEffect(() => {\n    let description = `「${album.name}」の発売日は${releaseDate}です。収録曲数は${album.totalTracks}曲あり、全曲再生時間は約${timeConversion(ms)}です。`\n    description += `収録曲は、${album.tracks.map((track)=>track.name).join(', ')}です。`\n    document.querySelector('meta[name=\"description\"]')?.setAttribute(\"content\", description)\n\n    return () => document.querySelector('meta[name=\"description\"]')?.setAttribute(\"content\", \"音楽サブスクリプション配信中のゲーム音楽のポータルサイト\")\n  }, [album, ms, releaseDate])\n\n  // プレビュー画面表示時に初期化される\n  const initPlayer = useRef<boolean>(true);\n  const playAction = (no:number) => {\n    if(initPlayer.current) {\n      const _player = new PreviewPlayer({\n        linkUrl: `${location.pathname}${location.search}`,\n        tracks: album.tracks,\n        dispatch\n      })\n\n      dispatch({ type: \"SET_PLAYER\", player: _player })\n      initPlayer.current = false\n    }\n    console.log(\"dispatch PLAY\")\n    dispatch({ type: \"PLAY\", no })\n  }\n\n  // 人気度平均\n  const averagePopularity = _.meanBy(album.tracks, (t) => t.popularity)\n\n  // 視聴音楽出典元\n  // TODO: デザインとか雑なのであとでしっかり実装すること\n  let previewUrlFromService = \"\"\n  if(album.appleMusicAlbum) {\n    previewUrlFromService = \"Apple Music\"\n  } else if(album.itunesAlbum) {\n    previewUrlFromService = \"iTunes\"\n  } else if(album.spotifyAlbum) {\n    previewUrlFromService = \"Spotify\"\n  }\n\n  return (\n    <TableContainer component={Paper} style={{ maxWidth: \"600px\" }}>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              <Grid\n                container\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <ImageCardComponent title={\"\"} src={album.artworkL.url} width={250}\n                  topComponent={<FavoriteComponent favorable_type=\"album\" favorable_id={album.id} contentWidth={250} />}\n                />\n              </Grid>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              { album.name }\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n             <Typography color=\"textSecondary\" variant=\"caption\">\n               { album.copyright }\n             </Typography>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              { `${releaseDate}発売、${album.totalTracks}曲、${timeConversion(ms)}` }\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2} style={{ border: 'none' }}>\n              <ShareButtonComponent album={album} />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={2}>\n              <MusicServiceButtonComponent album={album} />\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell style={{ width: 100 }} align=\"center\">\n              試聴\n              <ClickAwayListener onClickAway={()=>setOpenInfo(false)}>\n                <Tooltip\n                  PopperProps={{\n                    disablePortal: true,\n                  }}\n                  onClose={()=>setOpenInfo(false)}\n                  open={openInfo}\n                  disableFocusListener\n                  disableHoverListener\n                  disableTouchListener\n                  placement=\"top-end\"\n                  title={ previewUrlFromService + \" のプレビューURLによるストリーミング試聴\" }\n                >\n                  <IconButton size=\"small\" onClick={()=>setOpenInfo(true)}>\n                    <InfoIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              </ClickAwayListener>\n            </TableCell>\n            <TableCell>タイトル</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {album.tracks.map((track, i) => {\n            return <PreviewPlayerItemComponent\n              key={i}\n              track={track}\n              index={i}\n              playAction={playAction}\n              averagePopularity={averagePopularity}\n            />\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default PreviewPlayerComponent\n","import React, { useEffect } from 'react';\nimport { useAlbumQuery, Album } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport ArtistsLayout from '../../artist/list/ArtistsLayout';\nimport PreviewPlayerComponent from '../../../components/player/PreviewPlayerComponent';\nimport ReactGA from 'react-ga';\n\n// TODO: このファイル汚すぎるのでリファクタすること\nconst AlbumInfoLayout = () => {\n  const { id } = useParams()\n  const { loading, error, data } = useAlbumQuery({ variables: { id: id } })\n\n  // SEO対策\n  // 説明は PreviewPlayerComponent で追記している\n  useEffect(() => {\n    if (data && data.album) {\n      const titles = document.title.split(\"-\")\n      document.title = `${data.album.name} - ${titles[titles.length - 1].trim()}`\n\n      // トラッキング\n      ReactGA.pageview(window.location.pathname + window.location.search);\n      console.log(window.location.pathname + window.location.search)\n    }\n\n    return () => { document.title = \"ゲーム音楽\" }\n  }, [data])\n\n  if (error) return <div>{error.message}</div>\n\n  let content = <></>\n\n  if(!loading && data && data.album) {\n    const album_content = <PreviewPlayerComponent album={data.album as Album} />\n\n    content =\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n        >\n          <Grid item>\n            {album_content}\n          </Grid>\n          <Grid item>\n            <ArtistsLayout />\n          </Grid>\n      </Grid>\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item>\n        {content}\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default AlbumInfoLayout\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Artist, ArtistDocument } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport AlbumsLayout from '../../album/list/AlbumsLayout';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport ReactGA from 'react-ga';\nimport FavoriteComponent from '../../../components/favorite/FavoriteComponent';\n\nconst ArtistInfoLayout = () => {\n  const { id } = useParams()\n  const { error, data } =\n    useQuery<{ artist: Artist | null }>(ArtistDocument,{ variables: { id: id } })\n\n  // SEO対策\n  useEffect(() => {\n    if (data && data.artist) {\n      const titles = document.title.split(\"-\")\n      document.title = `${data.artist.name} - ${titles[titles.length - 1].trim()}`\n      const description = `${data.artist.name}さんのゲーム音楽アルバム一覧です。`\n      document.querySelector('meta[name=\"description\"]')?.setAttribute(\"content\", description)\n\n      // トラッキング\n      ReactGA.pageview(window.location.pathname + window.location.search)\n      console.log(window.location.pathname + window.location.search)\n    }\n\n    return () => {\n      document.title = \"ゲーム音楽\"\n      document.querySelector('meta[name=\"description\"]')?.setAttribute(\"content\", \"音楽サブスクリプション配信中のゲーム音楽のポータルサイト\")\n    }\n  }, [data])\n\n  if (error) return <div>{error.message}</div>\n\n  let content = <></>\n\n  if (data && data.artist) {\n    content =\n      <ImageCardComponent\n        title={data.artist.name}\n        src={data.artist.artworkL.url}\n        width={270}\n        topComponent={<FavoriteComponent favorable_type=\"artist\" favorable_id={data.artist.id} contentWidth={270} />}\n      />\n  }\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {content}\n      <Grid item>\n        <AlbumsLayout />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ArtistInfoLayout\n","import React, { useState } from 'react';\nimport { Grid, FormControl, InputLabel, Input, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert'\nimport { useSigninMutation, SigninPayload } from '../../../graphql/types.d';\n\nconst UserSigninLayout = () => {\n  const [notification, setNotification] = useState(<></>)\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n\n  interface SigninResponse {\n    data: { signin: SigninPayload }\n  }\n  const [signin] = useSigninMutation({\n    update: (_, response:SigninResponse) => {\n      if (response.data.signin.error) {\n        setNotification(<Alert severity=\"error\">{response.data.signin.error}</Alert>)\n      } else {\n        setNotification(<Alert severity=\"success\">ログインしました</Alert>)\n      }\n    },\n    variables: { input: { username, password } },\n  })\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <form autoComplete=\"off\">\n        <div>\n          <FormControl>\n            <InputLabel>ユーザー名</InputLabel>\n            <Input value={username} onChange={e => setUsername(e.target.value || \"\")}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>パスワード</InputLabel>\n            <Input value={password} onChange={e => setPassword(e.target.value || \"\")} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <Button type=\"submit\" onClick={(e) =>{e.preventDefault(); signin()}} variant=\"contained\">Signin</Button>\n        </div>\n        <div>{notification}</div>\n      </form>\n    </Grid>\n  )\n}\n\nexport default UserSigninLayout\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Grid, FormControl, InputLabel, Input, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert'\nimport { useMeQuery, useUpdateMeMutation, UpdateMePayload, UpdateMeInput } from '../../../graphql/types.d';\nimport UserContext from '../../../hooks/userContext';\n\nconst UserMeLayout = () => {\n  const [setup, setSetup] = useState(true)\n  const [notification, setNotification] = useState(<></>)\n  const [name, setName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [oldPassword, setOldPassword] = useState(\"\")\n  const [newPassword, setNewPassword] = useState(\"\")\n  const [input, setInput] = useState<UpdateMeInput>({ oldPassword })\n  const { state, dispatch } = useContext(UserContext)\n\n  // カレントユーザーデフォルト値\n  useEffect(() => {\n    if(state.user && setup){\n      setSetup(false)\n      setName(state.user.name)\n      setUsername(state.user.username)\n\n      // 詳細情報はログに出しておく\n      if(state.user){\n        console.log({ id: state.user.id })\n        console.log({ role: state.user.role.allowedActions })\n      }\n    }\n  }, [state, setup])\n\n  // カレントユーザー更新\n  interface UpdateMeResponse {\n    data: { updateMe: UpdateMePayload }\n  }\n  const [updateMe] = useUpdateMeMutation({\n    update: (_, response:UpdateMeResponse) => {\n      if (response.data.updateMe.error) {\n        setNotification(<Alert severity=\"error\">{response.data.updateMe.error}</Alert>)\n      } else {\n        setNotification(<Alert severity=\"success\">更新しました</Alert>)\n      }\n    },\n    variables: { input },\n  })\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <form autoComplete=\"off\">\n        <div>\n          <FormControl>\n            <InputLabel>名前</InputLabel>\n            <Input value={name} onChange={e => {\n              setName(e.target.value || \"\")\n              setInput({ ...input, name: (e.target.value || \"\") })\n            }}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>ユーザー名</InputLabel>\n            <Input value={username} onChange={e => {\n              setUsername(e.target.value || \"\")\n              setInput({ ...input, username: (e.target.value || \"\") })\n            }}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>新しいパスワード</InputLabel>\n            <Input value={newPassword} onChange={e => {\n              setNewPassword(e.target.value || \"\")\n              setInput({ ...input, newPassword: (e.target.value || \"\") })\n            }} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <FormControl required={true}>\n            <InputLabel>古いパスワード</InputLabel>\n            <Input value={oldPassword} onChange={e => {\n              setOldPassword(e.target.value || \"\")\n              setInput({ ...input, oldPassword: (e.target.value || \"\") })\n            }} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <Button type=\"submit\" onClick={(e) =>{e.preventDefault(); updateMe()}} variant=\"contained\">Update</Button>\n        </div>\n        <div>{notification}</div>\n      </form>\n    </Grid>\n  )\n}\n\nexport default UserMeLayout\n","import React, { useContext } from 'react';\nimport { Grid, IconButton, makeStyles, Theme, Typography } from '@material-ui/core';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport PauseIcon from '@material-ui/icons/Pause'\nimport AutorenewIcon from '@material-ui/icons/Autorenew'\nimport PlayerContext, { PlaybackStatus, LoadingStatus } from '../../hooks/playerContext';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport ImageCardComponent from '../../components/imageCard/ImageCardComponent';\n\nconst useStyles = makeStyles((_theme: Theme) => ({\n  '@keyframes loading-icon-spin': {\n    from: { transform: 'rotate(0deg)' },\n    to: { transform: 'rotate(360deg)' },\n  },\n  loadingIcon: {\n    height: 35,\n    width: 35,\n    animationName: '$loading-icon-spin',\n    animationDuration: '2000ms',\n    animationIterationCount: 'infinite',\n    animationTimingFunction: 'linear',\n  }\n}))\n\nconst PreviewPlayerLayout = () => {\n  const { state, dispatch } = useContext(PlayerContext)\n  const classes = useStyles()\n\n  let playbackButton = <></>\n  let skipButton =\n    <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"NEXT_PLAY\" })}>\n      <SkipNextIcon fontSize=\"large\" />\n    </IconButton>\n\n  if(state.loadingStatus === LoadingStatus.Loading) {\n    // TODO: 今の所ローディング表示はしていないのでいらないかも、要確認\n    playbackButton =\n      <IconButton aria-label=\"loading\" disabled={true}>\n        <AutorenewIcon className={classes.loadingIcon} />\n      </IconButton>\n    skipButton = playbackButton\n  } else {\n    switch(state.playbackStatus) {\n      case PlaybackStatus.None:\n        playbackButton =\n          <IconButton color=\"inherit\" disabled={true}>\n            <PlayArrowIcon fontSize=\"large\" />\n          </IconButton>\n        skipButton =\n          <IconButton color=\"inherit\" disabled={true}>\n            <SkipNextIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n      case PlaybackStatus.Play:\n        playbackButton =\n          <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"PAUSE\" })}>\n            <PauseIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n      case PlaybackStatus.Pause:\n        playbackButton =\n          <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"PLAY\" })}>\n            <PlayArrowIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n      case PlaybackStatus.Stop:\n        playbackButton =\n          <IconButton color=\"inherit\" onClick={() => dispatch({ type: \"PLAY\", no: 0 })}>\n            <PlayArrowIcon fontSize=\"large\" />\n          </IconButton>\n        break;\n    }\n  }\n\n  let artwork_content = <></>\n  let title_content = <></>\n  if(state.player.tracks[state.currentNo]){\n    const track = state.player.tracks[state.currentNo]\n    if(track.artworkM?.url) {\n      artwork_content =\n        <ImageCardComponent linkUrl={`${state.player.linkUrl}#${track.id}`} title={\"\"} src={track.artworkM.url} width={40} />\n    }\n    title_content =\n      <Typography style={{\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\"\n      }} variant=\"caption\" component=\"p\">{track.name}</Typography>\n  }\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"center\"\n    >\n      <Grid item xs={5}>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={1}></Grid>\n          <Grid item xs={3}>\n            {artwork_content}\n          </Grid>\n          <Grid item xs={1}></Grid>\n          <Grid item xs={7}>\n            {title_content}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={2}>\n        <Grid\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            {playbackButton}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={2}>\n        <Grid\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            {skipButton}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={2}></Grid>\n      <Grid item xs={1}>{/* ダミー */}</Grid>\n    </Grid>\n  )\n}\n\nexport default PreviewPlayerLayout\n","import React from 'react';\nimport { AppBar } from '@material-ui/core';\nimport PreviewPlayerLayout from '../player/PreviewPlayerLayout';\n\n// ref: https://material-ui.com/components/app-bar/#elevate-app-bar\nconst PlayerBar = () =>\n  <AppBar position=\"fixed\" color=\"secondary\" style={{ top: 'auto', bottom: 0 }}>\n    <PreviewPlayerLayout />\n  </AppBar>\n\nexport default PlayerBar\n","import React, { useEffect } from 'react';\nimport { Card, Typography, CardContent, IconButton } from '@material-ui/core';\nimport TwitterIcon from '@material-ui/icons/Twitter'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport ReactGA from 'react-ga'\n\nconst AboutLayout = () => {\n\n  // トラッキング\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname + window.location.search);\n    console.log(window.location.pathname + window.location.search)\n  }, [])\n\n  return <Card>\n    <CardContent>\n      <Typography variant=\"h5\" component=\"h1\">\n        このサイトについて\n      </Typography>\n      <Typography variant=\"h6\" component=\"h2\">\n        概要\n      </Typography>\n      <Typography color=\"textSecondary\">\n        音楽サブスクリプション配信中のゲーム音楽を検索できるサイトです。\n        今のところ検索機能しかありません。今後お気に入り機能、プレイリスト作成公開機能などを追加する予定です。\n        非商用で公開しています。\n      </Typography>\n      <Typography variant=\"h6\" component=\"h2\">\n        目的\n      </Typography>\n      <Typography color=\"textSecondary\">\n        私が新しいゲーム音楽に出会うために公開しています。\n        今後、お気に入り機能やプレイリスト機能などの実装により、ユーザー同士でゲーム音楽を共有できるといいですね。\n      </Typography>\n      <Typography variant=\"h6\" component=\"h2\">\n        SNSと開発プロジェクト\n      </Typography>\n      <IconButton onClick={() => window.open('https://twitter.com/vgm_net')} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n        <TwitterIcon />\n      </IconButton>\n      <IconButton onClick={() => window.open('https://github.com/users/himanushi/projects/2')} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n        <GitHubIcon />\n      </IconButton>\n    </CardContent>\n  </Card>\n}\n\nexport default AboutLayout\n","import React, { useContext, useEffect } from 'react';\nimport { useMeQuery, CurrentUser } from '../../graphql/types.d';\nimport UserContext from '../../hooks/userContext';\n\n// ユーザーを初期化するだけの component\nconst InitializeUser = () => {\n  const { data } = useMeQuery()\n  const { state, dispatch } = useContext(UserContext)\n\n  useEffect(() => {\n    if(state.user === null && data && data.me) {\n      dispatch({ type: \"SET_USER\", user: data.me as CurrentUser })\n    }\n  }, [data, state.user, dispatch])\n\n  return <></>\n}\n\nexport default InitializeUser\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\"\nimport AlbumsLayout from '../album/list/AlbumsLayout';\nimport Bar from './Bar';\nimport { ApolloProvider } from '@apollo/react-hoc';\nimport client from './client';\nimport AlbumInfoLayout from '../album/info/AlbumInfoLayout';\nimport ArtistsLayout from '../artist/list/ArtistsLayout';\nimport ArtistInfoLayout from '../artist/info/ArtistInfoLayout';\nimport UserSigninLayout from '../user/signin/UserSigninLayout';\nimport UserMeLayout from '../user/me/UserMeLayout';\nimport { Grid, Container, Toolbar } from '@material-ui/core';\nimport { PlayerProvider } from '../../hooks/playerContext';\nimport PlayerBar from './PlayerBar';\nimport AboutLayout from '../information/AbputLayout';\nimport { UserProvider } from '../../hooks/userContext';\nimport InitializeUser from './InitializeUser';\n\nconst RootLayout = () =>\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <UserProvider >\n        <PlayerProvider >\n          <InitializeUser />\n          {/* アプリバー */}\n          <Bar />\n          {/* プレイヤー */}\n          <PlayerBar />\n          <Container style={{ flexGrow: 1 }}>\n            <Grid\n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n              spacing={2}\n            >\n              <Grid item>\n                {/* \bアプリバーダミー */}\n                <Toolbar />\n              </Grid>\n              <Grid item>\n                <Switch>\n                  <Route exact path=\"/\" component={AlbumsLayout} />\n                  <Route exact path=\"/artists\" component={ArtistsLayout} />\n                  <Route exact path=\"/artists/:id\" component={ArtistInfoLayout} />\n                  <Route exact path=\"/albums\" component={AlbumsLayout} />\n                  <Route exact path=\"/albums/:id\" component={AlbumInfoLayout} />\n                  {/* <Route exact path=\"/tracks\" component={TracksLayout} /> */}\n                  <Route exact path=\"/signin\" component={UserSigninLayout} />\n                  <Route exact path=\"/me\" component={UserMeLayout} />\n                  <Route exact path=\"/about\" component={AboutLayout} />\n                </Switch>\n              </Grid>\n              <Grid item>\n                {/* プレイヤー\bダミー */}\n                <Toolbar />\n              </Grid>\n            </Grid>\n          </Container>\n        </PlayerProvider>\n      </UserProvider>\n    </ApolloProvider>\n  </BrowserRouter>\n\nexport default RootLayout\n","import React from 'react';\nimport { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport Root from './Root';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: '#222222',\n    },\n    secondary: {\n      main: '#4AC6D2',\n    },\n  },\n  typography: {\n    fontFamily: [\n      '\"Noto Sans JP\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n})\n\nconst RootStyleLayout = () =>\n  <ThemeProvider theme={theme}>\n    {/* リセットCSS */}\n    <CssBaseline />\n    {/* フォント */}\n    <link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+JP\" rel=\"stylesheet\" />\n    <Root />\n  </ThemeProvider>\n\nexport default RootStyleLayout\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect } from 'react';\nimport RootStyleLayout from './RootStyle';\nimport { register, unregister } from './serviceWorker'\nimport ReactGA from 'react-ga';\n\nconst App = () => {\n  // トラッキング\n  useEffect(() => {\n    if(process.env.REACT_APP_GA_ID) {\n      ReactGA.initialize(process.env.REACT_APP_GA_ID)\n      ReactGA.pageview(window.location.pathname + window.location.search)\n      console.log(window.location.pathname + window.location.search)\n    }\n  }, [])\n\n  return <RootStyleLayout />\n}\n\nexport default App\n\n// SPA, PWA 対応\n// ref: https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\nconst isMobile = () => {\n  const toMatch = [\n      /Android/i,\n      /webOS/i,\n      /iPhone/i,\n      /iPad/i,\n      /iPod/i,\n      /BlackBerry/i,\n      /Windows Phone/i\n  ]\n  return toMatch.some((toMatchItem) => {\n      return navigator.userAgent.match(toMatchItem);\n  })\n}\n\nif (isMobile()) {\n  register()\n} else {\n  unregister()\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './layouts/app/App';\n\nReactDOM.render(<App />, document.querySelector('#app'));\n"],"sourceRoot":""}