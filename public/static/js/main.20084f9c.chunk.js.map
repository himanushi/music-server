{"version":3,"sources":["graphql/types.d.tsx","components/image/ImageComponent.tsx","components/imageCard/ImageCardComponent.tsx","layouts/album/item/AlbumItemLayout.tsx","components/pagination/paginationComponent.tsx","hooks/useConditions.ts","layouts/album/list/AlbumsLayout.tsx","layouts/app/Bar.tsx","layouts/app/client.ts","layouts/artist/item/ArtistItemLayout.tsx","layouts/artist/list/ArtistsLayout.tsx","layouts/album/info/AlbumInfoLayout.tsx","layouts/artist/info/ArtistInfoLayout.tsx","layouts/user/signin/UserSigninLayout.tsx","layouts/user/me/UserMeLayout.tsx","layouts/app/Root.tsx","layouts/app/RootStyle.tsx","layouts/app/serviceWorker.ts","layouts/app/App.tsx","index.tsx"],"names":["AlbumsQueryOrder","ArtistsQueryOrder","StatusEnum","AlbumDocument","gql","AlbumsDocument","ArtistDocument","ArtistsDocument","MeDocument","UpdateMeDocument","SigninDocument","ImageComponent","className","src","title","width","process","CardMedia","image","style","height","ImageCardComponent","link","linkUrl","component","Link","to","React","createElement","Grid","container","item","xs","direction","justify","alignItems","children","Card","position","CardActionArea","left","bottom","componentInImage","AlbumItemLayout","album","borderRadius","fontSize","color","lineHeight","textAlign","background","serviceIcons","appleMusicAlbum","push","key","backgroundColor","itunesAlbum","spotifyAlbum","name","artworkM","url","id","PaginationComponent","no","offset","limit","fetchMore","useState","alreadyFetch","setAlreadyFetch","isFetch","onEnter","variables","updateQuery","prev","fetchMoreResult","items","useConditions","location","useLocation","params","URLSearchParams","search","getUniqueValues","value","get","values","split","uniqueValues","Set","forEach","add","Array","from","conditions","condition_id","test","_","merge","artists","albums","tracks","status","AlbumsLayout","baseOptions","order","Release","asc","fetchPolicy","ApolloReactHooks","error","data","message","albums_content","map","i","length","spacing","HideOnScroll","props","window","trigger","useScrollTrigger","target","undefined","Slide","appear","in","Bar","AppBar","Toolbar","Typography","variant","IconButton","edge","size","aria-label","margin","httpLink","HttpLink","uri","credentials","headersLink","ApolloLink","operation","forward","errorLink","onError","graphQLErrors","networkError","locations","path","console","log","ApolloClient","cache","InMemoryCache","dataIdFromObject","object","ArtistItemLayout","artist","ArtistsLayout","useQuery","content","AlbumInfoLayout","useParams","loading","album_content","preview_content","allow","frameBorder","overflow","appleMusicId","spotifyId","allowTransparency","padding","ArtistInfoLayout","artworkL","UserSigninLayout","notification","setNotification","username","setUsername","password","setPassword","update","response","signin","Alert","severity","input","autoComplete","FormControl","InputLabel","Input","onChange","e","type","Button","onClick","preventDefault","UserMeLayout","setName","oldPassword","setOldPassword","newPassword","setNewPassword","setInput","me","role","allowedActions","action","useUpdateMeMutation","updateMe","required","RootStyleLayout","client","exact","theme","createMuiTheme","palette","typography","fontFamily","join","ThemeProvider","CssBaseline","href","rel","Root","Boolean","hostname","match","App","RootStyle","navigator","serviceWorker","ready","then","registration","unregister","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.20084f9c.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** 正の整数 */\n  PositiveNumber: any;\n  /** Table id, hex Timestamp, ID */\n  TTID: any;\n};\n\n/** アルバム */\nexport type Album = {\n   __typename?: 'Album';\n  /** Apple Music アルバム */\n  appleMusicAlbum?: Maybe<AppleMusicAlbum>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** iTunes アルバム */\n  itunesAlbum?: Maybe<AppleMusicAlbum>;\n  /** タイトル */\n  name: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アルバム */\n  spotifyAlbum?: Maybe<SpotifyAlbum>;\n  /** ステータス */\n  status: StatusEnum;\n  /** トラック数 */\n  totalTracks: Scalars['PositiveNumber'];\n  /** トラック */\n  tracks?: Maybe<Array<Track>>;\n};\n\nexport type AlbumsConditions = {\n  /** アーティストID */\n  artists?: Maybe<IdInputObject>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n};\n\nexport enum AlbumsQueryOrder {\n  /** 名前順 */\n  Name = 'NAME',\n  /** 新しい順 */\n  New = 'NEW',\n  /** 発売日順 */\n  Release = 'RELEASE',\n  /** 人気順 */\n  Popularity = 'POPULARITY',\n  /** トラック数順 */\n  TotalTracks = 'TOTAL_TRACKS'\n}\n\n/** Apple Music アルバム */\nexport type AppleMusicAlbum = {\n   __typename?: 'AppleMusicAlbum';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n};\n\n/** Apple Music アーティスト */\nexport type AppleMusicArtist = {\n   __typename?: 'AppleMusicArtist';\n  /** Apple Music ID */\n  appleMusicId: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** アーティスト */\nexport type Artist = {\n   __typename?: 'Artist';\n  /** 関連アルバム */\n  albums?: Maybe<Array<Album>>;\n  /** Apple Music アーティスト */\n  appleMusicArtists?: Maybe<Array<AppleMusicArtist>>;\n  /** 大型アートワーク */\n  artworkL: Artwork;\n  /** 中型アートワーク */\n  artworkM: Artwork;\n  /** 追加日 */\n  createdAt: Scalars['ISO8601DateTime'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** 発売日 */\n  releaseDate: Scalars['ISO8601DateTime'];\n  /** Spotify アーティスト */\n  spotifyArtists?: Maybe<Array<SpotifyArtist>>;\n  /** ステータス */\n  status: StatusEnum;\n  /** 関連曲 */\n  tracks?: Maybe<Array<Track>>;\n};\n\nexport type ArtistsConditions = {\n  /** アルバムID */\n  albums?: Maybe<IdInputObject>;\n  /** 表示ステータス */\n  status?: Maybe<Array<StatusEnum>>;\n};\n\nexport enum ArtistsQueryOrder {\n  /** 新しい順 */\n  New = 'NEW',\n  /** 人気順 */\n  Popularity = 'POPULARITY'\n}\n\n/** アートワーク */\nexport type Artwork = {\n   __typename?: 'Artwork';\n  /** 高さ */\n  height?: Maybe<Scalars['PositiveNumber']>;\n  /** URL */\n  url?: Maybe<Scalars['String']>;\n  /** 幅 */\n  width?: Maybe<Scalars['PositiveNumber']>;\n};\n\n/** Autogenerated input type of ChangeStatus */\nexport type ChangeStatusInput = {\n  /** 変更したいオブジェクトID */\n  id: Scalars['TTID'];\n  /** 変更したいステータス */\n  status: StatusEnum;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ChangeStatus */\nexport type ChangeStatusPayload = {\n   __typename?: 'ChangeStatusPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  /** 変更されたステータスを持ったモデル */\n  model?: Maybe<ModelHasStatusUnion>;\n};\n\n/** カレントユーザー */\nexport type CurrentUser = {\n   __typename?: 'CurrentUser';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** ロール */\n  role: Role;\n  /** ユーザー名 */\n  username: Scalars['String'];\n};\n\n\nexport type IdInputObject = {\n  /** ID */\n  id?: Maybe<Array<Scalars['TTID']>>;\n};\n\n/** ステータスをもつモデルのいずれか */\nexport type ModelHasStatusUnion = Album | Artist | Track;\n\nexport type Mutation = {\n   __typename?: 'Mutation';\n  /** ステータス変更。関連するアルバム, トラック, 各音楽サービスアルバム、各音楽サービストラックも同じステータスで更新される。 */\n  changeStatus?: Maybe<ChangeStatusPayload>;\n  /** サインイン */\n  signin?: Maybe<SigninPayload>;\n  /** カレントユーザー情報更新 */\n  updateMe?: Maybe<UpdateMePayload>;\n  /** アルバムを最新の状態にする */\n  upsertAlbum?: Maybe<UpsertAlbumPayload>;\n  /** アーティストを最新の状態にする */\n  upsertArtist?: Maybe<UpsertArtistPayload>;\n};\n\n\nexport type MutationChangeStatusArgs = {\n  input: ChangeStatusInput;\n};\n\n\nexport type MutationSigninArgs = {\n  input: SigninInput;\n};\n\n\nexport type MutationUpdateMeArgs = {\n  input: UpdateMeInput;\n};\n\n\nexport type MutationUpsertAlbumArgs = {\n  input: UpsertAlbumInput;\n};\n\n\nexport type MutationUpsertArtistArgs = {\n  input: UpsertArtistInput;\n};\n\n\nexport type Query = {\n   __typename?: 'Query';\n  /** アルバム情報取得 */\n  album?: Maybe<Album>;\n  /** アルバム一覧取得 */\n  albums: Array<Album>;\n  /** アーティスト取得 */\n  artist?: Maybe<Artist>;\n  /** アーティスト一覧取得 */\n  artists: Array<Artist>;\n  /** カレントユーザー情報取得 */\n  me: CurrentUser;\n};\n\n\nexport type QueryAlbumArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryAlbumsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n  asc?: Maybe<Scalars['Boolean']>;\n  conditions?: Maybe<AlbumsConditions>;\n  order: AlbumsQueryOrder;\n};\n\n\nexport type QueryArtistArgs = {\n  id: Scalars['TTID'];\n};\n\n\nexport type QueryArtistsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n  asc?: Maybe<Scalars['Boolean']>;\n  conditions?: Maybe<ArtistsConditions>;\n  order?: Maybe<ArtistsQueryOrder>;\n};\n\n/** ロール */\nexport type Role = {\n   __typename?: 'Role';\n  /** 出来ること一覧 */\n  allowedActions: Array<Scalars['String']>;\n  /** 説明 */\n  description: Scalars['String'];\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n};\n\n/** Autogenerated input type of Signin */\nexport type SigninInput = {\n  username?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of Signin */\nexport type SigninPayload = {\n   __typename?: 'SigninPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n  user?: Maybe<User>;\n};\n\n/** Spotify アルバム */\nexport type SpotifyAlbum = {\n   __typename?: 'SpotifyAlbum';\n  /** ID */\n  id: Scalars['TTID'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\n/** Spotify アーティスト */\nexport type SpotifyArtist = {\n   __typename?: 'SpotifyArtist';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** Spotify ID */\n  spotifyId: Scalars['String'];\n};\n\nexport enum StatusEnum {\n  /** 保留 : デフォルトの検索結果に表示されない */\n  Pending = 'PENDING',\n  /** 有効 : 通常検索結果に表示される */\n  Active = 'ACTIVE',\n  /** 除外 : 検索結果から除外される。最新情報などを取得する際などでも除外される */\n  Ignore = 'IGNORE'\n}\n\n\n/** トラック */\nexport type Track = {\n   __typename?: 'Track';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 国際標準レコーディングコード */\n  isrc: Scalars['String'];\n  /** タイトル */\n  name: Scalars['String'];\n  /** ステータス */\n  status: StatusEnum;\n};\n\n/** Autogenerated input type of UpdateMe */\nexport type UpdateMeInput = {\n  name?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  newPassword?: Maybe<Scalars['String']>;\n  oldPassword: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateMe */\nexport type UpdateMePayload = {\n   __typename?: 'UpdateMePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  currentUser?: Maybe<CurrentUser>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertAlbum */\nexport type UpsertAlbumInput = {\n  /** 指定したアルバムのトラック(ISRC)を含んでいる別音楽サービスのアルバムを一括登録 */\n  albumId?: Maybe<Scalars['TTID']>;\n  /** Apple Music か iTunes のアルバムを登録 */\n  appleMusicId?: Maybe<Scalars['String']>;\n  /** Spotify のアルバムを登録 */\n  spotifyId?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertAlbum */\nexport type UpsertAlbumPayload = {\n   __typename?: 'UpsertAlbumPayload';\n  /** 追加されたアルバム */\n  albums?: Maybe<Array<Album>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpsertArtist */\nexport type UpsertArtistInput = {\n  /**\n   * アーティスト名から全ての音楽サービスのアーティストを登録。登録後、関連アルバム、トラックを全て保存する。\n   * (ありきたりなアーティスト名の場合は関係のないアーティストが登録される可能性があるため注意)\n   */\n  artistName?: Maybe<Scalars['String']>;\n  /** Apple Music のアーティストを登録。登録後、関連アルバム、トラックを全て保存する。 */\n  appleMusicId?: Maybe<Scalars['String']>;\n  /** Spotify のアーティストを登録。登録後、関連アルバム、トラックを全て保存する。 */\n  spotifyId?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpsertArtist */\nexport type UpsertArtistPayload = {\n   __typename?: 'UpsertArtistPayload';\n  /** 追加されたアーティスト */\n  artists?: Maybe<Array<Artist>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  error?: Maybe<Scalars['String']>;\n};\n\n/** ユーザー */\nexport type User = {\n   __typename?: 'User';\n  /** ID */\n  id: Scalars['TTID'];\n  /** 名前 */\n  name: Scalars['String'];\n  /** ユーザー名 */\n  username: Scalars['String'];\n};\n\nexport type AlbumQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type AlbumQuery = (\n  { __typename?: 'Query' }\n  & { album?: Maybe<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id' | 'totalTracks' | 'name' | 'releaseDate'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id' | 'spotifyId'>\n    )> }\n  )> }\n);\n\nexport type AlbumsQueryVariables = {\n  conditions?: Maybe<AlbumsConditions>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n  order: AlbumsQueryOrder;\n  asc?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type AlbumsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Album' }\n    & Pick<Album, 'id'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ), appleMusicAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, itunesAlbum?: Maybe<(\n      { __typename?: 'AppleMusicAlbum' }\n      & Pick<AppleMusicAlbum, 'id'>\n    )>, spotifyAlbum?: Maybe<(\n      { __typename?: 'SpotifyAlbum' }\n      & Pick<SpotifyAlbum, 'id'>\n    )> }\n  )> }\n);\n\nexport type ArtistQueryVariables = {\n  id: Scalars['TTID'];\n};\n\n\nexport type ArtistQuery = (\n  { __typename?: 'Query' }\n  & { artist?: Maybe<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n    & { artworkL: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type ArtistsQueryVariables = {\n  conditions?: Maybe<ArtistsConditions>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['PositiveNumber']>;\n  order: ArtistsQueryOrder;\n  asc?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type ArtistsQuery = (\n  { __typename?: 'Query' }\n  & { items: Array<(\n    { __typename?: 'Artist' }\n    & Pick<Artist, 'id' | 'name'>\n    & { artworkM: (\n      { __typename?: 'Artwork' }\n      & Pick<Artwork, 'url' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'CurrentUser' }\n    & Pick<CurrentUser, 'id' | 'name' | 'username'>\n    & { role: (\n      { __typename?: 'Role' }\n      & Pick<Role, 'id' | 'name' | 'description' | 'allowedActions'>\n    ) }\n  ) }\n);\n\nexport type UpdateMeMutationVariables = {\n  input: UpdateMeInput;\n};\n\n\nexport type UpdateMeMutation = (\n  { __typename?: 'Mutation' }\n  & { updateMe?: Maybe<(\n    { __typename?: 'UpdateMePayload' }\n    & Pick<UpdateMePayload, 'error'>\n    & { currentUser?: Maybe<(\n      { __typename?: 'CurrentUser' }\n      & Pick<CurrentUser, 'id' | 'username' | 'name'>\n    )> }\n  )> }\n);\n\nexport type SigninMutationVariables = {\n  input: SigninInput;\n};\n\n\nexport type SigninMutation = (\n  { __typename?: 'Mutation' }\n  & { signin?: Maybe<(\n    { __typename?: 'SigninPayload' }\n    & Pick<SigninPayload, 'error'>\n  )> }\n);\n\n\nexport const AlbumDocument = gql`\n    query Album($id: TTID!) {\n  album(id: $id) {\n    id\n    totalTracks\n    name\n    releaseDate\n    artworkL {\n      url\n      width\n      height\n    }\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n      appleMusicId\n    }\n    itunesAlbum {\n      id\n      appleMusicId\n    }\n    spotifyAlbum {\n      id\n      spotifyId\n    }\n  }\n}\n    `;\n\n/**\n * __useAlbumQuery__\n *\n * To run a query within a React component, call `useAlbumQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAlbumQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n      }\nexport function useAlbumLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumQuery, AlbumQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);\n        }\nexport type AlbumQueryHookResult = ReturnType<typeof useAlbumQuery>;\nexport type AlbumLazyQueryHookResult = ReturnType<typeof useAlbumLazyQuery>;\nexport type AlbumQueryResult = ApolloReactCommon.QueryResult<AlbumQuery, AlbumQueryVariables>;\nexport const AlbumsDocument = gql`\n    query Albums($conditions: AlbumsConditions, $offset: Int, $limit: PositiveNumber, $order: AlbumsQueryOrder!, $asc: Boolean) {\n  items: albums(conditions: $conditions, offset: $offset, limit: $limit, order: $order, asc: $asc) {\n    id\n    artworkM {\n      url\n      width\n      height\n    }\n    appleMusicAlbum {\n      id\n    }\n    itunesAlbum {\n      id\n    }\n    spotifyAlbum {\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useAlbumsQuery__\n *\n * To run a query within a React component, call `useAlbumsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAlbumsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAlbumsQuery({\n *   variables: {\n *      conditions: // value for 'conditions'\n *      offset: // value for 'offset'\n *      limit: // value for 'limit'\n *      order: // value for 'order'\n *      asc: // value for 'asc'\n *   },\n * });\n */\nexport function useAlbumsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n      }\nexport function useAlbumsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);\n        }\nexport type AlbumsQueryHookResult = ReturnType<typeof useAlbumsQuery>;\nexport type AlbumsLazyQueryHookResult = ReturnType<typeof useAlbumsLazyQuery>;\nexport type AlbumsQueryResult = ApolloReactCommon.QueryResult<AlbumsQuery, AlbumsQueryVariables>;\nexport const ArtistDocument = gql`\n    query Artist($id: TTID!) {\n  artist(id: $id) {\n    id\n    name\n    artworkL {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useArtistQuery__\n *\n * To run a query within a React component, call `useArtistQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useArtistQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n      }\nexport function useArtistLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistQuery, ArtistQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);\n        }\nexport type ArtistQueryHookResult = ReturnType<typeof useArtistQuery>;\nexport type ArtistLazyQueryHookResult = ReturnType<typeof useArtistLazyQuery>;\nexport type ArtistQueryResult = ApolloReactCommon.QueryResult<ArtistQuery, ArtistQueryVariables>;\nexport const ArtistsDocument = gql`\n    query Artists($conditions: ArtistsConditions, $offset: Int, $limit: PositiveNumber, $order: ArtistsQueryOrder!, $asc: Boolean) {\n  items: artists(conditions: $conditions, offset: $offset, limit: $limit, order: $order, asc: $asc) {\n    id\n    name\n    artworkM {\n      url\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useArtistsQuery__\n *\n * To run a query within a React component, call `useArtistsQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistsQuery({\n *   variables: {\n *      conditions: // value for 'conditions'\n *      offset: // value for 'offset'\n *      limit: // value for 'limit'\n *      order: // value for 'order'\n *      asc: // value for 'asc'\n *   },\n * });\n */\nexport function useArtistsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n      }\nexport function useArtistsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);\n        }\nexport type ArtistsQueryHookResult = ReturnType<typeof useArtistsQuery>;\nexport type ArtistsLazyQueryHookResult = ReturnType<typeof useArtistsLazyQuery>;\nexport type ArtistsQueryResult = ApolloReactCommon.QueryResult<ArtistsQuery, ArtistsQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    name\n    username\n    role {\n      id\n      name\n      description\n      allowedActions\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const UpdateMeDocument = gql`\n    mutation UpdateMe($input: UpdateMeInput!) {\n  updateMe(input: $input) {\n    currentUser {\n      id\n      username\n      name\n    }\n    error\n  }\n}\n    `;\nexport type UpdateMeMutationFn = ApolloReactCommon.MutationFunction<UpdateMeMutation, UpdateMeMutationVariables>;\n\n/**\n * __useUpdateMeMutation__\n *\n * To run a mutation, you first call `useUpdateMeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMeMutation, { data, loading, error }] = useUpdateMeMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateMeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateMeMutation, UpdateMeMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateMeMutation, UpdateMeMutationVariables>(UpdateMeDocument, baseOptions);\n      }\nexport type UpdateMeMutationHookResult = ReturnType<typeof useUpdateMeMutation>;\nexport type UpdateMeMutationResult = ApolloReactCommon.MutationResult<UpdateMeMutation>;\nexport type UpdateMeMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateMeMutation, UpdateMeMutationVariables>;\nexport const SigninDocument = gql`\n    mutation Signin($input: SigninInput!) {\n  signin(input: $input) {\n    error\n  }\n}\n    `;\nexport type SigninMutationFn = ApolloReactCommon.MutationFunction<SigninMutation, SigninMutationVariables>;\n\n/**\n * __useSigninMutation__\n *\n * To run a mutation, you first call `useSigninMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSigninMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signinMutation, { data, loading, error }] = useSigninMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSigninMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SigninMutation, SigninMutationVariables>) {\n        return ApolloReactHooks.useMutation<SigninMutation, SigninMutationVariables>(SigninDocument, baseOptions);\n      }\nexport type SigninMutationHookResult = ReturnType<typeof useSigninMutation>;\nexport type SigninMutationResult = ApolloReactCommon.MutationResult<SigninMutation>;\nexport type SigninMutationOptions = ApolloReactCommon.BaseMutationOptions<SigninMutation, SigninMutationVariables>;","import React from 'react';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst ImageComponent = ({\n  className = \"\", src = \"\", title = \"\", width\n}:{\n  className?:string, src?:string, title?:string, width:string|number\n}) => {\n  if(src === \"\") src = `${process.env.PUBLIC_URL}/no_image.png`\n\n  return (\n    <CardMedia\n      className={className}\n      image={src}\n      title={title}\n      style={{ width: width, height: width }}\n    />\n  )\n}\n\nexport default ImageComponent;\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport ImageComponent from '../image/ImageComponent'\nimport { Grid, CardActionArea } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\ninterface Image {\n  title: string\n  src?: string | null\n  width: string | number\n  linkUrl?: string\n  componentInImage?: JSX.Element\n}\n\nconst ImageCardComponent = (image:Image) => {\n  const link = image.linkUrl ? { component: Link, to: image.linkUrl } : {}\n\n  return (\n    React.createElement(Grid, {\n      container: true, item: true, xs: true,\n      direction: \"row\", justify: \"center\", alignItems: \"center\",\n      ...link,\n      children: (\n        <Card style={{ width: image.width, position: \"relative\" }}>\n          <CardActionArea>\n            <Grid container style={{ position: \"absolute\", left: \"5px\", bottom: \"5px\" }}>\n              { image.componentInImage ? image.componentInImage : <></> }\n            </Grid>\n            <ImageComponent src={image.src || \"\"} width={image.width} title={image.title}/>\n          </CardActionArea>\n        </Card>\n      )\n    })\n  )\n}\n\nexport default ImageCardComponent\n","import React from 'react';\nimport { Album } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\nimport { Grid } from '@material-ui/core';\n\nconst AlbumItemLayout = (\n  { album, width }:\n  { album: Album, width:string|number }\n) => {\n  const style = {\n    width: \"15px\",\n    height: \"15px\",\n    borderRadius: \"50%\",\n    fontSize: \"10px\",\n    color: \"#fff\",\n    lineHeight: \"15px\",\n    textAlign: \"center\" as \"center\",\n    background: \"#000\",\n  }\n\n  const serviceIcons = []\n  if(album.appleMusicAlbum){\n    serviceIcons.push(<Grid key={1} item style={{...style, backgroundColor: \"#ff2f56\"}}>A</Grid>)\n  }\n  if(album.itunesAlbum){\n    serviceIcons.push(<Grid key={2} item style={{...style, backgroundColor: \"#0070c9\"}}>iT</Grid>)\n  }\n  if(album.spotifyAlbum){\n    serviceIcons.push(<Grid key={3} item style={{...style, backgroundColor: \"#1DB954\"}}>S</Grid>)\n  }\n  const componentInImage = <>{serviceIcons}</>\n\n  return (\n    <ImageCardComponent\n      title={album.name}\n      src={album.artworkM.url}\n      width={width}\n      linkUrl={`/albums/${album.id}?q=${album.id}`}\n      componentInImage={componentInImage}\n    />\n  )\n}\n\nexport default AlbumItemLayout\n","import React, { useState } from 'react';\nimport { Waypoint } from 'react-waypoint';\n\n// TODO: hasNext とかないのでページ遷移によって再度取得してしまう？\nconst PaginationComponent = (\n  { component, no, offset, limit, fetchMore }:\n  { component:JSX.Element, no:number, offset:number, limit:number, fetchMore:any }\n) => {\n  const [alreadyFetch, setAlreadyFetch] = useState(false)\n  const fetchNo = offset - limit\n  const isFetch = no === fetchNo\n\n  const exeFetchMore = () => fetchMore({\n    variables: {\n      offset: offset\n    },\n    updateQuery: (\n      prev:{ items: any[] },\n      { fetchMoreResult }:{ fetchMoreResult:{ items: any[] } }\n    ) => {\n      if (!fetchMoreResult) return prev;\n      return { ...prev, ...{ items: [...prev.items, ...fetchMoreResult.items] } }\n    }\n  })\n\n  const enterFunction = () => {\n    if(alreadyFetch) return\n    setAlreadyFetch(true)\n    return exeFetchMore()\n  }\n\n  return (\n    <>\n      { component }\n      { isFetch ? <Waypoint onEnter={enterFunction}/> : <></> }\n    </>\n  )\n}\n\nexport default PaginationComponent\n","import { useLocation } from \"react-router-dom\"\nimport _ from \"lodash\"\n\nexport default function useConditions<T>() {\n  const location = useLocation()\n  const params = new URLSearchParams(location.search)\n\n  const getUniqueValues = (key:string):string[] => {\n    const value = params.get(key)\n    if(value === null) return []\n\n    const values = value.split(\",\")\n    const uniqueValues = new Set<string>()\n\n    values.forEach((value) => {\n      uniqueValues.add(value)\n    })\n\n    return Array.from(uniqueValues)\n  }\n\n  let conditions = {}\n\n  // ID\n  getUniqueValues(\"q\").forEach((condition_id) => {\n    switch( true ){\n      case /^art/.test(condition_id):\n        conditions = _.merge(conditions, { artists: { id: [condition_id] } })\n        break;\n      case /^abm/.test(condition_id):\n        conditions = _.merge(conditions, { albums: { id: [condition_id] } })\n        break;\n      case /^trk/.test(condition_id):\n        conditions = _.merge(conditions, { tracks: { id: [condition_id] } })\n        break;\n    }\n  })\n\n  // ステータス\n  getUniqueValues(\"s\").forEach((status) => {\n    switch( status ){\n      case \"p\":\n        conditions = _.merge(conditions, { status: [\"PENDING\"] })\n        break;\n      case \"a\":\n        conditions = _.merge(conditions, { status: [\"ACTIVE\"] })\n        break;\n      case \"i\":\n        conditions = _.merge(conditions, { status: [\"IGNORE\"] })\n        break;\n    }\n  })\n\n  return conditions as T\n}\n","import React from 'react';\nimport { useAlbumsQuery, Album, AlbumsConditions, AlbumsQueryOrder } from '../../../graphql/types.d';\nimport AlbumItemLayout from '../item/AlbumItemLayout';\nimport { Grid } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport useConditions from '../../../hooks/useConditions';\n\nconst AlbumsLayout = () => {\n  const conditions = useConditions<AlbumsConditions>()\n  const limit = 50\n  const { error, data, fetchMore } = useAlbumsQuery(\n    {\n      variables: {\n        offset: 0,\n        limit: limit,\n        order: AlbumsQueryOrder.Release,\n        asc: true,\n        ...{ conditions }\n      },\n      // 戻るボタンで戻っても最初から読み込みが発生しない\n      fetchPolicy: \"cache-first\"\n    }\n  )\n\n  if (error) return <div>{error.message}</div>\n\n  let albums_content:JSX.Element[] = []\n\n  if (data) {\n    albums_content =\n      data.items.map(\n        (item, i) =>\n          <PaginationComponent\n            key={i}\n            component={<AlbumItemLayout album={item as Album} width=\"150px\" />}\n            no={i}\n            offset={data.items.length}\n            limit={limit}\n            fetchMore={fetchMore}\n          />\n      )\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {albums_content}\n    </Grid>\n  )\n}\n\nexport default AlbumsLayout;\n","import React from 'react';\nimport { useScrollTrigger, AppBar, Toolbar, Typography, Slide, IconButton, Grid } from '@material-ui/core';\nimport PersonIcon from '@material-ui/icons/Person'\nimport AlbumIcon from '@material-ui/icons/Album'\nimport { Link } from 'react-router-dom';\n\n// ref: https://material-ui.com/components/app-bar/#hide-app-bar\ninterface Props {\n  window?: () => Window;\n  children: React.ReactElement;\n}\n\nconst HideOnScroll = (props: Props) => {\n  const { children, window } = props;\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nconst Bar = () =>\n  <>\n    <HideOnScroll>\n      <AppBar>\n        <Toolbar>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n            spacing={3}\n          >\n            <Grid item>\n              <Typography variant=\"h6\">ゲーム音楽</Typography>\n            </Grid>\n            <Grid item>\n              <IconButton component={Link} to={`/artists`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <PersonIcon />\n                アーティスト\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <IconButton component={Link} to={`/albums`} edge=\"start\" size=\"small\" color=\"inherit\" aria-label=\"menu\">\n                <AlbumIcon />\n                アルバム\n              </IconButton>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </HideOnScroll>\n    <Toolbar style={{ margin: \"4px\" }} />\n  </>\n\nexport default Bar\n","import { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { onError } from \"apollo-link-error\"\n\nconst httpLink = new HttpLink({ uri: process.env.REACT_APP_GRAPHQL_URI, credentials: 'same-origin' })\nconst headersLink = new ApolloLink((operation, forward) => forward(operation))\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst link = ApolloLink.from([headersLink, errorLink, httpLink])\n\nexport default new ApolloClient({\n  link,\n  cache: new InMemoryCache({ dataIdFromObject: object => object.id })\n})\n","import React from 'react';\nimport { Artist } from '../../../graphql/types.d';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\n\nconst ArtistItemLayout = (\n  { artist, width }:\n  { artist: Artist, width:string|number }\n) => {\n  const componentInImage = <span style={{ color: \"black\" }}>{artist.name}</span>\n\n  return (\n    <ImageCardComponent\n      title={artist.name}\n      src={artist.artworkM.url}\n      width={width}\n      linkUrl={`/artists/${artist.id}?q=${artist.id}`}\n      componentInImage={componentInImage}\n    />\n  )\n}\n\nexport default ArtistItemLayout\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Artist, ArtistsDocument, ArtistsConditions } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport PaginationComponent from '../../../components/pagination/paginationComponent';\nimport ArtistItemLayout from '../item/ArtistItemLayout';\nimport useConditions from '../../../hooks/useConditions';\n\nconst ArtistsLayout = () => {\n  const conditions = useConditions<ArtistsConditions>()\n  const limit = 30\n  const { error, data, fetchMore } = useQuery<{ items: Artist[] }>(\n    ArtistsDocument,\n    {\n      variables: {\n        offset: 0,\n        limit: limit,\n        order: \"POPULARITY\",\n        asc: false,\n        ...{ conditions }\n      },\n      // 戻るボタンで戻っても最初から読み込みが発生しない\n      fetchPolicy: \"cache-first\"\n    }\n  )\n\n  if (error) return <div>{error.message}</div>\n\n  let content:JSX.Element[] = []\n\n  if (data) {\n    content =\n      data.items.map(\n        (item, i) =>\n          <PaginationComponent\n            key={i}\n            component={<ArtistItemLayout artist={item} width=\"150px\" key={i} />}\n            no={i}\n            offset={data.items.length}\n            limit={limit}\n            fetchMore={fetchMore}\n          />\n      )\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {content}\n    </Grid>\n  )\n}\n\nexport default ArtistsLayout\n","import React from 'react';\nimport { useAlbumQuery } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport ArtistsLayout from '../../artist/list/ArtistsLayout';\n\nconst AlbumInfoLayout = () => {\n  const { id } = useParams()\n  const { loading, error, data } = useAlbumQuery({ variables: { id: id } })\n\n  if (error) return <div>{error.message}</div>\n\n  let album_content = <></>\n\n  if (loading || !data) {\n    // todo\n  } else {\n    if(data.album) {\n      let preview_content = <></>\n\n      if(data.album.appleMusicAlbum) {\n        preview_content =\n          <iframe\n            title={data.album.id}\n            allow=\"autoplay *; encrypted-media *;\"\n            frameBorder=\"0\"\n            width=\"660\"\n            height=\"500\"\n            style={{overflow:\"hidden\", background:\"transparent\"}}\n            src={`https://embed.music.apple.com/jp/album/game/${data.album.appleMusicAlbum.appleMusicId}?app=music`}>\n          </iframe>\n      } else if(data.album.itunesAlbum) {\n        preview_content =\n          <iframe\n            title={data.album.id}\n            src={`https://tools.applemusic.com/embed/v1/album/${data.album.itunesAlbum.appleMusicId}?country=jp`}\n            frameBorder=\"0\"\n            width=\"660\"\n            height=\"500\">\n          </iframe>\n      } else if(data.album.spotifyAlbum) {\n        preview_content =\n          <iframe\n            title={data.album.id}\n            src={`https://open.spotify.com/embed/album/${data.album.spotifyAlbum.spotifyId}`}\n            width=\"660\"\n            height=\"500\"\n            frameBorder=\"0\"\n            allowTransparency={true}\n            allow=\"encrypted-media\">\n          </iframe>\n      }\n      album_content = <>\n        <div >{preview_content}</div>\n        <div style={{ padding: \"4px 0\" }} />\n        <ArtistsLayout />\n      </>\n    }\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {album_content}\n    </Grid>\n  )\n}\n\nexport default AlbumInfoLayout\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Artist, ArtistDocument } from '../../../graphql/types.d';\nimport { Grid } from '@material-ui/core';\nimport { useParams } from 'react-router-dom';\nimport AlbumsLayout from '../../album/list/AlbumsLayout';\nimport ImageCardComponent from '../../../components/imageCard/ImageCardComponent';\n\nconst ArtistInfoLayout = () => {\n  const { id } = useParams()\n  const { error, data } =\n    useQuery<{ artist: Artist | null }>(ArtistDocument,{ variables: { id: id } });\n\n  if (error) return <div>{error.message}</div>\n\n  let content = <></>\n\n  if (data && data.artist) {\n    content =\n      <Grid>\n        <ImageCardComponent\n          title={data.artist.name}\n          src={data.artist.artworkL.url}\n          width={270}\n        />\n        <div style={{ padding: \"4px 0\" }} />\n        <AlbumsLayout />\n      </Grid>\n  }\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      {content}\n    </Grid>\n  )\n}\n\nexport default ArtistInfoLayout\n","import React, { useState } from 'react';\nimport { Grid, FormControl, InputLabel, Input, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert'\nimport { useSigninMutation, SigninPayload } from '../../../graphql/types.d';\n\nconst UserSigninLayout = () => {\n  const [notification, setNotification] = useState(<></>)\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n\n  interface SigninResponse {\n    data: { signin: SigninPayload }\n  }\n  const [signin] = useSigninMutation({\n    update: (_, response:SigninResponse) => {\n      if (response.data.signin.error) {\n        setNotification(<Alert severity=\"error\">{response.data.signin.error}</Alert>)\n      } else {\n        setNotification(<Alert severity=\"success\">ログインしました</Alert>)\n      }\n    },\n    variables: { input: { username, password } },\n  })\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <form autoComplete=\"off\">\n        <div>\n          <FormControl>\n            <InputLabel>ユーザー名</InputLabel>\n            <Input value={username} onChange={e => setUsername(e.target.value || \"\")}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>パスワード</InputLabel>\n            <Input value={password} onChange={e => setPassword(e.target.value || \"\")} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <Button type=\"submit\" onClick={(e) =>{e.preventDefault(); signin()}} variant=\"contained\">Signin</Button>\n        </div>\n        <div>{notification}</div>\n      </form>\n    </Grid>\n  )\n}\n\nexport default UserSigninLayout\n","import React, { useState } from 'react';\nimport { Grid, FormControl, InputLabel, Input, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert'\nimport { useMeQuery, useUpdateMeMutation, UpdateMePayload, UpdateMeInput } from '../../../graphql/types.d';\n\nconst UserMeLayout = () => {\n  const [notification, setNotification] = useState(<></>)\n  const [name, setName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [oldPassword, setOldPassword] = useState(\"\")\n  const [newPassword, setNewPassword] = useState(\"\")\n  const [input, setInput] = useState<UpdateMeInput>({ oldPassword })\n\n  // カレントユーザーデフォルト値\n  const { data } = useMeQuery()\n  if(name === \"\" && username === \"\" && data && data.me){\n    setName(data.me.name)\n    setUsername(data.me.username)\n  }\n  // TODO: 適当すぎるので直すこと\n  let role = [<></>]\n  if(data && data.me){\n    role = data.me.role.allowedActions.map((action) => {\n        return <p>{action}</p>\n      }\n    )\n  }\n\n  // カレントユーザー更新\n  interface UpdateMeResponse {\n    data: { updateMe: UpdateMePayload }\n  }\n  const [updateMe] = useUpdateMeMutation({\n    update: (_, response:UpdateMeResponse) => {\n      if (response.data.updateMe.error) {\n        setNotification(<Alert severity=\"error\">{response.data.updateMe.error}</Alert>)\n      } else {\n        setNotification(<Alert severity=\"success\">更新しました</Alert>)\n      }\n    },\n    variables: { input },\n  })\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <form autoComplete=\"off\">\n        <div>ID: {(data && data.me) ? data.me.id : \"\"}</div>\n        <div>\n          <FormControl>\n            <InputLabel>名前</InputLabel>\n            <Input value={name} onChange={e => {\n              setName(e.target.value || \"\")\n              setInput({ ...input, name: (e.target.value || \"\") })\n            }}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>ユーザー名</InputLabel>\n            <Input value={username} onChange={e => {\n              setUsername(e.target.value || \"\")\n              setInput({ ...input, username: (e.target.value || \"\") })\n            }}/>\n          </FormControl>\n        </div>\n        <div>\n          <FormControl>\n            <InputLabel>新しいパスワード</InputLabel>\n            <Input value={newPassword} onChange={e => {\n              setNewPassword(e.target.value || \"\")\n              setInput({ ...input, newPassword: (e.target.value || \"\") })\n            }} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <FormControl required={true}>\n            <InputLabel>古いパスワード</InputLabel>\n            <Input value={oldPassword} onChange={e => {\n              setOldPassword(e.target.value || \"\")\n              setInput({ ...input, oldPassword: (e.target.value || \"\") })\n            }} type=\"password\" />\n          </FormControl>\n        </div>\n        <div>\n          <Button type=\"submit\" onClick={(e) =>{e.preventDefault(); updateMe()}} variant=\"contained\">Update</Button>\n        </div>\n        <div>{notification}</div>\n        <div>権限: {role}</div>\n      </form>\n    </Grid>\n  )\n}\n\nexport default UserMeLayout\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\"\nimport AlbumsLayout from '../album/list/AlbumsLayout';\nimport Bar from './Bar';\nimport { ApolloProvider } from '@apollo/react-hoc';\nimport client from './client';\nimport AlbumInfoLayout from '../album/info/AlbumInfoLayout';\nimport ArtistsLayout from '../artist/list/ArtistsLayout';\nimport ArtistInfoLayout from '../artist/info/ArtistInfoLayout';\nimport UserSigninLayout from '../user/signin/UserSigninLayout';\nimport UserMeLayout from '../user/me/UserMeLayout';\n\nconst RootStyleLayout = () =>\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <Bar />\n      <Switch>\n        <Route exact path=\"/\" component={AlbumsLayout} />\n        <Route exact path=\"/artists\" component={ArtistsLayout} />\n        <Route exact path=\"/artists/:id\" component={ArtistInfoLayout} />\n        <Route exact path=\"/albums\" component={AlbumsLayout} />\n        <Route exact path=\"/albums/:id\" component={AlbumInfoLayout} />\n        <Route exact path=\"/signin\" component={UserSigninLayout} />\n        <Route exact path=\"/me\" component={UserMeLayout} />\n      </Switch>\n    </ApolloProvider>\n  </BrowserRouter>\n\nexport default RootStyleLayout\n","import React from 'react';\nimport { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport Root from './Root';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  },\n  typography: {\n    fontFamily: [\n      '\"Noto Sans JP\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n})\n\nconst RootStyleLayout = () =>\n  <ThemeProvider theme={theme}>\n    {/* リセットCSS */}\n    <CssBaseline />\n    {/* フォント */}\n    <link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+JP\" rel=\"stylesheet\" />\n    <Root />\n  </ThemeProvider>\n\nexport default RootStyleLayout\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport RootStyleLayout from './RootStyle';\nimport * as serviceWorker from './serviceWorker'\n\nconst App = () => <RootStyleLayout />\n\nexport default App\n\nserviceWorker.unregister()\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './layouts/app/App';\n\nReactDOM.render(<App />, document.querySelector('#app'));\n"],"sourceRoot":""}