class ActiveRecord::Base
  def self.abstract_class=: (bool) -> void
  def self.scope: (Symbol, ^(*untyped) -> untyped ) -> void
                | (Symbol) { (*untyped) -> untyped } -> void
  def self.belongs_to: (Symbol, ?untyped, **untyped) -> void
  def self.has_many: (Symbol, ?untyped, **untyped) -> void
  def self.has_one: (Symbol, ?untyped, **untyped) -> void
  def self.transaction: [T] () { () -> T } -> T
  def self.create!: (**untyped) -> instance
  def self.validate: (*untyped) -> void
  def self.validates: (*untyped) -> void
  def self.enum: (Hash[Symbol, untyped]) -> void

  # callbacks
  def self.after_commit: (*untyped) -> void
  def self.after_create: (*untyped) -> void
  def self.after_destroy: (*untyped) -> void
  def self.after_rollback: (*untyped) -> void
  def self.after_save: (*untyped) -> void
  def self.after_update: (*untyped) -> void
  def self.after_validation: (*untyped) -> void
  def self.around_create: (*untyped) -> void
  def self.around_destroy: (*untyped) -> void
  def self.around_save: (*untyped) -> void
  def self.around_update: (*untyped) -> void
  def self.before_create: (*untyped) -> void
  def self.before_destroy: (*untyped) -> void
  def self.before_save: (*untyped) -> void
  def self.before_update: (*untyped) -> void
  def self.before_validation: (*untyped) -> void

  def self.columns: () -> Array[untyped]
  def self.reflect_on_all_associations: (?Symbol) -> Array[untyped]

  def will_save_change_to_attribute?: (String | Symbol attr_name, ?from: untyped, ?to: untyped) -> bool

  def save!: () -> self
  def save: () -> bool
  def update!: (*untyped) -> self
  def update: (*untyped) -> bool
  def destroy!: () -> self
  def destroy: () -> bool
  def valid?: () -> bool
  def invalid?: () -> bool
  def errors: () -> untyped
  def []: (Symbol) -> untyped
  def []=: (Symbol, untyped) -> untyped
end

class ActiveRecord::Relation
end

class ActiveRecord::Associations::CollectionProxy
end

interface _ActiveRecord_Relation[Model]
  def all: () -> self
  def ids: () -> Array[Integer]
  def none: () -> self
  def pluck: (Symbol | String column) -> Array[untyped]
           | (*Symbol | String columns) -> Array[Array[untyped]]
  def where: (*untyped) -> self
  def not: (*untyped) -> self
  def exists?: (*untyped) -> bool
  def order: (*untyped) -> self
  def group: (*Symbol | String) -> untyped
  def distinct: () -> self
  def or: (self) -> self
  def merge: (self) -> self
  def joins: (*String | Symbol) -> self
           | (Hash[untyped, untyped]) -> self
  def left_joins: (*String | Symbol) -> self
           | (Hash[untyped, untyped]) -> self
  def left_outer_joins: (*String | Symbol) -> self
                      | (Hash[untyped, untyped]) -> self
  def includes: (*String | Symbol) -> self
              | (Hash[untyped, untyped]) -> self
  def eager_load: (*String | Symbol) -> self
                | (Hash[untyped, untyped]) -> self
  def preload: (*String | Symbol) -> self
             | (Hash[untyped, untyped]) -> self
  def find_by: (*untyped) -> Model?
  def find_by!: (*untyped) -> Model
  def find: (Integer id) -> Model
  def first: () -> Model
           | (Integer count) -> Array[Model]
  def find_each: (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) { (Model) -> void } -> nil
  def find_in_batches: (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) { (self) -> void } -> nil
  def destroy_all: () -> untyped
  def delete_all: () -> untyped
  def update_all: (*untyped) -> untyped
  def each: () { (Model) -> void } -> self
end

interface _ActiveRecord_Relation_ClassMethods[Model, Relation]
  def all: () -> Relation
  def ids: () -> Array[Integer]
  def none: () -> Relation
  def pluck: (Symbol | String column) -> Array[untyped]
           | (*Symbol | String columns) -> Array[Array[untyped]]
  def where: (*untyped) -> Relation
  def exists?: (*untyped) -> bool
  def order: (*untyped) -> Relation
  def group: (*Symbol | String) -> untyped
  def distinct: () -> self
  def or: (Relation) -> Relation
  def merge: (Relation) -> Relation
  def joins: (*String | Symbol) -> self
           | (Hash[untyped, untyped]) -> self
  def left_joins: (*String | Symbol) -> self
           | (Hash[untyped, untyped]) -> self
  def left_outer_joins: (*String | Symbol) -> self
                      | (Hash[untyped, untyped]) -> self
  def includes: (*String | Symbol) -> self
              | (Hash[untyped, untyped]) -> self
  def eager_load: (*String | Symbol) -> self
                | (Hash[untyped, untyped]) -> self
  def preload: (*String | Symbol) -> self
             | (Hash[untyped, untyped]) -> self
  def find_by: (*untyped) -> Model?
  def find_by!: (*untyped) -> Model
  def find: (Integer id) -> Model
  def first: () -> Model
           | (Integer count) -> Array[Model]
  def find_each: (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) { (Model) -> void } -> nil
  def find_in_batches: (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) { (self) -> void } -> nil
  def destroy_all: () -> untyped
  def delete_all: () -> untyped
  def update_all: (*untyped) -> untyped
end
