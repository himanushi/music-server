class PlaylistCondition < ::ActiveRecord::Base
  extend _ActiveRecord_Relation_ClassMethods[PlaylistCondition, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def playlist_id: () -> String

    def playlist_id=: (String) -> String

    def playlist_id?: () -> bool

    def playlist_id_changed?: () -> bool

    def playlist_id_change: () -> [ String?, String? ]

    def playlist_id_will_change!: () -> void

    def playlist_id_was: () -> String?

    def playlist_id_previously_changed?: () -> bool

    def playlist_id_previous_change: () -> Array[String?]?

    def playlist_id_previously_was: () -> String?

    def playlist_id_before_last_save: () -> String?

    def playlist_id_change_to_be_saved: () -> Array[String?]?

    def playlist_id_in_database: () -> String?

    def saved_change_to_playlist_id: () -> Array[String?]?

    def saved_change_to_playlist_id?: () -> bool

    def will_save_change_to_playlist_id?: () -> bool

    def restore_playlist_id!: () -> void

    def clear_playlist_id_change: () -> void

    def order: () -> String

    def order=: (String) -> String

    def order?: () -> bool

    def order_changed?: () -> bool

    def order_change: () -> [ String?, String? ]

    def order_will_change!: () -> void

    def order_was: () -> String?

    def order_previously_changed?: () -> bool

    def order_previous_change: () -> Array[String?]?

    def order_previously_was: () -> String?

    def order_before_last_save: () -> String?

    def order_change_to_be_saved: () -> Array[String?]?

    def order_in_database: () -> String?

    def saved_change_to_order: () -> Array[String?]?

    def saved_change_to_order?: () -> bool

    def will_save_change_to_order?: () -> bool

    def restore_order!: () -> void

    def clear_order_change: () -> void

    def direction: () -> String

    def direction=: (String) -> String

    def direction?: () -> bool

    def direction_changed?: () -> bool

    def direction_change: () -> [ String?, String? ]

    def direction_will_change!: () -> void

    def direction_was: () -> String?

    def direction_previously_changed?: () -> bool

    def direction_previous_change: () -> Array[String?]?

    def direction_previously_was: () -> String?

    def direction_before_last_save: () -> String?

    def direction_change_to_be_saved: () -> Array[String?]?

    def direction_in_database: () -> String?

    def saved_change_to_direction: () -> Array[String?]?

    def saved_change_to_direction?: () -> bool

    def will_save_change_to_direction?: () -> bool

    def restore_direction!: () -> void

    def clear_direction_change: () -> void

    def favorite: () -> bool

    def favorite=: (bool) -> bool

    def favorite?: () -> bool

    def favorite_changed?: () -> bool

    def favorite_change: () -> [ bool?, bool? ]

    def favorite_will_change!: () -> void

    def favorite_was: () -> bool?

    def favorite_previously_changed?: () -> bool

    def favorite_previous_change: () -> Array[bool?]?

    def favorite_previously_was: () -> bool?

    def favorite_before_last_save: () -> bool?

    def favorite_change_to_be_saved: () -> Array[bool?]?

    def favorite_in_database: () -> bool?

    def saved_change_to_favorite: () -> Array[bool?]?

    def saved_change_to_favorite?: () -> bool

    def will_save_change_to_favorite?: () -> bool

    def restore_favorite!: () -> void

    def clear_favorite_change: () -> void

    def min_popularity: () -> Integer?

    def min_popularity=: (Integer?) -> Integer?

    def min_popularity?: () -> bool

    def min_popularity_changed?: () -> bool

    def min_popularity_change: () -> [ Integer?, Integer? ]

    def min_popularity_will_change!: () -> void

    def min_popularity_was: () -> Integer?

    def min_popularity_previously_changed?: () -> bool

    def min_popularity_previous_change: () -> Array[Integer?]?

    def min_popularity_previously_was: () -> Integer?

    def min_popularity_before_last_save: () -> Integer?

    def min_popularity_change_to_be_saved: () -> Array[Integer?]?

    def min_popularity_in_database: () -> Integer?

    def saved_change_to_min_popularity: () -> Array[Integer?]?

    def saved_change_to_min_popularity?: () -> bool

    def will_save_change_to_min_popularity?: () -> bool

    def restore_min_popularity!: () -> void

    def clear_min_popularity_change: () -> void

    def max_popularity: () -> Integer?

    def max_popularity=: (Integer?) -> Integer?

    def max_popularity?: () -> bool

    def max_popularity_changed?: () -> bool

    def max_popularity_change: () -> [ Integer?, Integer? ]

    def max_popularity_will_change!: () -> void

    def max_popularity_was: () -> Integer?

    def max_popularity_previously_changed?: () -> bool

    def max_popularity_previous_change: () -> Array[Integer?]?

    def max_popularity_previously_was: () -> Integer?

    def max_popularity_before_last_save: () -> Integer?

    def max_popularity_change_to_be_saved: () -> Array[Integer?]?

    def max_popularity_in_database: () -> Integer?

    def saved_change_to_max_popularity: () -> Array[Integer?]?

    def saved_change_to_max_popularity?: () -> bool

    def will_save_change_to_max_popularity?: () -> bool

    def restore_max_popularity!: () -> void

    def clear_max_popularity_change: () -> void

    def from_release_date: () -> ActiveSupport::TimeWithZone?

    def from_release_date=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def from_release_date?: () -> bool

    def from_release_date_changed?: () -> bool

    def from_release_date_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def from_release_date_will_change!: () -> void

    def from_release_date_was: () -> ActiveSupport::TimeWithZone?

    def from_release_date_previously_changed?: () -> bool

    def from_release_date_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def from_release_date_previously_was: () -> ActiveSupport::TimeWithZone?

    def from_release_date_before_last_save: () -> ActiveSupport::TimeWithZone?

    def from_release_date_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def from_release_date_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_from_release_date: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_from_release_date?: () -> bool

    def will_save_change_to_from_release_date?: () -> bool

    def restore_from_release_date!: () -> void

    def clear_from_release_date_change: () -> void

    def to_release_date: () -> ActiveSupport::TimeWithZone?

    def to_release_date=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def to_release_date?: () -> bool

    def to_release_date_changed?: () -> bool

    def to_release_date_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def to_release_date_will_change!: () -> void

    def to_release_date_was: () -> ActiveSupport::TimeWithZone?

    def to_release_date_previously_changed?: () -> bool

    def to_release_date_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def to_release_date_previously_was: () -> ActiveSupport::TimeWithZone?

    def to_release_date_before_last_save: () -> ActiveSupport::TimeWithZone?

    def to_release_date_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def to_release_date_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_to_release_date: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_to_release_date?: () -> bool

    def will_save_change_to_to_release_date?: () -> bool

    def restore_to_release_date!: () -> void

    def clear_to_release_date_change: () -> void
  end
  include GeneratedAttributeMethods

  def playlist: () -> Playlist
  def playlist=: (Playlist?) -> Playlist?
  def reload_playlist: () -> Playlist?
  def build_playlist: (untyped) -> Playlist
  def create_playlist: (untyped) -> Playlist
  def create_playlist!: (untyped) -> Playlist

  def order_popularity!: () -> bool
  def order_popularity?: () -> bool
  def order_release_date!: () -> bool
  def order_release_date?: () -> bool
  def order_name!: () -> bool
  def order_name?: () -> bool
  def direction_asc!: () -> bool
  def direction_asc?: () -> bool
  def direction_desc!: () -> bool
  def direction_desc?: () -> bool
  def self.order_popularity: () -> ActiveRecord_Relation
  def self.order_release_date: () -> ActiveRecord_Relation
  def self.order_name: () -> ActiveRecord_Relation
  def self.direction_asc: () -> ActiveRecord_Relation
  def self.direction_desc: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def order_popularity: () -> ActiveRecord_Relation

    def order_release_date: () -> ActiveRecord_Relation

    def order_name: () -> ActiveRecord_Relation

    def direction_asc: () -> ActiveRecord_Relation

    def direction_desc: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[PlaylistCondition, Integer]
    include Enumerable[PlaylistCondition]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[PlaylistCondition, Integer]
  end
end
