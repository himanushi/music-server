class ArtistHasAlbum < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[ArtistHasAlbum, ActiveRecord_Relation, String]

  attr_accessor id(): String
  def id_changed?: () -> bool
  def id_change: () -> [ String?, String? ]
  def id_will_change!: () -> void
  def id_was: () -> String?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[String?]?
  def id_previously_was: () -> String?
  def id_before_last_save: () -> String?
  def id_change_to_be_saved: () -> Array[String?]?
  def id_in_database: () -> String?
  def saved_change_to_id: () -> Array[String?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor artist_id(): String
  def artist_id_changed?: () -> bool
  def artist_id_change: () -> [ String?, String? ]
  def artist_id_will_change!: () -> void
  def artist_id_was: () -> String?
  def artist_id_previously_changed?: () -> bool
  def artist_id_previous_change: () -> Array[String?]?
  def artist_id_previously_was: () -> String?
  def artist_id_before_last_save: () -> String?
  def artist_id_change_to_be_saved: () -> Array[String?]?
  def artist_id_in_database: () -> String?
  def saved_change_to_artist_id: () -> Array[String?]?
  def saved_change_to_artist_id?: () -> bool
  def will_save_change_to_artist_id?: () -> bool
  def restore_artist_id!: () -> void
  def clear_artist_id_change: () -> void

  attr_accessor album_id(): String
  def album_id_changed?: () -> bool
  def album_id_change: () -> [ String?, String? ]
  def album_id_will_change!: () -> void
  def album_id_was: () -> String?
  def album_id_previously_changed?: () -> bool
  def album_id_previous_change: () -> Array[String?]?
  def album_id_previously_was: () -> String?
  def album_id_before_last_save: () -> String?
  def album_id_change_to_be_saved: () -> Array[String?]?
  def album_id_in_database: () -> String?
  def saved_change_to_album_id: () -> Array[String?]?
  def saved_change_to_album_id?: () -> bool
  def will_save_change_to_album_id?: () -> bool
  def restore_album_id!: () -> void
  def clear_album_id_change: () -> void

  def artist: () -> Artist
  def artist=: (Artist?) -> Artist?
  def reload_artist: () -> Artist?
  def build_artist: (untyped) -> Artist
  def create_artist: (untyped) -> Artist
  def create_artist!: (untyped) -> Artist
  def album: () -> Album
  def album=: (Album?) -> Album?
  def reload_album: () -> Album?
  def build_album: (untyped) -> Album
  def create_album: (untyped) -> Album
  def create_album!: (untyped) -> Album

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[ArtistHasAlbum, String]
    include Enumerable[ArtistHasAlbum]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[ArtistHasAlbum, String]
  end
end
