class Favorite < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Favorite, ActiveRecord_Relation, String]

  attr_accessor id(): String
  def id_changed?: () -> bool
  def id_change: () -> [ String?, String? ]
  def id_will_change!: () -> void
  def id_was: () -> String?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[String?]?
  def id_previously_was: () -> String?
  def id_before_last_save: () -> String?
  def id_change_to_be_saved: () -> Array[String?]?
  def id_in_database: () -> String?
  def saved_change_to_id: () -> Array[String?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor user_id(): String
  def user_id_changed?: () -> bool
  def user_id_change: () -> [ String?, String? ]
  def user_id_will_change!: () -> void
  def user_id_was: () -> String?
  def user_id_previously_changed?: () -> bool
  def user_id_previous_change: () -> Array[String?]?
  def user_id_previously_was: () -> String?
  def user_id_before_last_save: () -> String?
  def user_id_change_to_be_saved: () -> Array[String?]?
  def user_id_in_database: () -> String?
  def saved_change_to_user_id: () -> Array[String?]?
  def saved_change_to_user_id?: () -> bool
  def will_save_change_to_user_id?: () -> bool
  def restore_user_id!: () -> void
  def clear_user_id_change: () -> void

  attr_accessor favorable_id(): String
  def favorable_id_changed?: () -> bool
  def favorable_id_change: () -> [ String?, String? ]
  def favorable_id_will_change!: () -> void
  def favorable_id_was: () -> String?
  def favorable_id_previously_changed?: () -> bool
  def favorable_id_previous_change: () -> Array[String?]?
  def favorable_id_previously_was: () -> String?
  def favorable_id_before_last_save: () -> String?
  def favorable_id_change_to_be_saved: () -> Array[String?]?
  def favorable_id_in_database: () -> String?
  def saved_change_to_favorable_id: () -> Array[String?]?
  def saved_change_to_favorable_id?: () -> bool
  def will_save_change_to_favorable_id?: () -> bool
  def restore_favorable_id!: () -> void
  def clear_favorable_id_change: () -> void

  attr_accessor favorable_type(): String
  def favorable_type_changed?: () -> bool
  def favorable_type_change: () -> [ String?, String? ]
  def favorable_type_will_change!: () -> void
  def favorable_type_was: () -> String?
  def favorable_type_previously_changed?: () -> bool
  def favorable_type_previous_change: () -> Array[String?]?
  def favorable_type_previously_was: () -> String?
  def favorable_type_before_last_save: () -> String?
  def favorable_type_change_to_be_saved: () -> Array[String?]?
  def favorable_type_in_database: () -> String?
  def saved_change_to_favorable_type: () -> Array[String?]?
  def saved_change_to_favorable_type?: () -> bool
  def will_save_change_to_favorable_type?: () -> bool
  def restore_favorable_type!: () -> void
  def clear_favorable_type_change: () -> void

  def favorable: () -> untyped
  def favorable=: (untyped?) -> untyped?
  def reload_favorable: () -> untyped?
  def user: () -> User
  def user=: (User?) -> User?
  def reload_user: () -> User?
  def build_user: (untyped) -> User
  def create_user: (untyped) -> User
  def create_user!: (untyped) -> User

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Favorite, String]
    include Enumerable[Favorite]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Favorite, String]
  end
end
