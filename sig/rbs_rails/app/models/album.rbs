class Album < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Album, ActiveRecord_Relation, String]

  attr_accessor id(): String
  def id_changed?: () -> bool
  def id_change: () -> [ String?, String? ]
  def id_will_change!: () -> void
  def id_was: () -> String?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[String?]?
  def id_previously_was: () -> String?
  def id_before_last_save: () -> String?
  def id_change_to_be_saved: () -> Array[String?]?
  def id_in_database: () -> String?
  def saved_change_to_id: () -> Array[String?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor status(): String
  def status_changed?: () -> bool
  def status_change: () -> [ String?, String? ]
  def status_will_change!: () -> void
  def status_was: () -> String?
  def status_previously_changed?: () -> bool
  def status_previous_change: () -> Array[String?]?
  def status_previously_was: () -> String?
  def status_before_last_save: () -> String?
  def status_change_to_be_saved: () -> Array[String?]?
  def status_in_database: () -> String?
  def saved_change_to_status: () -> Array[String?]?
  def saved_change_to_status?: () -> bool
  def will_save_change_to_status?: () -> bool
  def restore_status!: () -> void
  def clear_status_change: () -> void

  attr_accessor release_date(): ActiveSupport::TimeWithZone
  def release_date_changed?: () -> bool
  def release_date_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def release_date_will_change!: () -> void
  def release_date_was: () -> ActiveSupport::TimeWithZone?
  def release_date_previously_changed?: () -> bool
  def release_date_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def release_date_previously_was: () -> ActiveSupport::TimeWithZone?
  def release_date_before_last_save: () -> ActiveSupport::TimeWithZone?
  def release_date_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def release_date_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_release_date: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_release_date?: () -> bool
  def will_save_change_to_release_date?: () -> bool
  def restore_release_date!: () -> void
  def clear_release_date_change: () -> void

  attr_accessor upc(): String
  def upc_changed?: () -> bool
  def upc_change: () -> [ String?, String? ]
  def upc_will_change!: () -> void
  def upc_was: () -> String?
  def upc_previously_changed?: () -> bool
  def upc_previous_change: () -> Array[String?]?
  def upc_previously_was: () -> String?
  def upc_before_last_save: () -> String?
  def upc_change_to_be_saved: () -> Array[String?]?
  def upc_in_database: () -> String?
  def saved_change_to_upc: () -> Array[String?]?
  def saved_change_to_upc?: () -> bool
  def will_save_change_to_upc?: () -> bool
  def restore_upc!: () -> void
  def clear_upc_change: () -> void

  attr_accessor total_tracks(): Integer
  def total_tracks_changed?: () -> bool
  def total_tracks_change: () -> [ Integer?, Integer? ]
  def total_tracks_will_change!: () -> void
  def total_tracks_was: () -> Integer?
  def total_tracks_previously_changed?: () -> bool
  def total_tracks_previous_change: () -> Array[Integer?]?
  def total_tracks_previously_was: () -> Integer?
  def total_tracks_before_last_save: () -> Integer?
  def total_tracks_change_to_be_saved: () -> Array[Integer?]?
  def total_tracks_in_database: () -> Integer?
  def saved_change_to_total_tracks: () -> Array[Integer?]?
  def saved_change_to_total_tracks?: () -> bool
  def will_save_change_to_total_tracks?: () -> bool
  def restore_total_tracks!: () -> void
  def clear_total_tracks_change: () -> void

  attr_accessor popularity(): Integer
  def popularity_changed?: () -> bool
  def popularity_change: () -> [ Integer?, Integer? ]
  def popularity_will_change!: () -> void
  def popularity_was: () -> Integer?
  def popularity_previously_changed?: () -> bool
  def popularity_previous_change: () -> Array[Integer?]?
  def popularity_previously_was: () -> Integer?
  def popularity_before_last_save: () -> Integer?
  def popularity_change_to_be_saved: () -> Array[Integer?]?
  def popularity_in_database: () -> Integer?
  def saved_change_to_popularity: () -> Array[Integer?]?
  def saved_change_to_popularity?: () -> bool
  def will_save_change_to_popularity?: () -> bool
  def restore_popularity!: () -> void
  def clear_popularity_change: () -> void

  attr_accessor pv(): Integer
  def pv_changed?: () -> bool
  def pv_change: () -> [ Integer?, Integer? ]
  def pv_will_change!: () -> void
  def pv_was: () -> Integer?
  def pv_previously_changed?: () -> bool
  def pv_previous_change: () -> Array[Integer?]?
  def pv_previously_was: () -> Integer?
  def pv_before_last_save: () -> Integer?
  def pv_change_to_be_saved: () -> Array[Integer?]?
  def pv_in_database: () -> Integer?
  def saved_change_to_pv: () -> Array[Integer?]?
  def saved_change_to_pv?: () -> bool
  def will_save_change_to_pv?: () -> bool
  def restore_pv!: () -> void
  def clear_pv_change: () -> void

  def artist_has_albums: () -> ArtistHasAlbum::ActiveRecord_Associations_CollectionProxy
  def artist_has_albums=: (ArtistHasAlbum::ActiveRecord_Associations_CollectionProxy | Array[ArtistHasAlbum]) -> (ArtistHasAlbum::ActiveRecord_Associations_CollectionProxy | Array[ArtistHasAlbum])
  def artist_has_album_ids: () -> Array[Integer]
  def artist_has_album_ids=: (Array[Integer]) -> Array[Integer]
  def artists: () -> Artist::ActiveRecord_Associations_CollectionProxy
  def artists=: (Artist::ActiveRecord_Associations_CollectionProxy | Array[Artist]) -> (Artist::ActiveRecord_Associations_CollectionProxy | Array[Artist])
  def artist_ids: () -> Array[Integer]
  def artist_ids=: (Array[Integer]) -> Array[Integer]
  def album_has_tracks: () -> AlbumHasTrack::ActiveRecord_Associations_CollectionProxy
  def album_has_tracks=: (AlbumHasTrack::ActiveRecord_Associations_CollectionProxy | Array[AlbumHasTrack]) -> (AlbumHasTrack::ActiveRecord_Associations_CollectionProxy | Array[AlbumHasTrack])
  def album_has_track_ids: () -> Array[Integer]
  def album_has_track_ids=: (Array[Integer]) -> Array[Integer]
  def tracks: () -> Track::ActiveRecord_Associations_CollectionProxy
  def tracks=: (Track::ActiveRecord_Associations_CollectionProxy | Array[Track]) -> (Track::ActiveRecord_Associations_CollectionProxy | Array[Track])
  def track_ids: () -> Array[Integer]
  def track_ids=: (Array[Integer]) -> Array[Integer]
  def favorites: () -> Favorite::ActiveRecord_Associations_CollectionProxy
  def favorites=: (Favorite::ActiveRecord_Associations_CollectionProxy | Array[Favorite]) -> (Favorite::ActiveRecord_Associations_CollectionProxy | Array[Favorite])
  def favorite_ids: () -> Array[Integer]
  def favorite_ids=: (Array[Integer]) -> Array[Integer]
  def apple_music_album: () -> AppleMusicAlbum?
  def apple_music_album=: (AppleMusicAlbum?) -> AppleMusicAlbum?
  def build_apple_music_album: (untyped) -> AppleMusicAlbum
  def create_apple_music_album: (untyped) -> AppleMusicAlbum
  def create_apple_music_album!: (untyped) -> AppleMusicAlbum
  def reload_apple_music_album: () -> AppleMusicAlbum?

  def pending!: () -> bool
  def pending?: () -> bool
  def active!: () -> bool
  def active?: () -> bool
  def ignore!: () -> bool
  def ignore?: () -> bool
  def self.pending: () -> ActiveRecord_Relation
  def self.active: () -> ActiveRecord_Relation
  def self.ignore: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def pending: () -> ActiveRecord_Relation

    def active: () -> ActiveRecord_Relation

    def ignore: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Album, String]
    include Enumerable[Album]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Album, String]
  end
end
