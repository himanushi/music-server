class Playlist < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Playlist, ActiveRecord_Relation, String]

  attr_accessor id(): String
  def id_changed?: () -> bool
  def id_change: () -> [ String?, String? ]
  def id_will_change!: () -> void
  def id_was: () -> String?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[String?]?
  def id_previously_was: () -> String?
  def id_before_last_save: () -> String?
  def id_change_to_be_saved: () -> Array[String?]?
  def id_in_database: () -> String?
  def saved_change_to_id: () -> Array[String?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor track_id(): String?
  def track_id_changed?: () -> bool
  def track_id_change: () -> [ String?, String? ]
  def track_id_will_change!: () -> void
  def track_id_was: () -> String?
  def track_id_previously_changed?: () -> bool
  def track_id_previous_change: () -> Array[String?]?
  def track_id_previously_was: () -> String?
  def track_id_before_last_save: () -> String?
  def track_id_change_to_be_saved: () -> Array[String?]?
  def track_id_in_database: () -> String?
  def saved_change_to_track_id: () -> Array[String?]?
  def saved_change_to_track_id?: () -> bool
  def will_save_change_to_track_id?: () -> bool
  def restore_track_id!: () -> void
  def clear_track_id_change: () -> void

  attr_accessor user_id(): String
  def user_id_changed?: () -> bool
  def user_id_change: () -> [ String?, String? ]
  def user_id_will_change!: () -> void
  def user_id_was: () -> String?
  def user_id_previously_changed?: () -> bool
  def user_id_previous_change: () -> Array[String?]?
  def user_id_previously_was: () -> String?
  def user_id_before_last_save: () -> String?
  def user_id_change_to_be_saved: () -> Array[String?]?
  def user_id_in_database: () -> String?
  def saved_change_to_user_id: () -> Array[String?]?
  def saved_change_to_user_id?: () -> bool
  def will_save_change_to_user_id?: () -> bool
  def restore_user_id!: () -> void
  def clear_user_id_change: () -> void

  attr_accessor name(): String
  def name_changed?: () -> bool
  def name_change: () -> [ String?, String? ]
  def name_will_change!: () -> void
  def name_was: () -> String?
  def name_previously_changed?: () -> bool
  def name_previous_change: () -> Array[String?]?
  def name_previously_was: () -> String?
  def name_before_last_save: () -> String?
  def name_change_to_be_saved: () -> Array[String?]?
  def name_in_database: () -> String?
  def saved_change_to_name: () -> Array[String?]?
  def saved_change_to_name?: () -> bool
  def will_save_change_to_name?: () -> bool
  def restore_name!: () -> void
  def clear_name_change: () -> void

  attr_accessor description(): String?
  def description_changed?: () -> bool
  def description_change: () -> [ String?, String? ]
  def description_will_change!: () -> void
  def description_was: () -> String?
  def description_previously_changed?: () -> bool
  def description_previous_change: () -> Array[String?]?
  def description_previously_was: () -> String?
  def description_before_last_save: () -> String?
  def description_change_to_be_saved: () -> Array[String?]?
  def description_in_database: () -> String?
  def saved_change_to_description: () -> Array[String?]?
  def saved_change_to_description?: () -> bool
  def will_save_change_to_description?: () -> bool
  def restore_description!: () -> void
  def clear_description_change: () -> void

  attr_accessor public_type(): String
  def public_type_changed?: () -> bool
  def public_type_change: () -> [ String?, String? ]
  def public_type_will_change!: () -> void
  def public_type_was: () -> String?
  def public_type_previously_changed?: () -> bool
  def public_type_previous_change: () -> Array[String?]?
  def public_type_previously_was: () -> String?
  def public_type_before_last_save: () -> String?
  def public_type_change_to_be_saved: () -> Array[String?]?
  def public_type_in_database: () -> String?
  def saved_change_to_public_type: () -> Array[String?]?
  def saved_change_to_public_type?: () -> bool
  def will_save_change_to_public_type?: () -> bool
  def restore_public_type!: () -> void
  def clear_public_type_change: () -> void

  attr_accessor popularity(): Integer
  def popularity_changed?: () -> bool
  def popularity_change: () -> [ Integer?, Integer? ]
  def popularity_will_change!: () -> void
  def popularity_was: () -> Integer?
  def popularity_previously_changed?: () -> bool
  def popularity_previous_change: () -> Array[Integer?]?
  def popularity_previously_was: () -> Integer?
  def popularity_before_last_save: () -> Integer?
  def popularity_change_to_be_saved: () -> Array[Integer?]?
  def popularity_in_database: () -> Integer?
  def saved_change_to_popularity: () -> Array[Integer?]?
  def saved_change_to_popularity?: () -> bool
  def will_save_change_to_popularity?: () -> bool
  def restore_popularity!: () -> void
  def clear_popularity_change: () -> void

  attr_accessor pv(): Integer
  def pv_changed?: () -> bool
  def pv_change: () -> [ Integer?, Integer? ]
  def pv_will_change!: () -> void
  def pv_was: () -> Integer?
  def pv_previously_changed?: () -> bool
  def pv_previous_change: () -> Array[Integer?]?
  def pv_previously_was: () -> Integer?
  def pv_before_last_save: () -> Integer?
  def pv_change_to_be_saved: () -> Array[Integer?]?
  def pv_in_database: () -> Integer?
  def saved_change_to_pv: () -> Array[Integer?]?
  def saved_change_to_pv?: () -> bool
  def will_save_change_to_pv?: () -> bool
  def restore_pv!: () -> void
  def clear_pv_change: () -> void

  def playlist_items: () -> PlaylistItem::ActiveRecord_Associations_CollectionProxy
  def playlist_items=: (PlaylistItem::ActiveRecord_Associations_CollectionProxy | Array[PlaylistItem]) -> (PlaylistItem::ActiveRecord_Associations_CollectionProxy | Array[PlaylistItem])
  def playlist_item_ids: () -> Array[Integer]
  def playlist_item_ids=: (Array[Integer]) -> Array[Integer]
  def favorites: () -> Favorite::ActiveRecord_Associations_CollectionProxy
  def favorites=: (Favorite::ActiveRecord_Associations_CollectionProxy | Array[Favorite]) -> (Favorite::ActiveRecord_Associations_CollectionProxy | Array[Favorite])
  def favorite_ids: () -> Array[Integer]
  def favorite_ids=: (Array[Integer]) -> Array[Integer]

  def user: () -> User
  def user=: (User?) -> User?
  def reload_user: () -> User?
  def build_user: (untyped) -> User
  def create_user: (untyped) -> User
  def create_user!: (untyped) -> User
  def track: () -> Track
  def track=: (Track?) -> Track?
  def reload_track: () -> Track?
  def build_track: (untyped) -> Track
  def create_track: (untyped) -> Track
  def create_track!: (untyped) -> Track

  def public_type_non_open!: () -> bool
  def public_type_non_open?: () -> bool
  def public_type_open!: () -> bool
  def public_type_open?: () -> bool
  def public_type_anonymous_open!: () -> bool
  def public_type_anonymous_open?: () -> bool
  def self.public_type_non_open: () -> ActiveRecord_Relation
  def self.public_type_open: () -> ActiveRecord_Relation
  def self.public_type_anonymous_open: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def public_type_non_open: () -> ActiveRecord_Relation

    def public_type_open: () -> ActiveRecord_Relation

    def public_type_anonymous_open: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Playlist, String]
    include Enumerable[Playlist]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Playlist, String]
  end
end
