class Radio < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Radio, ActiveRecord_Relation, String]

  attr_accessor id(): String
  def id_changed?: () -> bool
  def id_change: () -> [ String?, String? ]
  def id_will_change!: () -> void
  def id_was: () -> String?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[String?]?
  def id_previously_was: () -> String?
  def id_before_last_save: () -> String?
  def id_change_to_be_saved: () -> Array[String?]?
  def id_in_database: () -> String?
  def saved_change_to_id: () -> Array[String?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor playlist_id(): String
  def playlist_id_changed?: () -> bool
  def playlist_id_change: () -> [ String?, String? ]
  def playlist_id_will_change!: () -> void
  def playlist_id_was: () -> String?
  def playlist_id_previously_changed?: () -> bool
  def playlist_id_previous_change: () -> Array[String?]?
  def playlist_id_previously_was: () -> String?
  def playlist_id_before_last_save: () -> String?
  def playlist_id_change_to_be_saved: () -> Array[String?]?
  def playlist_id_in_database: () -> String?
  def saved_change_to_playlist_id: () -> Array[String?]?
  def saved_change_to_playlist_id?: () -> bool
  def will_save_change_to_playlist_id?: () -> bool
  def restore_playlist_id!: () -> void
  def clear_playlist_id_change: () -> void

  attr_accessor start_datetime(): ActiveSupport::TimeWithZone?
  def start_datetime_changed?: () -> bool
  def start_datetime_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def start_datetime_will_change!: () -> void
  def start_datetime_was: () -> ActiveSupport::TimeWithZone?
  def start_datetime_previously_changed?: () -> bool
  def start_datetime_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def start_datetime_previously_was: () -> ActiveSupport::TimeWithZone?
  def start_datetime_before_last_save: () -> ActiveSupport::TimeWithZone?
  def start_datetime_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def start_datetime_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_start_datetime: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_start_datetime?: () -> bool
  def will_save_change_to_start_datetime?: () -> bool
  def restore_start_datetime!: () -> void
  def clear_start_datetime_change: () -> void

  attr_accessor random(): bool
  def random_changed?: () -> bool
  def random_change: () -> [ bool?, bool? ]
  def random_will_change!: () -> void
  def random_was: () -> bool?
  def random_previously_changed?: () -> bool
  def random_previous_change: () -> Array[bool?]?
  def random_previously_was: () -> bool?
  def random_before_last_save: () -> bool?
  def random_change_to_be_saved: () -> Array[bool?]?
  def random_in_database: () -> bool?
  def saved_change_to_random: () -> Array[bool?]?
  def saved_change_to_random?: () -> bool
  def will_save_change_to_random?: () -> bool
  def restore_random!: () -> void
  def clear_random_change: () -> void
  attr_accessor random?(): bool

  attr_accessor popularity(): Integer
  def popularity_changed?: () -> bool
  def popularity_change: () -> [ Integer?, Integer? ]
  def popularity_will_change!: () -> void
  def popularity_was: () -> Integer?
  def popularity_previously_changed?: () -> bool
  def popularity_previous_change: () -> Array[Integer?]?
  def popularity_previously_was: () -> Integer?
  def popularity_before_last_save: () -> Integer?
  def popularity_change_to_be_saved: () -> Array[Integer?]?
  def popularity_in_database: () -> Integer?
  def saved_change_to_popularity: () -> Array[Integer?]?
  def saved_change_to_popularity?: () -> bool
  def will_save_change_to_popularity?: () -> bool
  def restore_popularity!: () -> void
  def clear_popularity_change: () -> void

  attr_accessor pv(): Integer
  def pv_changed?: () -> bool
  def pv_change: () -> [ Integer?, Integer? ]
  def pv_will_change!: () -> void
  def pv_was: () -> Integer?
  def pv_previously_changed?: () -> bool
  def pv_previous_change: () -> Array[Integer?]?
  def pv_previously_was: () -> Integer?
  def pv_before_last_save: () -> Integer?
  def pv_change_to_be_saved: () -> Array[Integer?]?
  def pv_in_database: () -> Integer?
  def saved_change_to_pv: () -> Array[Integer?]?
  def saved_change_to_pv?: () -> bool
  def will_save_change_to_pv?: () -> bool
  def restore_pv!: () -> void
  def clear_pv_change: () -> void

  def radio_items: () -> RadioItem::ActiveRecord_Associations_CollectionProxy
  def radio_items=: (RadioItem::ActiveRecord_Associations_CollectionProxy | Array[RadioItem]) -> (RadioItem::ActiveRecord_Associations_CollectionProxy | Array[RadioItem])
  def radio_item_ids: () -> Array[Integer]
  def radio_item_ids=: (Array[Integer]) -> Array[Integer]
  def favorites: () -> Favorite::ActiveRecord_Associations_CollectionProxy
  def favorites=: (Favorite::ActiveRecord_Associations_CollectionProxy | Array[Favorite]) -> (Favorite::ActiveRecord_Associations_CollectionProxy | Array[Favorite])
  def favorite_ids: () -> Array[Integer]
  def favorite_ids=: (Array[Integer]) -> Array[Integer]

  def playlist: () -> Playlist
  def playlist=: (Playlist?) -> Playlist?
  def reload_playlist: () -> Playlist?
  def build_playlist: (untyped) -> Playlist
  def create_playlist: (untyped) -> Playlist
  def create_playlist!: (untyped) -> Playlist

  def self.include_playlists: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def include_playlists: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Radio, String]
    include Enumerable[Radio]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Radio, String]
  end
end
