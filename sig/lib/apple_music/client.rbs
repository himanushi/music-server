module AppleMusic
  class Client
    ENDPOINT: ::String

    VERSION: ::String

    LOCALE: ::String

    attr_reader locale: ::String

    attr_reader version: ::String

    # settings = [
    #   { path: "/album", status_code: 200, headers: {}, body: {} },
    #   { path: "/artist", status_code: 404, headers: {}, body: {} },
    # ]
    type stub_settings = ::Array[{
      path: ::String?,
      status_code: ::Integer?,
      headers: ::Hash[untyped, untyped]?,
      body: ::Hash[untyped, untyped]?
    }]

    def self.stub: (?stub_settings settings) -> void

    def self.stub_client: () -> ::Faraday::Connection

    def self.catalog_url: () -> ::String

    def initialize: (?locale: ::String locale, ?version: ::String version) -> void

    def client: () -> ::Faraday::Connection

    def catalog_url: () -> ::String

    # レスポンス専用に namespase 分けとく
    module Response
      type artist_attributes = {
        "name" => ::String,
        "genreNames" => ::Array[::String],
        "url" => ::String
      }

      type artwork_attributes = {
        "width" => ::Integer,
        "height" => ::Integer,
        "url" => ::String,
        "bgColor" => ::String,
        "textColor1" => ::String,
        "textColor2" => ::String,
        "textColor3" => ::String,
        "textColor4" => ::String
      }

      type album_attributes = {
        "artwork" => artwork_attributes,
        "artistName" => ::String,
        "isSingle" => bool,
        "url" => ::String,
        "isComplete" => bool,
        "genreNames" => ::Array[::String],
        "trackCount" => ::Integer,
        "isMasteredForItunes" => bool,
        "releaseDate" => ::String,
        "name" => ::String,
        "recordLabel" => ::String,
        "copyright" => ::String,
        # iTunes の場合はキー自体が存在しない
        "playParams" => {
          "id" => ::String,
          "kind" => "album"
        } | nil,
        "isCompilation" => bool
      }

      type track_attributes = {
        "previews" => ::Array[{
          "url" => ::String
        }],
        "artwork" => artwork_attributes,
        "artistName" => ::String,
        "url" => ::String,
        "discNumber" => ::Integer,
        "genreNames" => ::Array[::String],
        "durationInMillis" => ::Integer,
        "releaseDate" => ::String,
        "name" => ::String,
        "isrc" => ::String,
        "hasLyrics" => bool,
        "albumName" => ::String,
        # iTunes またはアルバム一括購入特典曲の場合はキー自体が存在しない
        "playParams" => {
          "id" => ::String,
          "kind" => "song"
        } | nil,
        "trackNumber" => ::Integer,
        "composerName" => ::String
      }

      type simple_artist = {
        "id" => ::String,
        "type" => "artists",
        "href" => ::String,
        "attributes" => artist_attributes
      }

      type artist = {
        "relationships" => {
          "albums" => {
            "next" => ::String | nil,
            "href" => ::String,
            "data" => ::Array[simple_album]
          }
        }
      } & simple_artist

      type artists = {
        "next" => ::String | nil,
        "data" => Array[artist]
      }

      type simple_album = {
        "id" => ::String,
        "type" => "albums",
        "href" => ::String,
        "attributes" => album_attributes
      }

      type album = {
        "relationships" => {
          "tracks" => {
            "next" => ::String | nil,
            "href" => ::String,
            "data" => ::Array[simple_track]
          },
          "artists" => {
            "next" => ::String | nil,
            "href" => ::String,
            "data" => ::Array[{
              "id" => ::String,
              "type" => "artists",
              "href" => ::String
            }]
          }
        }
      } & simple_album

      type albums = {
        "next" => ::String | nil,
        "data" => Array[album]
      }

      type simple_track = {
        "id" => ::String,
        "type" => "songs" | "music-videos",
        "href" => ::String,
        "attributes" => track_attributes
      }

      type track = {
        "relationships" => {
          "artists" => {
            "next" => ::String | nil,
            "href" => ::String,
            "data" => ::Array[simple_artist]
          },
          "albums" => {
            "next" => ::String | nil,
            "href" => ::String,
            "data" => ::Array[simple_album]
          }
        }
      } & simple_track

      type tracks = {
        "next" => ::String | nil,
        "data" => Array[track]
      }
    end

    # @repeat は next を何回実行するか判定する
    def get: (::String url, ?::Hash[::String, ::String] params) -> untyped

    def index: (?::Hash[untyped, untyped] params) -> untyped

    def get_artist: (String apple_music_id, ?::Hash[untyped, untyped] params) -> Response::artists

    def index_artists: (String name) -> Response::artists

    def get_artist_albums: (String apple_music_id, ?::Hash[untyped, untyped] params) -> Response::albums

    def get_artist_tracks: (String apple_music_id, ?::Hash[untyped, untyped] params, ?repeat: Integer? repeat) -> Response::tracks

    def get_album: (String apple_music_id, ?::Hash[untyped, untyped] params) -> Response::albums

    def get_track: (String apple_music_id, ?::Hash[untyped, untyped] params) -> Response::tracks

    def get_track_by_isrc: (String isrc) -> Response::tracks

    def result: (untyped response) -> untyped
  end
end
