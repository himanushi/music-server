class AppleMusicArtist < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[AppleMusicArtist, AppleMusicArtist::ActiveRecord_Relation]

  attr_accessor id (): String
  attr_accessor created_at (): Time
  attr_accessor updated_at (): Time
  attr_accessor artist_id (): String
  attr_accessor apple_music_id (): String
  attr_accessor name (): String
  attr_accessor status (): String # enum なので Integer ではなく String


  def artist: () -> Artist
  def pending!: () -> bool
  def pending?: () -> bool
  def active!: () -> bool
  def active?: () -> bool
  def ignore!: () -> bool
  def ignore?: () -> bool
  def self.pending: () -> AppleMusicArtist::ActiveRecord_Relation
  def self.active: () -> AppleMusicArtist::ActiveRecord_Relation
  def self.ignore: () -> AppleMusicArtist::ActiveRecord_Relation

  # rbs prototype rb app/models/apple_music_artist.rb

  include MusicServiceCreatable
  extend MusicServiceCreatable::ClassMethods

  def self.music_service_id_name: () -> "apple_music_id"

  def self.mapping: ({
    "id" => String,
    "attributes" => {
      "name" => String
    }
  } data) -> { artist_id: String, apple_music_id: String, name: String, status: String }

  def self.create_by_name: (String name) -> Array[instance]

  def self.create_by_music_service_id: (String apple_music_id) -> (nil | instance)

  def music_service_id: () -> String

  def create_albums: () -> Array[AppleMusicAlbum]

  def artwork_l: () -> Artwork

  def artwork_m: () -> Artwork
end

class AppleMusicArtist::ActiveRecord_Relation < ::ActiveRecord::Relation
  include _ActiveRecord_Relation[AppleMusicArtist]
  include Enumerable[AppleMusicArtist, self]
  def pending: () -> AppleMusicArtist::ActiveRecord_Relation
  def active: () -> AppleMusicArtist::ActiveRecord_Relation
  def ignore: () -> AppleMusicArtist::ActiveRecord_Relation

end

class AppleMusicArtist::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
end
