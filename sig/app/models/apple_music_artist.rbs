class AppleMusicArtist < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[AppleMusicArtist, AppleMusicArtist::ActiveRecord_Relation]

  attr_accessor id (): String
  def id_changed?: () -> bool
  def id_change: () -> [String?, String?]
  def id_will_change!: () -> void
  def id_was: () -> String?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[String?]?
  def id_previously_was: () -> String?
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor created_at (): Time
  def created_at_changed?: () -> bool
  def created_at_change: () -> [Time?, Time?]
  def created_at_will_change!: () -> void
  def created_at_was: () -> Time?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[Time?]?
  def created_at_previously_was: () -> Time?
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at (): Time
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [Time?, Time?]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> Time?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[Time?]?
  def updated_at_previously_was: () -> Time?
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor artist_id (): String
  def artist_id_changed?: () -> bool
  def artist_id_change: () -> [String?, String?]
  def artist_id_will_change!: () -> void
  def artist_id_was: () -> String?
  def artist_id_previously_changed?: () -> bool
  def artist_id_previous_change: () -> Array[String?]?
  def artist_id_previously_was: () -> String?
  def restore_artist_id!: () -> void
  def clear_artist_id_change: () -> void

  attr_accessor apple_music_id (): String
  def apple_music_id_changed?: () -> bool
  def apple_music_id_change: () -> [String?, String?]
  def apple_music_id_will_change!: () -> void
  def apple_music_id_was: () -> String?
  def apple_music_id_previously_changed?: () -> bool
  def apple_music_id_previous_change: () -> Array[String?]?
  def apple_music_id_previously_was: () -> String?
  def restore_apple_music_id!: () -> void
  def clear_apple_music_id_change: () -> void

  attr_accessor name (): String
  def name_changed?: () -> bool
  def name_change: () -> [String?, String?]
  def name_will_change!: () -> void
  def name_was: () -> String?
  def name_previously_changed?: () -> bool
  def name_previous_change: () -> Array[String?]?
  def name_previously_was: () -> String?
  def restore_name!: () -> void
  def clear_name_change: () -> void

  attr_accessor status (): String
  def status_changed?: () -> bool
  def status_change: () -> [String?, String?]
  def status_will_change!: () -> void
  def status_was: () -> String?
  def status_previously_changed?: () -> bool
  def status_previous_change: () -> Array[String?]?
  def status_previously_was: () -> String?
  def restore_status!: () -> void
  def clear_status_change: () -> void



  def artist: () -> Artist
  def pending!: () -> bool
  def pending?: () -> bool
  def active!: () -> bool
  def active?: () -> bool
  def ignore!: () -> bool
  def ignore?: () -> bool
  def self.pending: () -> AppleMusicArtist::ActiveRecord_Relation
  def self.active: () -> AppleMusicArtist::ActiveRecord_Relation
  def self.ignore: () -> AppleMusicArtist::ActiveRecord_Relation

  # rbs prototype rb app/models/apple_music_artist.rb

  include MusicServiceCreatable
  extend MusicServiceCreatable::ClassMethods

  def self.music_service_id_name: () -> "apple_music_id"

  def self.mapping: ({
    "id" => String,
    "attributes" => {
      "name" => String
    }
  } data) -> { artist_id: String, apple_music_id: String, name: String, status: String }

  def self.create_by_name: (String name) -> Array[instance]

  def self.create_by_music_service_id: (String apple_music_id) -> (nil | instance)

  def music_service_id: () -> String

  def create_albums: () -> Array[AppleMusicAlbum]

  def artwork_l: () -> Artwork

  def artwork_m: () -> Artwork
end

class AppleMusicArtist::ActiveRecord_Relation < ActiveRecord::Relation
  include _ActiveRecord_Relation[AppleMusicArtist]
  include Enumerable[AppleMusicArtist, self]
  def pending: () -> AppleMusicArtist::ActiveRecord_Relation
  def active: () -> AppleMusicArtist::ActiveRecord_Relation
  def ignore: () -> AppleMusicArtist::ActiveRecord_Relation

end

class AppleMusicArtist::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include AppleMusicArtist::ActiveRecord_Relation
end
