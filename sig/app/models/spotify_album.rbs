class SpotifyAlbum < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[SpotifyAlbum, SpotifyAlbum::ActiveRecord_Relation]

  attr_accessor id (): String
  def id_changed?: () -> bool
  def id_change: () -> [String?, String?]
  def id_will_change!: () -> void
  def id_was: () -> String?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[String?]?
  def id_previously_was: () -> String?
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor created_at (): Time
  def created_at_changed?: () -> bool
  def created_at_change: () -> [Time?, Time?]
  def created_at_will_change!: () -> void
  def created_at_was: () -> Time?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[Time?]?
  def created_at_previously_was: () -> Time?
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at (): Time
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [Time?, Time?]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> Time?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[Time?]?
  def updated_at_previously_was: () -> Time?
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor album_id (): String
  def album_id_changed?: () -> bool
  def album_id_change: () -> [String?, String?]
  def album_id_will_change!: () -> void
  def album_id_was: () -> String?
  def album_id_previously_changed?: () -> bool
  def album_id_previous_change: () -> Array[String?]?
  def album_id_previously_was: () -> String?
  def restore_album_id!: () -> void
  def clear_album_id_change: () -> void

  attr_accessor spotify_id (): String
  def spotify_id_changed?: () -> bool
  def spotify_id_change: () -> [String?, String?]
  def spotify_id_will_change!: () -> void
  def spotify_id_was: () -> String?
  def spotify_id_previously_changed?: () -> bool
  def spotify_id_previous_change: () -> Array[String?]?
  def spotify_id_previously_was: () -> String?
  def restore_spotify_id!: () -> void
  def clear_spotify_id_change: () -> void

  attr_accessor name (): String
  def name_changed?: () -> bool
  def name_change: () -> [String?, String?]
  def name_will_change!: () -> void
  def name_was: () -> String?
  def name_previously_changed?: () -> bool
  def name_previous_change: () -> Array[String?]?
  def name_previously_was: () -> String?
  def restore_name!: () -> void
  def clear_name_change: () -> void

  attr_accessor status (): String
  def status_changed?: () -> bool
  def status_change: () -> [String?, String?]
  def status_will_change!: () -> void
  def status_was: () -> String?
  def status_previously_changed?: () -> bool
  def status_previous_change: () -> Array[String?]?
  def status_previously_was: () -> String?
  def restore_status!: () -> void
  def clear_status_change: () -> void

  attr_accessor release_date (): Time
  def release_date_changed?: () -> bool
  def release_date_change: () -> [Time?, Time?]
  def release_date_will_change!: () -> void
  def release_date_was: () -> Time?
  def release_date_previously_changed?: () -> bool
  def release_date_previous_change: () -> Array[Time?]?
  def release_date_previously_was: () -> Time?
  def restore_release_date!: () -> void
  def clear_release_date_change: () -> void

  attr_accessor total_tracks (): Integer
  def total_tracks_changed?: () -> bool
  def total_tracks_change: () -> [Integer?, Integer?]
  def total_tracks_will_change!: () -> void
  def total_tracks_was: () -> Integer?
  def total_tracks_previously_changed?: () -> bool
  def total_tracks_previous_change: () -> Array[Integer?]?
  def total_tracks_previously_was: () -> Integer?
  def restore_total_tracks!: () -> void
  def clear_total_tracks_change: () -> void

  attr_accessor record_label (): String
  def record_label_changed?: () -> bool
  def record_label_change: () -> [String?, String?]
  def record_label_will_change!: () -> void
  def record_label_was: () -> String?
  def record_label_previously_changed?: () -> bool
  def record_label_previous_change: () -> Array[String?]?
  def record_label_previously_was: () -> String?
  def restore_record_label!: () -> void
  def clear_record_label_change: () -> void

  attr_accessor copyright (): String
  def copyright_changed?: () -> bool
  def copyright_change: () -> [String?, String?]
  def copyright_will_change!: () -> void
  def copyright_was: () -> String?
  def copyright_previously_changed?: () -> bool
  def copyright_previous_change: () -> Array[String?]?
  def copyright_previously_was: () -> String?
  def restore_copyright!: () -> void
  def clear_copyright_change: () -> void

  attr_accessor upc (): String?
  def upc_changed?: () -> bool
  def upc_change: () -> [String?, String?]
  def upc_will_change!: () -> void
  def upc_was: () -> String?
  def upc_previously_changed?: () -> bool
  def upc_previous_change: () -> Array[String?]?
  def upc_previously_was: () -> String?
  def restore_upc!: () -> void
  def clear_upc_change: () -> void

  attr_accessor artwork_l_url (): String?
  def artwork_l_url_changed?: () -> bool
  def artwork_l_url_change: () -> [String?, String?]
  def artwork_l_url_will_change!: () -> void
  def artwork_l_url_was: () -> String?
  def artwork_l_url_previously_changed?: () -> bool
  def artwork_l_url_previous_change: () -> Array[String?]?
  def artwork_l_url_previously_was: () -> String?
  def restore_artwork_l_url!: () -> void
  def clear_artwork_l_url_change: () -> void

  attr_accessor artwork_l_width (): Integer?
  def artwork_l_width_changed?: () -> bool
  def artwork_l_width_change: () -> [Integer?, Integer?]
  def artwork_l_width_will_change!: () -> void
  def artwork_l_width_was: () -> Integer?
  def artwork_l_width_previously_changed?: () -> bool
  def artwork_l_width_previous_change: () -> Array[Integer?]?
  def artwork_l_width_previously_was: () -> Integer?
  def restore_artwork_l_width!: () -> void
  def clear_artwork_l_width_change: () -> void

  attr_accessor artwork_l_height (): Integer?
  def artwork_l_height_changed?: () -> bool
  def artwork_l_height_change: () -> [Integer?, Integer?]
  def artwork_l_height_will_change!: () -> void
  def artwork_l_height_was: () -> Integer?
  def artwork_l_height_previously_changed?: () -> bool
  def artwork_l_height_previous_change: () -> Array[Integer?]?
  def artwork_l_height_previously_was: () -> Integer?
  def restore_artwork_l_height!: () -> void
  def clear_artwork_l_height_change: () -> void

  attr_accessor artwork_m_url (): String?
  def artwork_m_url_changed?: () -> bool
  def artwork_m_url_change: () -> [String?, String?]
  def artwork_m_url_will_change!: () -> void
  def artwork_m_url_was: () -> String?
  def artwork_m_url_previously_changed?: () -> bool
  def artwork_m_url_previous_change: () -> Array[String?]?
  def artwork_m_url_previously_was: () -> String?
  def restore_artwork_m_url!: () -> void
  def clear_artwork_m_url_change: () -> void

  attr_accessor artwork_m_width (): Integer?
  def artwork_m_width_changed?: () -> bool
  def artwork_m_width_change: () -> [Integer?, Integer?]
  def artwork_m_width_will_change!: () -> void
  def artwork_m_width_was: () -> Integer?
  def artwork_m_width_previously_changed?: () -> bool
  def artwork_m_width_previous_change: () -> Array[Integer?]?
  def artwork_m_width_previously_was: () -> Integer?
  def restore_artwork_m_width!: () -> void
  def clear_artwork_m_width_change: () -> void

  attr_accessor artwork_m_height (): Integer?
  def artwork_m_height_changed?: () -> bool
  def artwork_m_height_change: () -> [Integer?, Integer?]
  def artwork_m_height_will_change!: () -> void
  def artwork_m_height_was: () -> Integer?
  def artwork_m_height_previously_changed?: () -> bool
  def artwork_m_height_previous_change: () -> Array[Integer?]?
  def artwork_m_height_previously_was: () -> Integer?
  def restore_artwork_m_height!: () -> void
  def clear_artwork_m_height_change: () -> void

  attr_accessor artwork_s_url (): String?
  def artwork_s_url_changed?: () -> bool
  def artwork_s_url_change: () -> [String?, String?]
  def artwork_s_url_will_change!: () -> void
  def artwork_s_url_was: () -> String?
  def artwork_s_url_previously_changed?: () -> bool
  def artwork_s_url_previous_change: () -> Array[String?]?
  def artwork_s_url_previously_was: () -> String?
  def restore_artwork_s_url!: () -> void
  def clear_artwork_s_url_change: () -> void

  attr_accessor artwork_s_width (): Integer?
  def artwork_s_width_changed?: () -> bool
  def artwork_s_width_change: () -> [Integer?, Integer?]
  def artwork_s_width_will_change!: () -> void
  def artwork_s_width_was: () -> Integer?
  def artwork_s_width_previously_changed?: () -> bool
  def artwork_s_width_previous_change: () -> Array[Integer?]?
  def artwork_s_width_previously_was: () -> Integer?
  def restore_artwork_s_width!: () -> void
  def clear_artwork_s_width_change: () -> void

  attr_accessor artwork_s_height (): Integer?
  def artwork_s_height_changed?: () -> bool
  def artwork_s_height_change: () -> [Integer?, Integer?]
  def artwork_s_height_will_change!: () -> void
  def artwork_s_height_was: () -> Integer?
  def artwork_s_height_previously_changed?: () -> bool
  def artwork_s_height_previous_change: () -> Array[Integer?]?
  def artwork_s_height_previously_was: () -> Integer?
  def restore_artwork_s_height!: () -> void
  def clear_artwork_s_height_change: () -> void

  attr_accessor popularity (): Integer
  def popularity_changed?: () -> bool
  def popularity_change: () -> [Integer?, Integer?]
  def popularity_will_change!: () -> void
  def popularity_was: () -> Integer?
  def popularity_previously_changed?: () -> bool
  def popularity_previous_change: () -> Array[Integer?]?
  def popularity_previously_was: () -> Integer?
  def restore_popularity!: () -> void
  def clear_popularity_change: () -> void

  attr_accessor compacted_id (): String?
  def compacted_id_changed?: () -> bool
  def compacted_id_change: () -> [String?, String?]
  def compacted_id_will_change!: () -> void
  def compacted_id_was: () -> String?
  def compacted_id_previously_changed?: () -> bool
  def compacted_id_previous_change: () -> Array[String?]?
  def compacted_id_previously_was: () -> String?
  def restore_compacted_id!: () -> void
  def clear_compacted_id_change: () -> void

  def spotify_tracks: () -> SpotifyTrack::ActiveRecord_Associations_CollectionProxy

  def album: () -> Album
  def pending!: () -> bool
  def pending?: () -> bool
  def active!: () -> bool
  def active?: () -> bool
  def ignore!: () -> bool
  def ignore?: () -> bool
  def self.pending: () -> SpotifyAlbum::ActiveRecord_Relation
  def self.active: () -> SpotifyAlbum::ActiveRecord_Relation
  def self.ignore: () -> SpotifyAlbum::ActiveRecord_Relation

  # rbs prototype rb app/models/spotify_album.rb
  include MusicServiceCreatable
  extend MusicServiceCreatable::ClassMethods

  include SpotifyArtworkResizable

  include Albums::Compact

  JAPANESE_REGEXP: Regexp

  def self.music_service_id_name: () -> "spotify_id"

  def self.mapping: ({
    "id" => String,
    "name" => String,
    "release_date" => String,
    "total_tracks" => Integer,
    "label" => String,
    "copyrights" => Array[{
      "text" => String
    }],
    "external_ids" => {
      "upc" => String?
    },
    "popularity" => Integer,
    "images" => Array[{
      "url" => String,
      "width" => Integer,
      "height" => Integer
    }],
    "artists" => Array[{
      "id" => String
    }],
    "tracks" => {
      "items" => Array[{
        "id" => String,
        "name" => String,
        "disc_number" => Integer,
        "track_number" => Integer,
        "explicit" => bool,
        "is_playable" => bool?,
        "duration_ms" => Integer,
        "preview_url" => String,
        "popularity" => Integer,
        "external_ids" => {
          "isrc" => String
        },
        "artists" => Array[{
          "id" => String
        }]
      }]
    }
  } data) -> Hash[Symbol, untyped]

  def self.to_album_attrs: ({
    "id" => String,
    "name" => String,
    "release_date" => String,
    "total_tracks" => Integer,
    "label" => String,
    "copyrights" => Array[{
      "text" => String
    }],
    "external_ids" => {
      "upc" => String?
    },
    "popularity" => Integer,
    "images" => Array[{
      "url" => String,
      "width" => Integer,
      "height" => Integer
    }],
    "artists" => Array[{
      "id" => String
    }],
    "tracks" => {
      "items" => Array[{
        "id" => String,
        "name" => String,
        "disc_number" => Integer,
        "track_number" => Integer,
        "explicit" => bool,
        "is_playable" => bool?,
        "duration_ms" => Integer,
        "preview_url" => String,
        "popularity" => Integer,
        "external_ids" => {
          "isrc" => String
        },
        "artists" => Array[{
          "id" => String
        }]
      }]
    }
  } data) -> { release_date: Time, total_tracks: Integer }

  def self.create_by_music_service_id: (String spotify_id) -> (nil | SpotifyAlbum)

  # トラックのISRC1件でアルバム特定し生成する
  def self.create_by_track_isrc: (String isrc) -> Array[SpotifyAlbum]

  def music_service_id: () -> String

  # albums tracks 全てで playable が存在するため共通化
  def playable: () -> ::TrueClass

  def artwork_l: () -> Artwork

  def artwork_m: () -> Artwork

  def sync_status_spotify_tracks: () -> void
end

class SpotifyAlbum::ActiveRecord_Relation < ActiveRecord::Relation
  include _ActiveRecord_Relation[SpotifyAlbum]
  include Enumerable[SpotifyAlbum, self]
  def pending: () -> SpotifyAlbum::ActiveRecord_Relation
  def active: () -> SpotifyAlbum::ActiveRecord_Relation
  def ignore: () -> SpotifyAlbum::ActiveRecord_Relation

end

class SpotifyAlbum::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
end
